from pyquil import Program, get_qc
from pyquil.gates import RZ, RY, CNOT, MEASURE, RX, H
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=1)

p.inst(RZ(np.pi / 4, 0))
p.inst(RX(-0.054932672, 1))
p.inst(RX(-0.054932672, 2))
p.inst(RY(1.217116, 3))
p.inst(RY(np.pi, 0))
p.inst(RY(-np.pi / 2, 1))
p.inst(RY(-np.pi / 2, 2))
p.inst(RZ(-np.pi / 4, 0))
p.inst(CNOT(1, 0))
p.inst(RZ(0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(1, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-2.5153524, 1))
p.inst(RZ(3.08666, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(3.08666, 2))
p.inst(RZ(3.08666, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-0.3183159, 2))
p.inst(RZ(6.2282526, 0))
p.inst(RY(np.pi / 2, 2))
p.inst(CNOT(1, 2))
p.inst(RZ(np.pi / 4, 2))
p.inst(CNOT(1, 2))
p.inst(H(1))
p.inst(RZ(-np.pi / 4, 2))
p.inst(CNOT(2, 3))
p.inst(RY(-0.69351723, 3))
p.inst(CNOT(1, 3))
p.inst(RY(-0.8772791, 3))
p.inst(CNOT(2, 3))
p.inst(RY(0.35368032, 3))
p.inst(CNOT(1, 3))
p.inst(RX(-3 * np.pi / 4, 1))
p.inst(RY(-np.pi / 2, 1))
p.inst(CNOT(1, 2))
p.inst(RZ(-np.pi / 4, 2))
p.inst(CNOT(1, 2))
p.inst(RZ(-3.08666, 1))
p.inst(RZ(-3 * np.pi / 4, 2))
p.inst(RY(np.pi / 2, 2))
p.inst(RZ(3.1965253, 2))
p.inst(CNOT(2, 0))
p.inst(RZ(-0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-3.08666, 2))
p.inst(RZ(-3.08666, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(-0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(-5.9648694, 2))
p.inst(RZ(-3.08666, 0))
p.inst(RY(np.pi / 2, 2))
p.inst(CNOT(1, 0))
p.inst(RZ(-0.054932672, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(1, 0))
p.inst(RY(0.20702763, 0))
p.inst(RZ(4.8715469, 1))
p.inst(RZ(-4.6574563, 0))
p.inst(RY(np.pi / 2, 1))
p.inst(MEASURE(0, ro[0]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('4q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

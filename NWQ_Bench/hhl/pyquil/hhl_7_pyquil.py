from pyquil import Program, get_qc
from pyquil.gates import RZ, RY, CNOT, MEASURE, RX, H
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=7)

p.inst(RZ(-np.pi / 4, 0))
p.inst(RX(3.8098602, 1))
p.inst(RX(3.8098602, 2))
p.inst(RX(3.8098602, 3))
p.inst(RX(3.8098602, 4))
p.inst(RX(3.8098602, 5))
p.inst(RY(0.28967817, 6))
p.inst(RY(np.pi, 0))
p.inst(RY(-np.pi / 2, 1))
p.inst(RY(-np.pi / 2, 2))
p.inst(RY(-np.pi / 2, 3))
p.inst(RY(-np.pi / 2, 4))
p.inst(RY(-np.pi / 2, 5))
p.inst(RZ(np.pi / 4, 0))
p.inst(CNOT(1, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(1, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-1.7108829, 1))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 2))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-3.4217658, 2))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 3))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 3))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 3))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.56034639, 3))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-1.1206928, 4))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(0.6682675, 5))
p.inst(RZ(0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(2.4710034, 5))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(np.pi / 2, 5))
p.inst(CNOT(4, 5))
p.inst(RZ(np.pi / 4, 5))
p.inst(CNOT(4, 5))
p.inst(H(4))
p.inst(RZ(-np.pi / 4, 5))
p.inst(CNOT(3, 5))
p.inst(RZ(np.pi / 8, 5))
p.inst(CNOT(3, 5))
p.inst(RZ(-np.pi / 4, 3))
p.inst(RZ(-np.pi / 8, 5))
p.inst(CNOT(3, 4))
p.inst(RZ(np.pi / 4, 4))
p.inst(CNOT(3, 4))
p.inst(H(3))
p.inst(RZ(-np.pi / 4, 4))
p.inst(CNOT(2, 5))
p.inst(RZ(np.pi / 16, 5))
p.inst(CNOT(2, 5))
p.inst(RZ(-np.pi / 8, 2))
p.inst(RZ(-np.pi / 16, 5))
p.inst(CNOT(2, 4))
p.inst(RZ(np.pi / 8, 4))
p.inst(CNOT(2, 4))
p.inst(RZ(-np.pi / 4, 2))
p.inst(RZ(-np.pi / 8, 4))
p.inst(CNOT(2, 3))
p.inst(RZ(np.pi / 4, 3))
p.inst(CNOT(2, 3))
p.inst(H(2))
p.inst(RZ(-np.pi / 4, 3))
p.inst(CNOT(1, 5))
p.inst(RZ(np.pi / 32, 5))
p.inst(CNOT(1, 5))
p.inst(RZ(-np.pi / 16, 1))
p.inst(RZ(-np.pi / 32, 5))
p.inst(CNOT(1, 4))
p.inst(CNOT(5, 6))
p.inst(RZ(np.pi / 16, 4))
p.inst(RY(-0.07880704, 6))
p.inst(CNOT(1, 4))
p.inst(RZ(-np.pi / 8, 1))
p.inst(RZ(-np.pi / 16, 4))
p.inst(CNOT(1, 3))
p.inst(CNOT(4, 6))
p.inst(RZ(np.pi / 8, 3))
p.inst(RY(-0.10745406, 6))
p.inst(CNOT(1, 3))
p.inst(CNOT(5, 6))
p.inst(RZ(-np.pi / 4, 1))
p.inst(RZ(-np.pi / 8, 3))
p.inst(RY(0.059433034, 6))
p.inst(CNOT(1, 2))
p.inst(CNOT(3, 6))
p.inst(RZ(np.pi / 4, 2))
p.inst(RY(0.037086759, 6))
p.inst(CNOT(1, 2))
p.inst(CNOT(5, 6))
p.inst(H(1))
p.inst(RZ(-np.pi / 4, 2))
p.inst(RY(-0.11113425, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.090469198, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.11644025, 6))
p.inst(CNOT(2, 6))
p.inst(RY(0.097611808, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.09205678, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.11154458, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.033985812, 6))
p.inst(CNOT(3, 6))
p.inst(RY(0.049624102, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.10831791, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.083772717, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.16223736, 6))
p.inst(CNOT(1, 6))
p.inst(RY(0.14683263, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.084469198, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.10841311, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.048240009, 6))
p.inst(CNOT(3, 6))
p.inst(RY(0.033623576, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.11157749, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.092239785, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.094908439, 6))
p.inst(CNOT(2, 6))
p.inst(RY(0.10838905, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.090848564, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.11118869, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.036333382, 6))
p.inst(CNOT(3, 6))
p.inst(RY(0.055353647, 6))
p.inst(CNOT(5, 6))
p.inst(RY(-0.107649, 6))
p.inst(CNOT(4, 6))
p.inst(RY(-0.080853948, 6))
p.inst(CNOT(5, 6))
p.inst(RY(0.20101829, 6))
p.inst(CNOT(1, 6))
p.inst(RX(-3 * np.pi / 4, 1))
p.inst(RY(-np.pi / 2, 1))
p.inst(CNOT(1, 2))
p.inst(RZ(-np.pi / 4, 2))
p.inst(CNOT(1, 2))
p.inst(RZ(np.pi / 8, 1))
p.inst(CNOT(1, 3))
p.inst(RZ(5 * np.pi / 4, 2))
p.inst(RZ(-np.pi / 8, 3))
p.inst(RY(np.pi / 2, 2))
p.inst(RZ(np.pi / 4, 2))
p.inst(CNOT(1, 3))
p.inst(RZ(np.pi / 16, 1))
p.inst(CNOT(1, 4))
p.inst(RZ(np.pi / 8, 3))
p.inst(RZ(-np.pi / 16, 4))
p.inst(CNOT(2, 3))
p.inst(RZ(-np.pi / 4, 3))
p.inst(CNOT(2, 3))
p.inst(RZ(np.pi / 8, 2))
p.inst(RZ(5 * np.pi / 4, 3))
p.inst(RY(np.pi / 2, 3))
p.inst(RZ(np.pi / 4, 3))
p.inst(CNOT(1, 4))
p.inst(RZ(np.pi / 32, 1))
p.inst(CNOT(1, 5))
p.inst(RZ(np.pi / 16, 4))
p.inst(RZ(-np.pi / 32, 5))
p.inst(CNOT(2, 4))
p.inst(RZ(-np.pi / 8, 4))
p.inst(CNOT(2, 4))
p.inst(RZ(np.pi / 16, 2))
p.inst(RZ(np.pi / 8, 4))
p.inst(CNOT(3, 4))
p.inst(RZ(-np.pi / 4, 4))
p.inst(CNOT(3, 4))
p.inst(RZ(np.pi / 8, 3))
p.inst(RZ(5 * np.pi / 4, 4))
p.inst(RY(np.pi / 2, 4))
p.inst(RZ(np.pi / 4, 4))
p.inst(CNOT(1, 5))
p.inst(RZ(-0.6682675, 1))
p.inst(RZ(np.pi / 32, 5))
p.inst(CNOT(2, 5))
p.inst(RZ(-np.pi / 16, 5))
p.inst(CNOT(2, 5))
p.inst(RZ(-0.6682675, 2))
p.inst(RZ(np.pi / 16, 5))
p.inst(CNOT(3, 5))
p.inst(RZ(-np.pi / 8, 5))
p.inst(CNOT(3, 5))
p.inst(RZ(-0.6682675, 3))
p.inst(RZ(np.pi / 8, 5))
p.inst(CNOT(4, 5))
p.inst(RZ(-np.pi / 4, 5))
p.inst(CNOT(4, 5))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-3 * np.pi / 4, 5))
p.inst(RY(np.pi / 2, 5))
p.inst(RZ(-0.6682675, 5))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(5, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(5, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(3.8121819, 5))
p.inst(RZ(-0.6682675, 0))
p.inst(RY(np.pi / 2, 5))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(4, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(4, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(3.4768873, 4))
p.inst(RZ(-0.6682675, 0))
p.inst(RY(np.pi / 2, 4))
p.inst(CNOT(3, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 3))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 3))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 3))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(3, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(3, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(3.30924, 3))
p.inst(RZ(-0.6682675, 0))
p.inst(RY(np.pi / 2, 3))
p.inst(CNOT(2, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-0.6682675, 2))
p.inst(RZ(-0.6682675, 0))
p.inst(CNOT(2, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(2, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-6.1993617, 2))
p.inst(RZ(-0.6682675, 0))
p.inst(RY(np.pi / 2, 2))
p.inst(CNOT(1, 0))
p.inst(RZ(-2.4733252, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(np.pi, 0))
p.inst(CNOT(1, 0))
p.inst(RY(1.0108711, 0))
p.inst(RZ(-1.5288845, 1))
p.inst(RZ(0.90252883, 0))
p.inst(RY(np.pi / 2, 1))
p.inst(MEASURE(0, ro[0]))
p.inst(MEASURE(1, ro[1]))
p.inst(MEASURE(2, ro[2]))
p.inst(MEASURE(3, ro[3]))
p.inst(MEASURE(4, ro[4]))
p.inst(MEASURE(5, ro[5]))
p.inst(MEASURE(6, ro[6]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('7q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(4)]

circuit = cirq.Circuit(
    cirq.rz(np.pi / 4)(q[0]),
    cirq.rx(-0.054932672)(q[1]),
    cirq.rx(-0.054932672)(q[2]),
    cirq.ry(1.217116)(q[3]),
    cirq.ry(np.pi)(q[0]),
    cirq.ry(-np.pi / 2)(q[1]),
    cirq.ry(-np.pi / 2)(q[2]),
    cirq.rz(-np.pi / 4)(q[0]),
    cirq.CNOT(q[1], q[0]),
    cirq.rz(0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-np.pi)(q[0]),
    cirq.CNOT(q[1], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-2.5153524)(q[1]),
    cirq.rz(3.08666)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.rz(0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-np.pi)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(3.08666)(q[2]),
    cirq.rz(3.08666)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.rz(0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-np.pi)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-0.3183159)(q[2]),
    cirq.rz(6.2282526)(q[0]),
    cirq.ry(np.pi / 2)(q[2]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(np.pi / 4)(q[2]),
    cirq.CNOT(q[1], q[2]),
    cirq.H(q[1]),
    cirq.rz(-np.pi / 4)(q[2]),
    cirq.CNOT(q[2], q[3]),
    cirq.ry(-0.69351723)(q[3]),
    cirq.CNOT(q[1], q[3]),
    cirq.ry(-0.8772791)(q[3]),
    cirq.CNOT(q[2], q[3]),
    cirq.ry(0.35368032)(q[3]),
    cirq.CNOT(q[1], q[3]),
    cirq.rx(-3 * np.pi / 4)(q[1]),
    cirq.ry(-np.pi / 2)(q[1]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(-np.pi / 4)(q[2]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(-3.08666)(q[1]),
    cirq.rz(-3 * np.pi / 4)(q[2]),
    cirq.ry(np.pi / 2)(q[2]),
    cirq.rz(3.1965253)(q[2]),
    cirq.CNOT(q[2], q[0]),
    cirq.rz(-0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(np.pi)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-3.08666)(q[2]),
    cirq.rz(-3.08666)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.rz(-0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(np.pi)(q[0]),
    cirq.CNOT(q[2], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(-5.9648694)(q[2]),
    cirq.rz(-3.08666)(q[0]),
    cirq.ry(np.pi / 2)(q[2]),
    cirq.CNOT(q[1], q[0]),
    cirq.rz(-0.054932672)(q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(np.pi)(q[0]),
    cirq.CNOT(q[1], q[0]),
    cirq.ry(0.20702763)(q[0]),
    cirq.rz(4.8715469)(q[1]),
    cirq.rz(-4.6574563)(q[0]),
    cirq.ry(np.pi / 2)(q[1]),
    cirq.measure(q[0], key='c00')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['c00', ]))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
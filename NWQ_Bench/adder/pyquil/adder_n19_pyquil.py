from pyquil import Program, get_qc
from pyquil.gates import CNOT, CCNOT, MEASURE, X
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=38)

p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(X(5))
p.inst(X(6))
p.inst(X(7))
p.inst(X(8))
p.inst(X(16))
p.inst(CNOT(0, 8))
p.inst(CNOT(0, 16))
p.inst(CCNOT(16, 8, 0))
p.inst(CNOT(1, 9))
p.inst(CNOT(1, 0))
p.inst(CCNOT(0, 9, 1))
p.inst(CNOT(2, 10))
p.inst(CNOT(2, 1))
p.inst(CCNOT(1, 10, 2))
p.inst(CNOT(3, 11))
p.inst(CNOT(3, 2))
p.inst(CCNOT(2, 11, 3))
p.inst(CNOT(3, 17))
p.inst(CCNOT(2, 11, 3))
p.inst(CNOT(3, 2))
p.inst(CNOT(2, 11))
p.inst(CCNOT(1, 10, 2))
p.inst(CNOT(2, 1))
p.inst(CNOT(1, 10))
p.inst(CCNOT(0, 9, 1))
p.inst(CNOT(1, 0))
p.inst(CNOT(0, 9))
p.inst(CCNOT(16, 8, 0))
p.inst(CNOT(0, 16))
p.inst(CNOT(16, 8))
p.inst(CNOT(4, 12))
p.inst(CNOT(4, 17))
p.inst(CCNOT(17, 12, 4))
p.inst(CNOT(5, 13))
p.inst(CNOT(5, 4))
p.inst(CCNOT(4, 13, 5))
p.inst(CNOT(6, 14))
p.inst(CNOT(6, 5))
p.inst(CCNOT(5, 14, 6))
p.inst(CNOT(7, 15))
p.inst(CNOT(7, 6))
p.inst(CCNOT(6, 15, 7))
p.inst(CNOT(7, 18))
p.inst(CCNOT(6, 15, 7))
p.inst(CNOT(7, 6))
p.inst(CNOT(6, 15))
p.inst(CCNOT(5, 14, 6))
p.inst(CNOT(6, 5))
p.inst(CNOT(5, 14))
p.inst(CCNOT(4, 13, 5))
p.inst(CNOT(5, 4))
p.inst(CNOT(4, 13))
p.inst(CCNOT(17, 12, 4))
p.inst(CNOT(4, 17))
p.inst(CNOT(17, 12))
p.inst(MEASURE(0, ro[19]))
p.inst(MEASURE(1, ro[20]))
p.inst(MEASURE(2, ro[21]))
p.inst(MEASURE(3, ro[22]))
p.inst(MEASURE(4, ro[23]))
p.inst(MEASURE(5, ro[24]))
p.inst(MEASURE(6, ro[25]))
p.inst(MEASURE(7, ro[26]))
p.inst(MEASURE(8, ro[27]))
p.inst(MEASURE(9, ro[28]))
p.inst(MEASURE(10, ro[29]))
p.inst(MEASURE(11, ro[30]))
p.inst(MEASURE(12, ro[31]))
p.inst(MEASURE(13, ro[32]))
p.inst(MEASURE(14, ro[33]))
p.inst(MEASURE(15, ro[34]))
p.inst(MEASURE(16, ro[35]))
p.inst(MEASURE(17, ro[36]))
p.inst(MEASURE(18, ro[37]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('19q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

from pyquil import Program, get_qc
from pyquil.gates import CNOT, CCNOT, MEASURE, X
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=92)

p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(X(5))
p.inst(X(6))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(X(10))
p.inst(X(11))
p.inst(X(12))
p.inst(X(13))
p.inst(X(14))
p.inst(X(15))
p.inst(X(16))
p.inst(X(17))
p.inst(X(18))
p.inst(X(19))
p.inst(X(20))
p.inst(X(40))
p.inst(CNOT(0, 20))
p.inst(CNOT(0, 40))
p.inst(CCNOT(40, 20, 0))
p.inst(CNOT(1, 21))
p.inst(CNOT(1, 0))
p.inst(CCNOT(0, 21, 1))
p.inst(CNOT(2, 22))
p.inst(CNOT(2, 1))
p.inst(CCNOT(1, 22, 2))
p.inst(CNOT(3, 23))
p.inst(CNOT(3, 2))
p.inst(CCNOT(2, 23, 3))
p.inst(CNOT(3, 41))
p.inst(CCNOT(2, 23, 3))
p.inst(CNOT(3, 2))
p.inst(CNOT(2, 23))
p.inst(CCNOT(1, 22, 2))
p.inst(CNOT(2, 1))
p.inst(CNOT(1, 22))
p.inst(CCNOT(0, 21, 1))
p.inst(CNOT(1, 0))
p.inst(CNOT(0, 21))
p.inst(CCNOT(40, 20, 0))
p.inst(CNOT(0, 40))
p.inst(CNOT(40, 20))
p.inst(CNOT(4, 24))
p.inst(CNOT(4, 41))
p.inst(CCNOT(41, 24, 4))
p.inst(CNOT(5, 25))
p.inst(CNOT(5, 4))
p.inst(CCNOT(4, 25, 5))
p.inst(CNOT(6, 26))
p.inst(CNOT(6, 5))
p.inst(CCNOT(5, 26, 6))
p.inst(CNOT(7, 27))
p.inst(CNOT(7, 6))
p.inst(CCNOT(6, 27, 7))
p.inst(CNOT(7, 42))
p.inst(CCNOT(6, 27, 7))
p.inst(CNOT(7, 6))
p.inst(CNOT(6, 27))
p.inst(CCNOT(5, 26, 6))
p.inst(CNOT(6, 5))
p.inst(CNOT(5, 26))
p.inst(CCNOT(4, 25, 5))
p.inst(CNOT(5, 4))
p.inst(CNOT(4, 25))
p.inst(CCNOT(41, 24, 4))
p.inst(CNOT(4, 41))
p.inst(CNOT(41, 24))
p.inst(CNOT(8, 28))
p.inst(CNOT(8, 42))
p.inst(CCNOT(42, 28, 8))
p.inst(CNOT(9, 29))
p.inst(CNOT(9, 8))
p.inst(CCNOT(8, 29, 9))
p.inst(CNOT(10, 30))
p.inst(CNOT(10, 9))
p.inst(CCNOT(9, 30, 10))
p.inst(CNOT(11, 31))
p.inst(CNOT(11, 10))
p.inst(CCNOT(10, 31, 11))
p.inst(CNOT(11, 43))
p.inst(CCNOT(10, 31, 11))
p.inst(CNOT(11, 10))
p.inst(CNOT(10, 31))
p.inst(CCNOT(9, 30, 10))
p.inst(CNOT(10, 9))
p.inst(CNOT(9, 30))
p.inst(CCNOT(8, 29, 9))
p.inst(CNOT(9, 8))
p.inst(CNOT(8, 29))
p.inst(CCNOT(42, 28, 8))
p.inst(CNOT(8, 42))
p.inst(CNOT(42, 28))
p.inst(CNOT(12, 32))
p.inst(CNOT(12, 43))
p.inst(CCNOT(43, 32, 12))
p.inst(CNOT(13, 33))
p.inst(CNOT(13, 12))
p.inst(CCNOT(12, 33, 13))
p.inst(CNOT(14, 34))
p.inst(CNOT(14, 13))
p.inst(CCNOT(13, 34, 14))
p.inst(CNOT(15, 35))
p.inst(CNOT(15, 14))
p.inst(CCNOT(14, 35, 15))
p.inst(CNOT(15, 44))
p.inst(CCNOT(14, 35, 15))
p.inst(CNOT(15, 14))
p.inst(CNOT(14, 35))
p.inst(CCNOT(13, 34, 14))
p.inst(CNOT(14, 13))
p.inst(CNOT(13, 34))
p.inst(CCNOT(12, 33, 13))
p.inst(CNOT(13, 12))
p.inst(CNOT(12, 33))
p.inst(CCNOT(43, 32, 12))
p.inst(CNOT(12, 43))
p.inst(CNOT(43, 32))
p.inst(CNOT(16, 36))
p.inst(CNOT(16, 44))
p.inst(CCNOT(44, 36, 16))
p.inst(CNOT(17, 37))
p.inst(CNOT(17, 16))
p.inst(CCNOT(16, 37, 17))
p.inst(CNOT(18, 38))
p.inst(CNOT(18, 17))
p.inst(CCNOT(17, 38, 18))
p.inst(CNOT(19, 39))
p.inst(CNOT(19, 18))
p.inst(CCNOT(18, 39, 19))
p.inst(CNOT(19, 45))
p.inst(CCNOT(18, 39, 19))
p.inst(CNOT(19, 18))
p.inst(CNOT(18, 39))
p.inst(CCNOT(17, 38, 18))
p.inst(CNOT(18, 17))
p.inst(CNOT(17, 38))
p.inst(CCNOT(16, 37, 17))
p.inst(CNOT(17, 16))
p.inst(CNOT(16, 37))
p.inst(CCNOT(44, 36, 16))
p.inst(CNOT(16, 44))
p.inst(CNOT(44, 36))
p.inst(MEASURE(0, ro[46]))
p.inst(MEASURE(1, ro[47]))
p.inst(MEASURE(2, ro[48]))
p.inst(MEASURE(3, ro[49]))
p.inst(MEASURE(4, ro[50]))
p.inst(MEASURE(5, ro[51]))
p.inst(MEASURE(6, ro[52]))
p.inst(MEASURE(7, ro[53]))
p.inst(MEASURE(8, ro[54]))
p.inst(MEASURE(9, ro[55]))
p.inst(MEASURE(10, ro[56]))
p.inst(MEASURE(11, ro[57]))
p.inst(MEASURE(12, ro[58]))
p.inst(MEASURE(13, ro[59]))
p.inst(MEASURE(14, ro[60]))
p.inst(MEASURE(15, ro[61]))
p.inst(MEASURE(16, ro[62]))
p.inst(MEASURE(17, ro[63]))
p.inst(MEASURE(18, ro[64]))
p.inst(MEASURE(19, ro[65]))
p.inst(MEASURE(20, ro[66]))
p.inst(MEASURE(21, ro[67]))
p.inst(MEASURE(22, ro[68]))
p.inst(MEASURE(23, ro[69]))
p.inst(MEASURE(24, ro[70]))
p.inst(MEASURE(25, ro[71]))
p.inst(MEASURE(26, ro[72]))
p.inst(MEASURE(27, ro[73]))
p.inst(MEASURE(28, ro[74]))
p.inst(MEASURE(29, ro[75]))
p.inst(MEASURE(30, ro[76]))
p.inst(MEASURE(31, ro[77]))
p.inst(MEASURE(32, ro[78]))
p.inst(MEASURE(33, ro[79]))
p.inst(MEASURE(34, ro[80]))
p.inst(MEASURE(35, ro[81]))
p.inst(MEASURE(36, ro[82]))
p.inst(MEASURE(37, ro[83]))
p.inst(MEASURE(38, ro[84]))
p.inst(MEASURE(39, ro[85]))
p.inst(MEASURE(40, ro[86]))
p.inst(MEASURE(41, ro[87]))
p.inst(MEASURE(42, ro[88]))
p.inst(MEASURE(43, ro[89]))
p.inst(MEASURE(44, ro[90]))
p.inst(MEASURE(45, ro[91]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('46q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

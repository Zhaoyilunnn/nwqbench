import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(46)]

circuit = cirq.Circuit(
    cirq.X(q[1]),
    cirq.X(q[2]),
    cirq.X(q[3]),
    cirq.X(q[4]),
    cirq.X(q[5]),
    cirq.X(q[6]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.X(q[10]),
    cirq.X(q[11]),
    cirq.X(q[12]),
    cirq.X(q[13]),
    cirq.X(q[14]),
    cirq.X(q[15]),
    cirq.X(q[16]),
    cirq.X(q[17]),
    cirq.X(q[18]),
    cirq.X(q[19]),
    cirq.X(q[20]),
    cirq.X(q[40]),
    cirq.CNOT(q[0], q[20]),
    cirq.CNOT(q[0], q[40]),
    cirq.CCX(q[40], q[20], q[0]),
    cirq.CNOT(q[1], q[21]),
    cirq.CNOT(q[1], q[0]),
    cirq.CCX(q[0], q[21], q[1]),
    cirq.CNOT(q[2], q[22]),
    cirq.CNOT(q[2], q[1]),
    cirq.CCX(q[1], q[22], q[2]),
    cirq.CNOT(q[3], q[23]),
    cirq.CNOT(q[3], q[2]),
    cirq.CCX(q[2], q[23], q[3]),
    cirq.CNOT(q[3], q[41]),
    cirq.CCX(q[2], q[23], q[3]),
    cirq.CNOT(q[3], q[2]),
    cirq.CNOT(q[2], q[23]),
    cirq.CCX(q[1], q[22], q[2]),
    cirq.CNOT(q[2], q[1]),
    cirq.CNOT(q[1], q[22]),
    cirq.CCX(q[0], q[21], q[1]),
    cirq.CNOT(q[1], q[0]),
    cirq.CNOT(q[0], q[21]),
    cirq.CCX(q[40], q[20], q[0]),
    cirq.CNOT(q[0], q[40]),
    cirq.CNOT(q[40], q[20]),
    cirq.CNOT(q[4], q[24]),
    cirq.CNOT(q[4], q[41]),
    cirq.CCX(q[41], q[24], q[4]),
    cirq.CNOT(q[5], q[25]),
    cirq.CNOT(q[5], q[4]),
    cirq.CCX(q[4], q[25], q[5]),
    cirq.CNOT(q[6], q[26]),
    cirq.CNOT(q[6], q[5]),
    cirq.CCX(q[5], q[26], q[6]),
    cirq.CNOT(q[7], q[27]),
    cirq.CNOT(q[7], q[6]),
    cirq.CCX(q[6], q[27], q[7]),
    cirq.CNOT(q[7], q[42]),
    cirq.CCX(q[6], q[27], q[7]),
    cirq.CNOT(q[7], q[6]),
    cirq.CNOT(q[6], q[27]),
    cirq.CCX(q[5], q[26], q[6]),
    cirq.CNOT(q[6], q[5]),
    cirq.CNOT(q[5], q[26]),
    cirq.CCX(q[4], q[25], q[5]),
    cirq.CNOT(q[5], q[4]),
    cirq.CNOT(q[4], q[25]),
    cirq.CCX(q[41], q[24], q[4]),
    cirq.CNOT(q[4], q[41]),
    cirq.CNOT(q[41], q[24]),
    cirq.CNOT(q[8], q[28]),
    cirq.CNOT(q[8], q[42]),
    cirq.CCX(q[42], q[28], q[8]),
    cirq.CNOT(q[9], q[29]),
    cirq.CNOT(q[9], q[8]),
    cirq.CCX(q[8], q[29], q[9]),
    cirq.CNOT(q[10], q[30]),
    cirq.CNOT(q[10], q[9]),
    cirq.CCX(q[9], q[30], q[10]),
    cirq.CNOT(q[11], q[31]),
    cirq.CNOT(q[11], q[10]),
    cirq.CCX(q[10], q[31], q[11]),
    cirq.CNOT(q[11], q[43]),
    cirq.CCX(q[10], q[31], q[11]),
    cirq.CNOT(q[11], q[10]),
    cirq.CNOT(q[10], q[31]),
    cirq.CCX(q[9], q[30], q[10]),
    cirq.CNOT(q[10], q[9]),
    cirq.CNOT(q[9], q[30]),
    cirq.CCX(q[8], q[29], q[9]),
    cirq.CNOT(q[9], q[8]),
    cirq.CNOT(q[8], q[29]),
    cirq.CCX(q[42], q[28], q[8]),
    cirq.CNOT(q[8], q[42]),
    cirq.CNOT(q[42], q[28]),
    cirq.CNOT(q[12], q[32]),
    cirq.CNOT(q[12], q[43]),
    cirq.CCX(q[43], q[32], q[12]),
    cirq.CNOT(q[13], q[33]),
    cirq.CNOT(q[13], q[12]),
    cirq.CCX(q[12], q[33], q[13]),
    cirq.CNOT(q[14], q[34]),
    cirq.CNOT(q[14], q[13]),
    cirq.CCX(q[13], q[34], q[14]),
    cirq.CNOT(q[15], q[35]),
    cirq.CNOT(q[15], q[14]),
    cirq.CCX(q[14], q[35], q[15]),
    cirq.CNOT(q[15], q[44]),
    cirq.CCX(q[14], q[35], q[15]),
    cirq.CNOT(q[15], q[14]),
    cirq.CNOT(q[14], q[35]),
    cirq.CCX(q[13], q[34], q[14]),
    cirq.CNOT(q[14], q[13]),
    cirq.CNOT(q[13], q[34]),
    cirq.CCX(q[12], q[33], q[13]),
    cirq.CNOT(q[13], q[12]),
    cirq.CNOT(q[12], q[33]),
    cirq.CCX(q[43], q[32], q[12]),
    cirq.CNOT(q[12], q[43]),
    cirq.CNOT(q[43], q[32]),
    cirq.CNOT(q[16], q[36]),
    cirq.CNOT(q[16], q[44]),
    cirq.CCX(q[44], q[36], q[16]),
    cirq.CNOT(q[17], q[37]),
    cirq.CNOT(q[17], q[16]),
    cirq.CCX(q[16], q[37], q[17]),
    cirq.CNOT(q[18], q[38]),
    cirq.CNOT(q[18], q[17]),
    cirq.CCX(q[17], q[38], q[18]),
    cirq.CNOT(q[19], q[39]),
    cirq.CNOT(q[19], q[18]),
    cirq.CCX(q[18], q[39], q[19]),
    cirq.CNOT(q[19], q[45]),
    cirq.CCX(q[18], q[39], q[19]),
    cirq.CNOT(q[19], q[18]),
    cirq.CNOT(q[18], q[39]),
    cirq.CCX(q[17], q[38], q[18]),
    cirq.CNOT(q[18], q[17]),
    cirq.CNOT(q[17], q[38]),
    cirq.CCX(q[16], q[37], q[17]),
    cirq.CNOT(q[17], q[16]),
    cirq.CNOT(q[16], q[37]),
    cirq.CCX(q[44], q[36], q[16]),
    cirq.CNOT(q[16], q[44]),
    cirq.CNOT(q[44], q[36]),
    cirq.measure(q[0], key='meas0'),
    cirq.measure(q[1], key='meas1'),
    cirq.measure(q[2], key='meas2'),
    cirq.measure(q[3], key='meas3'),
    cirq.measure(q[4], key='meas4'),
    cirq.measure(q[5], key='meas5'),
    cirq.measure(q[6], key='meas6'),
    cirq.measure(q[7], key='meas7'),
    cirq.measure(q[8], key='meas8'),
    cirq.measure(q[9], key='meas9'),
    cirq.measure(q[10], key='meas10'),
    cirq.measure(q[11], key='meas11'),
    cirq.measure(q[12], key='meas12'),
    cirq.measure(q[13], key='meas13'),
    cirq.measure(q[14], key='meas14'),
    cirq.measure(q[15], key='meas15'),
    cirq.measure(q[16], key='meas16'),
    cirq.measure(q[17], key='meas17'),
    cirq.measure(q[18], key='meas18'),
    cirq.measure(q[19], key='meas19'),
    cirq.measure(q[20], key='meas20'),
    cirq.measure(q[21], key='meas21'),
    cirq.measure(q[22], key='meas22'),
    cirq.measure(q[23], key='meas23'),
    cirq.measure(q[24], key='meas24'),
    cirq.measure(q[25], key='meas25'),
    cirq.measure(q[26], key='meas26'),
    cirq.measure(q[27], key='meas27'),
    cirq.measure(q[28], key='meas28'),
    cirq.measure(q[29], key='meas29'),
    cirq.measure(q[30], key='meas30'),
    cirq.measure(q[31], key='meas31'),
    cirq.measure(q[32], key='meas32'),
    cirq.measure(q[33], key='meas33'),
    cirq.measure(q[34], key='meas34'),
    cirq.measure(q[35], key='meas35'),
    cirq.measure(q[36], key='meas36'),
    cirq.measure(q[37], key='meas37'),
    cirq.measure(q[38], key='meas38'),
    cirq.measure(q[39], key='meas39'),
    cirq.measure(q[40], key='meas40'),
    cirq.measure(q[41], key='meas41'),
    cirq.measure(q[42], key='meas42'),
    cirq.measure(q[43], key='meas43'),
    cirq.measure(q[44], key='meas44'),
    cirq.measure(q[45], key='meas45')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['meas0', 'meas1', 'meas2', 'meas3', 'meas4', 'meas5', 'meas6', 'meas7', 'meas8', 'meas9', 'meas10', 'meas11', 'meas12', 'meas13', 'meas14', 'meas15', 'meas16', 'meas17', 'meas18', 'meas19', 'meas20', 'meas21', 'meas22', 'meas23', 'meas24', 'meas25', 'meas26', 'meas27', 'meas28', 'meas29', 'meas30', 'meas31', 'meas32', 'meas33', 'meas34', 'meas35', 'meas36', 'meas37', 'meas38', 'meas39', 'meas40', 'meas41', 'meas42', 'meas43', 'meas44', 'meas45']))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=26)

p.inst(H(0))
p.inst(CNOT(0, 1))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 3))
p.inst(CNOT(1, 3))
p.inst(CNOT(1, 4))
p.inst(CNOT(1, 4))
p.inst(MEASURE(3, ro[0]))
p.inst(MEASURE(4, ro[1]))
p.inst(H(5))
p.inst(CNOT(5, 6))
p.inst(CNOT(6, 7))
p.inst(CNOT(5, 8))
p.inst(CNOT(6, 8))
p.inst(CNOT(6, 9))
p.inst(CNOT(6, 9))
p.inst(MEASURE(8, ro[2]))
p.inst(MEASURE(9, ro[3]))
p.inst(H(10))
p.inst(CNOT(10, 11))
p.inst(CNOT(11, 12))
p.inst(CNOT(10, 13))
p.inst(CNOT(11, 13))
p.inst(CNOT(11, 14))
p.inst(CNOT(11, 14))
p.inst(MEASURE(13, ro[4]))
p.inst(MEASURE(14, ro[5]))
p.inst(H(15))
p.inst(CNOT(15, 16))
p.inst(CNOT(16, 17))
p.inst(CNOT(15, 18))
p.inst(CNOT(16, 18))
p.inst(CNOT(16, 19))
p.inst(CNOT(16, 19))
p.inst(MEASURE(18, ro[6]))
p.inst(MEASURE(19, ro[7]))
p.inst(H(20))
p.inst(CNOT(20, 21))
p.inst(CNOT(21, 22))
p.inst(CNOT(20, 23))
p.inst(CNOT(21, 23))
p.inst(CNOT(21, 24))
p.inst(CNOT(21, 24))
p.inst(MEASURE(23, ro[0]))
p.inst(MEASURE(24, ro[1]))
p.inst(H(25))
p.inst(CNOT(25, 26))
p.inst(CNOT(26, 27))
p.inst(CNOT(25, 28))
p.inst(CNOT(26, 28))
p.inst(CNOT(26, 29))
p.inst(CNOT(26, 29))
p.inst(MEASURE(28, ro[2]))
p.inst(MEASURE(29, ro[3]))
p.inst(H(30))
p.inst(CNOT(30, 31))
p.inst(CNOT(31, 32))
p.inst(CNOT(30, 33))
p.inst(CNOT(31, 33))
p.inst(CNOT(31, 34))
p.inst(CNOT(31, 34))
p.inst(MEASURE(33, ro[4]))
p.inst(MEASURE(34, ro[5]))
p.inst(H(35))
p.inst(CNOT(35, 36))
p.inst(CNOT(36, 37))
p.inst(CNOT(35, 38))
p.inst(CNOT(36, 38))
p.inst(CNOT(36, 39))
p.inst(CNOT(36, 39))
p.inst(MEASURE(38, ro[6]))
p.inst(MEASURE(39, ro[7]))
p.inst(H(40))
p.inst(CNOT(40, 41))
p.inst(CNOT(41, 42))
p.inst(CNOT(40, 43))
p.inst(CNOT(41, 43))
p.inst(CNOT(41, 44))
p.inst(CNOT(41, 44))
p.inst(MEASURE(43, ro[0]))
p.inst(MEASURE(44, ro[1]))
p.inst(H(45))
p.inst(CNOT(45, 46))
p.inst(CNOT(46, 47))
p.inst(CNOT(45, 48))
p.inst(CNOT(46, 48))
p.inst(CNOT(46, 49))
p.inst(CNOT(46, 49))
p.inst(MEASURE(48, ro[2]))
p.inst(MEASURE(49, ro[3]))
p.inst(H(50))
p.inst(CNOT(50, 51))
p.inst(CNOT(51, 52))
p.inst(CNOT(50, 53))
p.inst(CNOT(51, 53))
p.inst(CNOT(51, 54))
p.inst(CNOT(51, 54))
p.inst(MEASURE(53, ro[4]))
p.inst(MEASURE(54, ro[5]))
p.inst(H(55))
p.inst(CNOT(55, 56))
p.inst(CNOT(56, 57))
p.inst(CNOT(55, 58))
p.inst(CNOT(56, 58))
p.inst(CNOT(56, 59))
p.inst(CNOT(56, 59))
p.inst(MEASURE(58, ro[6]))
p.inst(MEASURE(59, ro[7]))
p.inst(H(60))
p.inst(CNOT(60, 61))
p.inst(CNOT(61, 62))
p.inst(CNOT(60, 63))
p.inst(CNOT(61, 63))
p.inst(CNOT(61, 64))
p.inst(CNOT(61, 64))
p.inst(MEASURE(63, ro[0]))
p.inst(MEASURE(64, ro[1]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('65q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

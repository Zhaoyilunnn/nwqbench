from pyquil import Program, get_qc
from pyquil.gates import RY, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_theta = Parameter('theta')

cry_array = np.array([[ 1, 0, 0, 0 ],[ 0, 1, 0, 0 ],[ 0, 0, quil_cos(p_theta / 2), -1*quil_sin(p_theta / 2) ],[ 0, 0, quil_sin(p_theta / 2), quil_cos(p_theta / 2) ]])


cry_defgate = DefGate('cry', cry_array, [p_theta])
cry = cry_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=2)

p.inst(cry_defgate)

p.inst(RY(1.7977745, 0))
p.inst(RY(2.4290782, 1))
p.inst(RY(2.0518248, 2))
p.inst(RY(1.8828395, 3))
p.inst(RY(2.6444115, 4))
p.inst(RY(2.9523479, 5))
p.inst(RY(2.7122252, 6))
p.inst(RY(1.3092064, 7))
p.inst(RY(2.5455586, 8))
p.inst(RY(1.1707559, 9))
p.inst(RY(0.73521457, 10))
p.inst(RY(1.0956246, 11))
p.inst(RY(1.6620362, 12))
p.inst(cry(2.2936072)(0, 1))
p.inst(cry(2.4366259)(1, 2))
p.inst(cry(1.3873553)(2, 3))
p.inst(cry(1.5755903)(3, 4))
p.inst(cry(2.8188762)(4, 5))
p.inst(cry(0.44547731)(5, 6))
p.inst(cry(2.7036384)(6, 7))
p.inst(cry(0.95798642)(7, 8))
p.inst(cry(1.0212333)(8, 9))
p.inst(cry(1.2326703)(9, 10))
p.inst(cry(1.0304913)(10, 11))
p.inst(cry(2.7941224)(11, 12))
p.inst(cry(1.3519228)(12, 0))
p.inst(RY(2.6966784, 0))
p.inst(RY(1.0185554, 1))
p.inst(RY(0.2490335, 2))
p.inst(RY(0.27822903, 3))
p.inst(RY(0.67767603, 4))
p.inst(RY(1.170178, 5))
p.inst(RY(1.6017061, 6))
p.inst(RY(1.1324313, 7))
p.inst(RY(2.4205829, 8))
p.inst(RY(1.0348663, 9))
p.inst(RY(1.1960244, 10))
p.inst(RY(0.17937507, 11))
p.inst(RY(3.0740486, 12))
p.inst(cry(2.8986654)(0, 1))
p.inst(cry(1.466542)(1, 2))
p.inst(cry(1.4942799)(2, 3))
p.inst(cry(1.1746099)(3, 4))
p.inst(cry(1.7224761)(4, 5))
p.inst(cry(1.4907356)(5, 6))
p.inst(cry(2.4893668)(6, 7))
p.inst(cry(1.3426198)(7, 8))
p.inst(cry(2.0298046)(8, 9))
p.inst(cry(0.31647779)(9, 10))
p.inst(cry(1.8223344)(10, 11))
p.inst(cry(2.5603944)(11, 12))
p.inst(cry(1.3949801)(12, 0))
p.inst(RY(0.092043951, 0))
p.inst(RY(0.32876019, 1))
p.inst(RY(3.0915138, 2))
p.inst(RY(2.6452213, 3))
p.inst(RY(3.1193449, 4))
p.inst(RY(0.7492682, 5))
p.inst(RY(1.9111307, 6))
p.inst(RY(0.33431689, 7))
p.inst(RY(2.934947, 8))
p.inst(RY(2.5044793, 9))
p.inst(RY(1.5396555, 10))
p.inst(RY(1.1956838, 11))
p.inst(RY(0.42721248, 12))
p.inst(cry(0.55220528)(0, 13))
p.inst(cry(2.879998)(1, 13))
p.inst(cry(2.7494499)(2, 13))
p.inst(cry(0.085577304)(3, 13))
p.inst(cry(1.4899562)(4, 13))
p.inst(cry(2.6948186)(5, 13))
p.inst(cry(2.0293363)(6, 13))
p.inst(cry(2.9635696)(7, 13))
p.inst(cry(2.0392029)(8, 13))
p.inst(cry(0.47816264)(9, 13))
p.inst(cry(2.5668759)(10, 13))
p.inst(cry(0.18281766)(11, 13))
p.inst(cry(1.8175045)(12, 13))
p.inst(cry(3.1017869)(0, 14))
p.inst(cry(0.15811296)(1, 14))
p.inst(cry(1.3312993)(2, 14))
p.inst(cry(2.1821697)(3, 14))
p.inst(cry(1.0340898)(4, 14))
p.inst(cry(2.5211007)(5, 14))
p.inst(cry(0.06668857)(6, 14))
p.inst(cry(2.1189792)(7, 14))
p.inst(cry(2.1782705)(8, 14))
p.inst(cry(0.84003651)(9, 14))
p.inst(cry(0.86549387)(10, 14))
p.inst(cry(2.0566554)(11, 14))
p.inst(cry(0.28477526)(12, 14))
p.inst(MEASURE(13, ro[0]))
p.inst(MEASURE(14, ro[1]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('15q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

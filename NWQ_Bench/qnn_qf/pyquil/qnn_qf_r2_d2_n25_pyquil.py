from pyquil import Program, get_qc
from pyquil.gates import RY, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_theta = Parameter('theta')

cry_array = np.array([[ 1, 0, 0, 0 ],[ 0, 1, 0, 0 ],[ 0, 0, quil_cos(p_theta / 2), -1*quil_sin(p_theta / 2) ],[ 0, 0, quil_sin(p_theta / 2), quil_cos(p_theta / 2) ]])


cry_defgate = DefGate('cry', cry_array, [p_theta])
cry = cry_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=2)

p.inst(cry_defgate)

p.inst(RY(2.4046372, 0))
p.inst(RY(2.3336143, 1))
p.inst(RY(0.72133708, 2))
p.inst(RY(1.2300238, 3))
p.inst(RY(0.10197243, 4))
p.inst(RY(0.69592388, 5))
p.inst(RY(1.3613843, 6))
p.inst(RY(0.5556097, 7))
p.inst(RY(1.4779006, 8))
p.inst(RY(0.50657227, 9))
p.inst(RY(2.9520682, 10))
p.inst(RY(1.3080473, 11))
p.inst(RY(2.8924044, 12))
p.inst(RY(2.4984378, 13))
p.inst(RY(2.9348787, 14))
p.inst(RY(3.0971339, 15))
p.inst(RY(2.921169, 16))
p.inst(RY(1.1886529, 17))
p.inst(RY(2.6757282, 18))
p.inst(RY(2.338456, 19))
p.inst(RY(2.0531018, 20))
p.inst(RY(2.9369249, 21))
p.inst(RY(1.6146981, 22))
p.inst(cry(1.1414484)(0, 1))
p.inst(cry(1.3104948)(1, 2))
p.inst(cry(2.9488226)(2, 3))
p.inst(cry(2.3282812)(3, 4))
p.inst(cry(1.8701555)(4, 5))
p.inst(cry(0.16767714)(5, 6))
p.inst(cry(1.2373367)(6, 7))
p.inst(cry(2.674611)(7, 8))
p.inst(cry(1.5038571)(8, 9))
p.inst(cry(1.8698485)(9, 10))
p.inst(cry(0.294313)(10, 11))
p.inst(cry(0.8994402)(11, 12))
p.inst(cry(1.752392)(12, 13))
p.inst(cry(1.7175125)(13, 14))
p.inst(cry(0.37698405)(14, 15))
p.inst(cry(0.96841912)(15, 16))
p.inst(cry(3.0982528)(16, 17))
p.inst(cry(1.2282107)(17, 18))
p.inst(cry(0.80083453)(18, 19))
p.inst(cry(2.3188841)(19, 20))
p.inst(cry(2.5995155)(20, 21))
p.inst(cry(0.93857984)(21, 22))
p.inst(cry(0.63822073)(22, 0))
p.inst(RY(1.9413184, 0))
p.inst(RY(1.2085058, 1))
p.inst(RY(0.7701523, 2))
p.inst(RY(3.0569623, 3))
p.inst(RY(2.4862034, 4))
p.inst(RY(1.3241212, 5))
p.inst(RY(0.52798856, 6))
p.inst(RY(2.5582703, 7))
p.inst(RY(1.0876095, 8))
p.inst(RY(0.2310176, 9))
p.inst(RY(1.0148172, 10))
p.inst(RY(1.7166428, 11))
p.inst(RY(1.0521398, 12))
p.inst(RY(2.239007, 13))
p.inst(RY(0.64819717, 14))
p.inst(RY(2.0142363, 15))
p.inst(RY(2.9262324, 16))
p.inst(RY(0.0054313038, 17))
p.inst(RY(1.7623353, 18))
p.inst(RY(0.87994577, 19))
p.inst(RY(0.78226646, 20))
p.inst(RY(2.0612786, 21))
p.inst(RY(0.84047059, 22))
p.inst(cry(1.34973)(0, 1))
p.inst(cry(0.97470663)(1, 2))
p.inst(cry(0.025435813)(2, 3))
p.inst(cry(2.9278685)(3, 4))
p.inst(cry(2.3737549)(4, 5))
p.inst(cry(2.8485333)(5, 6))
p.inst(cry(2.1689026)(6, 7))
p.inst(cry(2.2029461)(7, 8))
p.inst(cry(1.0586872)(8, 9))
p.inst(cry(1.6016692)(9, 10))
p.inst(cry(2.5923506)(10, 11))
p.inst(cry(2.358091)(11, 12))
p.inst(cry(1.0014829)(12, 13))
p.inst(cry(2.679315)(13, 14))
p.inst(cry(1.782026)(14, 15))
p.inst(cry(1.0299718)(15, 16))
p.inst(cry(3.0017512)(16, 17))
p.inst(cry(0.11425213)(17, 18))
p.inst(cry(1.0524761)(18, 19))
p.inst(cry(2.9116021)(19, 20))
p.inst(cry(2.0787959)(20, 21))
p.inst(cry(0.38858815)(21, 22))
p.inst(cry(1.2246489)(22, 0))
p.inst(RY(0.062132702, 0))
p.inst(RY(2.0324349, 1))
p.inst(RY(0.2411408, 2))
p.inst(RY(0.3218655, 3))
p.inst(RY(2.3034366, 4))
p.inst(RY(2.1618027, 5))
p.inst(RY(2.4662505, 6))
p.inst(RY(0.10813863, 7))
p.inst(RY(0.78527373, 8))
p.inst(RY(1.1999737, 9))
p.inst(RY(1.537061, 10))
p.inst(RY(0.3983319, 11))
p.inst(RY(1.9941611, 12))
p.inst(RY(0.51317647, 13))
p.inst(RY(0.10166123, 14))
p.inst(RY(1.8670245, 15))
p.inst(RY(0.0072601447, 16))
p.inst(RY(2.7808594, 17))
p.inst(RY(1.7465951, 18))
p.inst(RY(0.15020818, 19))
p.inst(RY(0.17539502, 20))
p.inst(RY(0.1654123, 21))
p.inst(RY(0.035401541, 22))
p.inst(cry(2.243115)(0, 23))
p.inst(cry(1.7246459)(1, 23))
p.inst(cry(2.3173242)(2, 23))
p.inst(cry(1.7832024)(3, 23))
p.inst(cry(1.4016966)(4, 23))
p.inst(cry(0.55701435)(5, 23))
p.inst(cry(1.1949274)(6, 23))
p.inst(cry(0.92853556)(7, 23))
p.inst(cry(2.0343624)(8, 23))
p.inst(cry(2.1080536)(9, 23))
p.inst(cry(1.434495)(10, 23))
p.inst(cry(2.2557125)(11, 23))
p.inst(cry(2.8785988)(12, 23))
p.inst(cry(0.12036396)(13, 23))
p.inst(cry(0.21366093)(14, 23))
p.inst(cry(2.5115313)(15, 23))
p.inst(cry(0.61849089)(16, 23))
p.inst(cry(1.1318183)(17, 23))
p.inst(cry(1.1052579)(18, 23))
p.inst(cry(2.83834)(19, 23))
p.inst(cry(1.1548658)(20, 23))
p.inst(cry(1.4192155)(21, 23))
p.inst(cry(2.4928367)(22, 23))
p.inst(cry(1.1986511)(0, 24))
p.inst(cry(2.244777)(1, 24))
p.inst(cry(1.5451018)(2, 24))
p.inst(cry(2.5612201)(3, 24))
p.inst(cry(0.58222979)(4, 24))
p.inst(cry(2.7587097)(5, 24))
p.inst(cry(2.3223639)(6, 24))
p.inst(cry(1.7464534)(7, 24))
p.inst(cry(1.0925269)(8, 24))
p.inst(cry(1.4426669)(9, 24))
p.inst(cry(0.26513699)(10, 24))
p.inst(cry(0.8721534)(11, 24))
p.inst(cry(2.7416068)(12, 24))
p.inst(cry(2.4328144)(13, 24))
p.inst(cry(1.3445639)(14, 24))
p.inst(cry(1.9438733)(15, 24))
p.inst(cry(2.5758755)(16, 24))
p.inst(cry(0.5227285)(17, 24))
p.inst(cry(1.09593)(18, 24))
p.inst(cry(1.4953231)(19, 24))
p.inst(cry(0.85781967)(20, 24))
p.inst(cry(0.039022339)(21, 24))
p.inst(cry(0.11357496)(22, 24))
p.inst(MEASURE(23, ro[0]))
p.inst(MEASURE(24, ro[1]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('25q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

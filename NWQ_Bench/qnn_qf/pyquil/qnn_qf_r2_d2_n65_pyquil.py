from pyquil import Program, get_qc
from pyquil.gates import RY, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_theta = Parameter('theta')

cry_array = np.array([[ 1, 0, 0, 0 ],[ 0, 1, 0, 0 ],[ 0, 0, quil_cos(p_theta / 2), -1*quil_sin(p_theta / 2) ],[ 0, 0, quil_sin(p_theta / 2), quil_cos(p_theta / 2) ]])


cry_defgate = DefGate('cry', cry_array, [p_theta])
cry = cry_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=2)

p.inst(cry_defgate)

p.inst(RY(0.38137016, 0))
p.inst(RY(1.597391, 1))
p.inst(RY(3.1312761, 2))
p.inst(RY(1.9455592, 3))
p.inst(RY(1.4181581, 4))
p.inst(RY(2.5813076, 5))
p.inst(RY(2.4855103, 6))
p.inst(RY(1.7852507, 7))
p.inst(RY(3.1277805, 8))
p.inst(RY(1.03701, 9))
p.inst(RY(1.0673759, 10))
p.inst(RY(0.056613245, 11))
p.inst(RY(1.1727377, 12))
p.inst(RY(2.569085, 13))
p.inst(RY(0.53877058, 14))
p.inst(RY(2.2297343, 15))
p.inst(RY(1.0526182, 16))
p.inst(RY(0.80761631, 17))
p.inst(RY(2.7564201, 18))
p.inst(RY(2.2972021, 19))
p.inst(RY(1.7502474, 20))
p.inst(RY(1.3668347, 21))
p.inst(RY(0.28757429, 22))
p.inst(RY(1.5956754, 23))
p.inst(RY(0.55702007, 24))
p.inst(RY(0.3109128, 25))
p.inst(RY(1.572241, 26))
p.inst(RY(0.083719622, 27))
p.inst(RY(1.9336054, 28))
p.inst(RY(0.26484758, 29))
p.inst(RY(2.4550581, 30))
p.inst(RY(2.0799309, 31))
p.inst(RY(3.0930539, 32))
p.inst(RY(1.7234496, 33))
p.inst(RY(0.068374556, 34))
p.inst(RY(0.69014887, 35))
p.inst(RY(1.3507764, 36))
p.inst(RY(1.8657457, 37))
p.inst(RY(0.009179867, 38))
p.inst(RY(0.0022538673, 39))
p.inst(RY(0.51777241, 40))
p.inst(RY(2.961238, 41))
p.inst(RY(2.2845092, 42))
p.inst(RY(2.084119, 43))
p.inst(RY(1.6546231, 44))
p.inst(RY(2.2712099, 45))
p.inst(RY(1.7568156, 46))
p.inst(RY(0.92157316, 47))
p.inst(RY(0.84813417, 48))
p.inst(RY(2.3544861, 49))
p.inst(RY(0.21052277, 50))
p.inst(RY(1.4395749, 51))
p.inst(RY(2.02943, 52))
p.inst(RY(2.479163, 53))
p.inst(RY(0.29812868, 54))
p.inst(RY(1.4334097, 55))
p.inst(RY(2.2913937, 56))
p.inst(RY(2.8951013, 57))
p.inst(RY(0.76617397, 58))
p.inst(RY(2.5669207, 59))
p.inst(RY(0.06392003, 60))
p.inst(RY(2.8802984, 61))
p.inst(RY(0.49596847, 62))
p.inst(cry(1.7554609)(0, 1))
p.inst(cry(1.8379337)(1, 2))
p.inst(cry(0.91722333)(2, 3))
p.inst(cry(2.5250698)(3, 4))
p.inst(cry(2.6513585)(4, 5))
p.inst(cry(1.5738191)(5, 6))
p.inst(cry(0.55330773)(6, 7))
p.inst(cry(0.36238944)(7, 8))
p.inst(cry(2.2750925)(8, 9))
p.inst(cry(2.1018471)(9, 10))
p.inst(cry(2.4273902)(10, 11))
p.inst(cry(2.9227996)(11, 12))
p.inst(cry(2.7394277)(12, 13))
p.inst(cry(1.3035774)(13, 14))
p.inst(cry(2.9353591)(14, 15))
p.inst(cry(0.91087564)(15, 16))
p.inst(cry(2.1562833)(16, 17))
p.inst(cry(2.0782934)(17, 18))
p.inst(cry(1.0045695)(18, 19))
p.inst(cry(2.0355993)(19, 20))
p.inst(cry(0.58162598)(20, 21))
p.inst(cry(3.009691)(21, 22))
p.inst(cry(2.3621795)(22, 23))
p.inst(cry(2.0335557)(23, 24))
p.inst(cry(2.0609894)(24, 25))
p.inst(cry(0.24746248)(25, 26))
p.inst(cry(0.30398323)(26, 27))
p.inst(cry(1.9097068)(27, 28))
p.inst(cry(2.9534527)(28, 29))
p.inst(cry(3.0931806)(29, 30))
p.inst(cry(1.8466706)(30, 31))
p.inst(cry(0.70811218)(31, 32))
p.inst(cry(0.64938198)(32, 33))
p.inst(cry(1.3959315)(33, 34))
p.inst(cry(1.8773341)(34, 35))
p.inst(cry(1.4121634)(35, 36))
p.inst(cry(0.61001404)(36, 37))
p.inst(cry(0.73680993)(37, 38))
p.inst(cry(1.1692506)(38, 39))
p.inst(cry(1.9519124)(39, 40))
p.inst(cry(0.36890087)(40, 41))
p.inst(cry(2.6976865)(41, 42))
p.inst(cry(0.56598443)(42, 43))
p.inst(cry(1.1222945)(43, 44))
p.inst(cry(1.6672024)(44, 45))
p.inst(cry(0.23322455)(45, 46))
p.inst(cry(2.0046974)(46, 47))
p.inst(cry(0.20775482)(47, 48))
p.inst(cry(0.50658616)(48, 49))
p.inst(cry(0.67667964)(49, 50))
p.inst(cry(0.12728448)(50, 51))
p.inst(cry(2.6158924)(51, 52))
p.inst(cry(1.7052678)(52, 53))
p.inst(cry(0.2622871)(53, 54))
p.inst(cry(0.20745928)(54, 55))
p.inst(cry(2.6156058)(55, 56))
p.inst(cry(0.6169768)(56, 57))
p.inst(cry(1.8648648)(57, 58))
p.inst(cry(1.1187083)(58, 59))
p.inst(cry(1.1551792)(59, 60))
p.inst(cry(1.6377011)(60, 61))
p.inst(cry(1.5461612)(61, 62))
p.inst(cry(2.4240673)(62, 0))
p.inst(RY(1.3262088, 0))
p.inst(RY(0.056006825, 1))
p.inst(RY(1.0705256, 2))
p.inst(RY(1.2656256, 3))
p.inst(RY(2.0228025, 4))
p.inst(RY(0.23167682, 5))
p.inst(RY(0.61159495, 6))
p.inst(RY(0.067960269, 7))
p.inst(RY(2.2921029, 8))
p.inst(RY(0.701096, 9))
p.inst(RY(0.015138118, 10))
p.inst(RY(3.0035197, 11))
p.inst(RY(2.5427831, 12))
p.inst(RY(0.028118339, 13))
p.inst(RY(1.8386039, 14))
p.inst(RY(0.048967982, 15))
p.inst(RY(0.30577583, 16))
p.inst(RY(0.065381476, 17))
p.inst(RY(0.94693982, 18))
p.inst(RY(2.8986635, 19))
p.inst(RY(2.6024, 20))
p.inst(RY(1.8480019, 21))
p.inst(RY(1.3659516, 22))
p.inst(RY(0.40021455, 23))
p.inst(RY(1.7371753, 24))
p.inst(RY(1.0305321, 25))
p.inst(RY(1.7970088, 26))
p.inst(RY(1.7168421, 27))
p.inst(RY(0.70818802, 28))
p.inst(RY(2.9244037, 29))
p.inst(RY(2.4963351, 30))
p.inst(RY(0.18352837, 31))
p.inst(RY(1.1097734, 32))
p.inst(RY(1.2116139, 33))
p.inst(RY(1.4645945, 34))
p.inst(RY(1.7161489, 35))
p.inst(RY(0.87398787, 36))
p.inst(RY(2.1655432, 37))
p.inst(RY(0.57193692, 38))
p.inst(RY(1.4926965, 39))
p.inst(RY(2.4651568, 40))
p.inst(RY(0.48928101, 41))
p.inst(RY(0.46452917, 42))
p.inst(RY(3.0671935, 43))
p.inst(RY(2.9665904, 44))
p.inst(RY(2.2122521, 45))
p.inst(RY(2.0659392, 46))
p.inst(RY(1.098776, 47))
p.inst(RY(1.2124631, 48))
p.inst(RY(1.4970898, 49))
p.inst(RY(1.1524541, 50))
p.inst(RY(1.2384975, 51))
p.inst(RY(2.3148184, 52))
p.inst(RY(1.0482513, 53))
p.inst(RY(1.8629774, 54))
p.inst(RY(2.0948614, 55))
p.inst(RY(2.2901031, 56))
p.inst(RY(0.68616497, 57))
p.inst(RY(3.0107191, 58))
p.inst(RY(0.38548259, 59))
p.inst(RY(0.65954043, 60))
p.inst(RY(0.66261978, 61))
p.inst(RY(1.0904532, 62))
p.inst(cry(1.5472538)(0, 1))
p.inst(cry(0.25695733)(1, 2))
p.inst(cry(0.55369502)(2, 3))
p.inst(cry(1.5994665)(3, 4))
p.inst(cry(2.1811042)(4, 5))
p.inst(cry(1.6548538)(5, 6))
p.inst(cry(0.11442076)(6, 7))
p.inst(cry(1.6551307)(7, 8))
p.inst(cry(3.0696311)(8, 9))
p.inst(cry(1.1992871)(9, 10))
p.inst(cry(0.81627888)(10, 11))
p.inst(cry(0.23771537)(11, 12))
p.inst(cry(2.4738487)(12, 13))
p.inst(cry(0.64380151)(13, 14))
p.inst(cry(2.7169849)(14, 15))
p.inst(cry(1.527752)(15, 16))
p.inst(cry(1.016704)(16, 17))
p.inst(cry(0.12429283)(17, 18))
p.inst(cry(2.8442313)(18, 19))
p.inst(cry(0.024324999)(19, 20))
p.inst(cry(2.5805562)(20, 21))
p.inst(cry(0.49181053)(21, 22))
p.inst(cry(2.6239174)(22, 23))
p.inst(cry(1.7186105)(23, 24))
p.inst(cry(1.1339442)(24, 25))
p.inst(cry(0.6997755)(25, 26))
p.inst(cry(2.7077537)(26, 27))
p.inst(cry(1.6998757)(27, 28))
p.inst(cry(2.8097633)(28, 29))
p.inst(cry(2.0122601)(29, 30))
p.inst(cry(1.4769665)(30, 31))
p.inst(cry(0.4708685)(31, 32))
p.inst(cry(1.1177248)(32, 33))
p.inst(cry(2.5795655)(33, 34))
p.inst(cry(2.0749242)(34, 35))
p.inst(cry(1.6637939)(35, 36))
p.inst(cry(1.4180156)(36, 37))
p.inst(cry(2.5930842)(37, 38))
p.inst(cry(0.73025192)(38, 39))
p.inst(cry(0.61919549)(39, 40))
p.inst(cry(0.73034698)(40, 41))
p.inst(cry(2.597838)(41, 42))
p.inst(cry(1.7501836)(42, 43))
p.inst(cry(1.6737697)(43, 44))
p.inst(cry(0.47146326)(44, 45))
p.inst(cry(2.4595592)(45, 46))
p.inst(cry(0.4482117)(46, 47))
p.inst(cry(2.411788)(47, 48))
p.inst(cry(0.97557779)(48, 49))
p.inst(cry(1.761207)(49, 50))
p.inst(cry(1.9691849)(50, 51))
p.inst(cry(2.0245146)(51, 52))
p.inst(cry(2.6161353)(52, 53))
p.inst(cry(0.54634541)(53, 54))
p.inst(cry(1.1284264)(54, 55))
p.inst(cry(0.83604874)(55, 56))
p.inst(cry(2.1446191)(56, 57))
p.inst(cry(0.84978625)(57, 58))
p.inst(cry(0.30715612)(58, 59))
p.inst(cry(1.4328469)(59, 60))
p.inst(cry(1.9490898)(60, 61))
p.inst(cry(1.8116318)(61, 62))
p.inst(cry(1.8721769)(62, 0))
p.inst(RY(0.35965973, 0))
p.inst(RY(0.38003495, 1))
p.inst(RY(0.69579373, 2))
p.inst(RY(0.16702692, 3))
p.inst(RY(1.6607568, 4))
p.inst(RY(2.1020467, 5))
p.inst(RY(0.39339595, 6))
p.inst(RY(1.876635, 7))
p.inst(RY(2.4181459, 8))
p.inst(RY(0.42319777, 9))
p.inst(RY(2.016403, 10))
p.inst(RY(1.0679158, 11))
p.inst(RY(1.5072171, 12))
p.inst(RY(2.0194111, 13))
p.inst(RY(0.54985471, 14))
p.inst(RY(0.1715665, 15))
p.inst(RY(0.18405918, 16))
p.inst(RY(2.1497943, 17))
p.inst(RY(1.2146313, 18))
p.inst(RY(2.8947558, 19))
p.inst(RY(1.511691, 20))
p.inst(RY(1.8642038, 21))
p.inst(RY(1.7663092, 22))
p.inst(RY(0.076630155, 23))
p.inst(RY(2.9729927, 24))
p.inst(RY(0.36082221, 25))
p.inst(RY(1.0905034, 26))
p.inst(RY(3.1003625, 27))
p.inst(RY(0.35281544, 28))
p.inst(RY(1.748736, 29))
p.inst(RY(2.3193467, 30))
p.inst(RY(1.5377879, 31))
p.inst(RY(2.8659435, 32))
p.inst(RY(0.85878643, 33))
p.inst(RY(2.9616183, 34))
p.inst(RY(0.59916694, 35))
p.inst(RY(0.069644191, 36))
p.inst(RY(1.3337993, 37))
p.inst(RY(2.8845157, 38))
p.inst(RY(0.3091706, 39))
p.inst(RY(0.90860304, 40))
p.inst(RY(1.2515663, 41))
p.inst(RY(1.5605697, 42))
p.inst(RY(0.5953197, 43))
p.inst(RY(2.7736695, 44))
p.inst(RY(1.3199265, 45))
p.inst(RY(2.8096173, 46))
p.inst(RY(2.1546802, 47))
p.inst(RY(0.60966724, 48))
p.inst(RY(0.80714692, 49))
p.inst(RY(0.51412719, 50))
p.inst(RY(3.0814414, 51))
p.inst(RY(2.361776, 52))
p.inst(RY(0.46195414, 53))
p.inst(RY(2.5507982, 54))
p.inst(RY(1.7822511, 55))
p.inst(RY(0.37952315, 56))
p.inst(RY(0.8937051, 57))
p.inst(RY(2.5278878, 58))
p.inst(RY(3.033688, 59))
p.inst(RY(0.47869371, 60))
p.inst(RY(1.3568123, 61))
p.inst(RY(2.3025363, 62))
p.inst(cry(0.60276212)(0, 63))
p.inst(cry(0.031952137)(1, 63))
p.inst(cry(0.80726803)(2, 63))
p.inst(cry(0.31441703)(3, 63))
p.inst(cry(0.72084251)(4, 63))
p.inst(cry(2.6430159)(5, 63))
p.inst(cry(0.89404107)(6, 63))
p.inst(cry(0.14336353)(7, 63))
p.inst(cry(0.99187407)(8, 63))
p.inst(cry(0.38541469)(9, 63))
p.inst(cry(0.4134218)(10, 63))
p.inst(cry(2.8859058)(11, 63))
p.inst(cry(0.037644896)(12, 63))
p.inst(cry(0.96211604)(13, 63))
p.inst(cry(1.6842244)(14, 63))
p.inst(cry(3.1335434)(15, 63))
p.inst(cry(1.5536116)(16, 63))
p.inst(cry(2.1854575)(17, 63))
p.inst(cry(1.3854439)(18, 63))
p.inst(cry(0.32626162)(19, 63))
p.inst(cry(3.0452031)(20, 63))
p.inst(cry(2.6795527)(21, 63))
p.inst(cry(1.903709)(22, 63))
p.inst(cry(1.7560585)(23, 63))
p.inst(cry(2.4705931)(24, 63))
p.inst(cry(1.8348133)(25, 63))
p.inst(cry(3.0475385)(26, 63))
p.inst(cry(1.9390985)(27, 63))
p.inst(cry(2.952084)(28, 63))
p.inst(cry(1.5824889)(29, 63))
p.inst(cry(0.92973927)(30, 63))
p.inst(cry(1.1674296)(31, 63))
p.inst(cry(1.6343981)(32, 63))
p.inst(cry(2.0064581)(33, 63))
p.inst(cry(2.9268151)(34, 63))
p.inst(cry(2.6913729)(35, 63))
p.inst(cry(1.2275004)(36, 63))
p.inst(cry(0.58030795)(37, 63))
p.inst(cry(2.8170309)(38, 63))
p.inst(cry(0.13196883)(39, 63))
p.inst(cry(2.0418761)(40, 63))
p.inst(cry(0.13500489)(41, 63))
p.inst(cry(3.0382802)(42, 63))
p.inst(cry(2.4262267)(43, 63))
p.inst(cry(2.1101919)(44, 63))
p.inst(cry(2.396578)(45, 63))
p.inst(cry(0.08372829)(46, 63))
p.inst(cry(2.1090253)(47, 63))
p.inst(cry(0.97617451)(48, 63))
p.inst(cry(0.60711323)(49, 63))
p.inst(cry(1.4335057)(50, 63))
p.inst(cry(1.1184391)(51, 63))
p.inst(cry(0.61455238)(52, 63))
p.inst(cry(2.6458484)(53, 63))
p.inst(cry(2.4542073)(54, 63))
p.inst(cry(1.9447294)(55, 63))
p.inst(cry(2.0988103)(56, 63))
p.inst(cry(0.79717437)(57, 63))
p.inst(cry(0.25536321)(58, 63))
p.inst(cry(0.54233124)(59, 63))
p.inst(cry(2.5669638)(60, 63))
p.inst(cry(0.21301233)(61, 63))
p.inst(cry(0.75410329)(62, 63))
p.inst(cry(3.1280824)(0, 64))
p.inst(cry(2.234929)(1, 64))
p.inst(cry(2.5400493)(2, 64))
p.inst(cry(2.7112482)(3, 64))
p.inst(cry(2.0886847)(4, 64))
p.inst(cry(0.52573658)(5, 64))
p.inst(cry(1.9473388)(6, 64))
p.inst(cry(3.0150274)(7, 64))
p.inst(cry(1.2747853)(8, 64))
p.inst(cry(1.4109571)(9, 64))
p.inst(cry(0.81397386)(10, 64))
p.inst(cry(2.6670384)(11, 64))
p.inst(cry(0.4960203)(12, 64))
p.inst(cry(0.36719313)(13, 64))
p.inst(cry(1.6894988)(14, 64))
p.inst(cry(0.10896617)(15, 64))
p.inst(cry(3.0361802)(16, 64))
p.inst(cry(3.0513193)(17, 64))
p.inst(cry(2.615299)(18, 64))
p.inst(cry(3.0536031)(19, 64))
p.inst(cry(1.7617744)(20, 64))
p.inst(cry(2.8857283)(21, 64))
p.inst(cry(2.4470791)(22, 64))
p.inst(cry(1.5203119)(23, 64))
p.inst(cry(1.6344555)(24, 64))
p.inst(cry(1.5132717)(25, 64))
p.inst(cry(0.67913692)(26, 64))
p.inst(cry(1.6360888)(27, 64))
p.inst(cry(1.0670201)(28, 64))
p.inst(cry(2.3808362)(29, 64))
p.inst(cry(2.6987861)(30, 64))
p.inst(cry(0.8303841)(31, 64))
p.inst(cry(0.032803702)(32, 64))
p.inst(cry(2.8611543)(33, 64))
p.inst(cry(2.7171465)(34, 64))
p.inst(cry(2.522022)(35, 64))
p.inst(cry(1.7711146)(36, 64))
p.inst(cry(2.2481068)(37, 64))
p.inst(cry(1.8445371)(38, 64))
p.inst(cry(3.1273563)(39, 64))
p.inst(cry(1.9817018)(40, 64))
p.inst(cry(1.0471318)(41, 64))
p.inst(cry(1.8604724)(42, 64))
p.inst(cry(2.9028209)(43, 64))
p.inst(cry(2.868638)(44, 64))
p.inst(cry(1.3107323)(45, 64))
p.inst(cry(2.163047)(46, 64))
p.inst(cry(0.41007117)(47, 64))
p.inst(cry(1.7663524)(48, 64))
p.inst(cry(1.4742595)(49, 64))
p.inst(cry(0.34237083)(50, 64))
p.inst(cry(2.6535898)(51, 64))
p.inst(cry(2.7055591)(52, 64))
p.inst(cry(0.61247446)(53, 64))
p.inst(cry(1.9488862)(54, 64))
p.inst(cry(2.4605862)(55, 64))
p.inst(cry(0.93333545)(56, 64))
p.inst(cry(2.3022041)(57, 64))
p.inst(cry(0.75512413)(58, 64))
p.inst(cry(2.3617485)(59, 64))
p.inst(cry(1.7423897)(60, 64))
p.inst(cry(0.57114644)(61, 64))
p.inst(cry(0.53395675)(62, 64))
p.inst(MEASURE(63, ro[0]))
p.inst(MEASURE(64, ro[1]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('65q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

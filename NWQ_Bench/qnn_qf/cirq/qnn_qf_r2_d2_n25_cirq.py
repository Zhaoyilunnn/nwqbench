import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(25)]

circuit = cirq.Circuit(
    cirq.ry(2.4046372)(q[0]),
    cirq.ry(2.3336143)(q[1]),
    cirq.ry(0.72133708)(q[2]),
    cirq.ry(1.2300238)(q[3]),
    cirq.ry(0.10197243)(q[4]),
    cirq.ry(0.69592388)(q[5]),
    cirq.ry(1.3613843)(q[6]),
    cirq.ry(0.5556097)(q[7]),
    cirq.ry(1.4779006)(q[8]),
    cirq.ry(0.50657227)(q[9]),
    cirq.ry(2.9520682)(q[10]),
    cirq.ry(1.3080473)(q[11]),
    cirq.ry(2.8924044)(q[12]),
    cirq.ry(2.4984378)(q[13]),
    cirq.ry(2.9348787)(q[14]),
    cirq.ry(3.0971339)(q[15]),
    cirq.ry(2.921169)(q[16]),
    cirq.ry(1.1886529)(q[17]),
    cirq.ry(2.6757282)(q[18]),
    cirq.ry(2.338456)(q[19]),
    cirq.ry(2.0531018)(q[20]),
    cirq.ry(2.9369249)(q[21]),
    cirq.ry(1.6146981)(q[22]),
    cirq.ry(1.1414484).controlled().on(q[0], q[1]),
    cirq.ry(1.3104948).controlled().on(q[1], q[2]),
    cirq.ry(2.9488226).controlled().on(q[2], q[3]),
    cirq.ry(2.3282812).controlled().on(q[3], q[4]),
    cirq.ry(1.8701555).controlled().on(q[4], q[5]),
    cirq.ry(0.16767714).controlled().on(q[5], q[6]),
    cirq.ry(1.2373367).controlled().on(q[6], q[7]),
    cirq.ry(2.674611).controlled().on(q[7], q[8]),
    cirq.ry(1.5038571).controlled().on(q[8], q[9]),
    cirq.ry(1.8698485).controlled().on(q[9], q[10]),
    cirq.ry(0.294313).controlled().on(q[10], q[11]),
    cirq.ry(0.8994402).controlled().on(q[11], q[12]),
    cirq.ry(1.752392).controlled().on(q[12], q[13]),
    cirq.ry(1.7175125).controlled().on(q[13], q[14]),
    cirq.ry(0.37698405).controlled().on(q[14], q[15]),
    cirq.ry(0.96841912).controlled().on(q[15], q[16]),
    cirq.ry(3.0982528).controlled().on(q[16], q[17]),
    cirq.ry(1.2282107).controlled().on(q[17], q[18]),
    cirq.ry(0.80083453).controlled().on(q[18], q[19]),
    cirq.ry(2.3188841).controlled().on(q[19], q[20]),
    cirq.ry(2.5995155).controlled().on(q[20], q[21]),
    cirq.ry(0.93857984).controlled().on(q[21], q[22]),
    cirq.ry(0.63822073).controlled().on(q[22], q[0]),
    cirq.ry(1.9413184)(q[0]),
    cirq.ry(1.2085058)(q[1]),
    cirq.ry(0.7701523)(q[2]),
    cirq.ry(3.0569623)(q[3]),
    cirq.ry(2.4862034)(q[4]),
    cirq.ry(1.3241212)(q[5]),
    cirq.ry(0.52798856)(q[6]),
    cirq.ry(2.5582703)(q[7]),
    cirq.ry(1.0876095)(q[8]),
    cirq.ry(0.2310176)(q[9]),
    cirq.ry(1.0148172)(q[10]),
    cirq.ry(1.7166428)(q[11]),
    cirq.ry(1.0521398)(q[12]),
    cirq.ry(2.239007)(q[13]),
    cirq.ry(0.64819717)(q[14]),
    cirq.ry(2.0142363)(q[15]),
    cirq.ry(2.9262324)(q[16]),
    cirq.ry(0.0054313038)(q[17]),
    cirq.ry(1.7623353)(q[18]),
    cirq.ry(0.87994577)(q[19]),
    cirq.ry(0.78226646)(q[20]),
    cirq.ry(2.0612786)(q[21]),
    cirq.ry(0.84047059)(q[22]),
    cirq.ry(1.34973).controlled().on(q[0], q[1]),
    cirq.ry(0.97470663).controlled().on(q[1], q[2]),
    cirq.ry(0.025435813).controlled().on(q[2], q[3]),
    cirq.ry(2.9278685).controlled().on(q[3], q[4]),
    cirq.ry(2.3737549).controlled().on(q[4], q[5]),
    cirq.ry(2.8485333).controlled().on(q[5], q[6]),
    cirq.ry(2.1689026).controlled().on(q[6], q[7]),
    cirq.ry(2.2029461).controlled().on(q[7], q[8]),
    cirq.ry(1.0586872).controlled().on(q[8], q[9]),
    cirq.ry(1.6016692).controlled().on(q[9], q[10]),
    cirq.ry(2.5923506).controlled().on(q[10], q[11]),
    cirq.ry(2.358091).controlled().on(q[11], q[12]),
    cirq.ry(1.0014829).controlled().on(q[12], q[13]),
    cirq.ry(2.679315).controlled().on(q[13], q[14]),
    cirq.ry(1.782026).controlled().on(q[14], q[15]),
    cirq.ry(1.0299718).controlled().on(q[15], q[16]),
    cirq.ry(3.0017512).controlled().on(q[16], q[17]),
    cirq.ry(0.11425213).controlled().on(q[17], q[18]),
    cirq.ry(1.0524761).controlled().on(q[18], q[19]),
    cirq.ry(2.9116021).controlled().on(q[19], q[20]),
    cirq.ry(2.0787959).controlled().on(q[20], q[21]),
    cirq.ry(0.38858815).controlled().on(q[21], q[22]),
    cirq.ry(1.2246489).controlled().on(q[22], q[0]),
    cirq.ry(0.062132702)(q[0]),
    cirq.ry(2.0324349)(q[1]),
    cirq.ry(0.2411408)(q[2]),
    cirq.ry(0.3218655)(q[3]),
    cirq.ry(2.3034366)(q[4]),
    cirq.ry(2.1618027)(q[5]),
    cirq.ry(2.4662505)(q[6]),
    cirq.ry(0.10813863)(q[7]),
    cirq.ry(0.78527373)(q[8]),
    cirq.ry(1.1999737)(q[9]),
    cirq.ry(1.537061)(q[10]),
    cirq.ry(0.3983319)(q[11]),
    cirq.ry(1.9941611)(q[12]),
    cirq.ry(0.51317647)(q[13]),
    cirq.ry(0.10166123)(q[14]),
    cirq.ry(1.8670245)(q[15]),
    cirq.ry(0.0072601447)(q[16]),
    cirq.ry(2.7808594)(q[17]),
    cirq.ry(1.7465951)(q[18]),
    cirq.ry(0.15020818)(q[19]),
    cirq.ry(0.17539502)(q[20]),
    cirq.ry(0.1654123)(q[21]),
    cirq.ry(0.035401541)(q[22]),
    cirq.ry(2.243115).controlled().on(q[0], q[23]),
    cirq.ry(1.7246459).controlled().on(q[1], q[23]),
    cirq.ry(2.3173242).controlled().on(q[2], q[23]),
    cirq.ry(1.7832024).controlled().on(q[3], q[23]),
    cirq.ry(1.4016966).controlled().on(q[4], q[23]),
    cirq.ry(0.55701435).controlled().on(q[5], q[23]),
    cirq.ry(1.1949274).controlled().on(q[6], q[23]),
    cirq.ry(0.92853556).controlled().on(q[7], q[23]),
    cirq.ry(2.0343624).controlled().on(q[8], q[23]),
    cirq.ry(2.1080536).controlled().on(q[9], q[23]),
    cirq.ry(1.434495).controlled().on(q[10], q[23]),
    cirq.ry(2.2557125).controlled().on(q[11], q[23]),
    cirq.ry(2.8785988).controlled().on(q[12], q[23]),
    cirq.ry(0.12036396).controlled().on(q[13], q[23]),
    cirq.ry(0.21366093).controlled().on(q[14], q[23]),
    cirq.ry(2.5115313).controlled().on(q[15], q[23]),
    cirq.ry(0.61849089).controlled().on(q[16], q[23]),
    cirq.ry(1.1318183).controlled().on(q[17], q[23]),
    cirq.ry(1.1052579).controlled().on(q[18], q[23]),
    cirq.ry(2.83834).controlled().on(q[19], q[23]),
    cirq.ry(1.1548658).controlled().on(q[20], q[23]),
    cirq.ry(1.4192155).controlled().on(q[21], q[23]),
    cirq.ry(2.4928367).controlled().on(q[22], q[23]),
    cirq.ry(1.1986511).controlled().on(q[0], q[24]),
    cirq.ry(2.244777).controlled().on(q[1], q[24]),
    cirq.ry(1.5451018).controlled().on(q[2], q[24]),
    cirq.ry(2.5612201).controlled().on(q[3], q[24]),
    cirq.ry(0.58222979).controlled().on(q[4], q[24]),
    cirq.ry(2.7587097).controlled().on(q[5], q[24]),
    cirq.ry(2.3223639).controlled().on(q[6], q[24]),
    cirq.ry(1.7464534).controlled().on(q[7], q[24]),
    cirq.ry(1.0925269).controlled().on(q[8], q[24]),
    cirq.ry(1.4426669).controlled().on(q[9], q[24]),
    cirq.ry(0.26513699).controlled().on(q[10], q[24]),
    cirq.ry(0.8721534).controlled().on(q[11], q[24]),
    cirq.ry(2.7416068).controlled().on(q[12], q[24]),
    cirq.ry(2.4328144).controlled().on(q[13], q[24]),
    cirq.ry(1.3445639).controlled().on(q[14], q[24]),
    cirq.ry(1.9438733).controlled().on(q[15], q[24]),
    cirq.ry(2.5758755).controlled().on(q[16], q[24]),
    cirq.ry(0.5227285).controlled().on(q[17], q[24]),
    cirq.ry(1.09593).controlled().on(q[18], q[24]),
    cirq.ry(1.4953231).controlled().on(q[19], q[24]),
    cirq.ry(0.85781967).controlled().on(q[20], q[24]),
    cirq.ry(0.039022339).controlled().on(q[21], q[24]),
    cirq.ry(0.11357496).controlled().on(q[22], q[24]),
    cirq.measure(q[23], key='c0'),
    cirq.measure(q[24], key='c1')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['c0', 'c1']))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
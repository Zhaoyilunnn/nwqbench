import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(15)]

circuit = cirq.Circuit(
    cirq.ry(1.7977745)(q[0]),
    cirq.ry(2.4290782)(q[1]),
    cirq.ry(2.0518248)(q[2]),
    cirq.ry(1.8828395)(q[3]),
    cirq.ry(2.6444115)(q[4]),
    cirq.ry(2.9523479)(q[5]),
    cirq.ry(2.7122252)(q[6]),
    cirq.ry(1.3092064)(q[7]),
    cirq.ry(2.5455586)(q[8]),
    cirq.ry(1.1707559)(q[9]),
    cirq.ry(0.73521457)(q[10]),
    cirq.ry(1.0956246)(q[11]),
    cirq.ry(1.6620362)(q[12]),
    cirq.ry(2.2936072).controlled().on(q[0], q[1]),
    cirq.ry(2.4366259).controlled().on(q[1], q[2]),
    cirq.ry(1.3873553).controlled().on(q[2], q[3]),
    cirq.ry(1.5755903).controlled().on(q[3], q[4]),
    cirq.ry(2.8188762).controlled().on(q[4], q[5]),
    cirq.ry(0.44547731).controlled().on(q[5], q[6]),
    cirq.ry(2.7036384).controlled().on(q[6], q[7]),
    cirq.ry(0.95798642).controlled().on(q[7], q[8]),
    cirq.ry(1.0212333).controlled().on(q[8], q[9]),
    cirq.ry(1.2326703).controlled().on(q[9], q[10]),
    cirq.ry(1.0304913).controlled().on(q[10], q[11]),
    cirq.ry(2.7941224).controlled().on(q[11], q[12]),
    cirq.ry(1.3519228).controlled().on(q[12], q[0]),
    cirq.ry(2.6966784)(q[0]),
    cirq.ry(1.0185554)(q[1]),
    cirq.ry(0.2490335)(q[2]),
    cirq.ry(0.27822903)(q[3]),
    cirq.ry(0.67767603)(q[4]),
    cirq.ry(1.170178)(q[5]),
    cirq.ry(1.6017061)(q[6]),
    cirq.ry(1.1324313)(q[7]),
    cirq.ry(2.4205829)(q[8]),
    cirq.ry(1.0348663)(q[9]),
    cirq.ry(1.1960244)(q[10]),
    cirq.ry(0.17937507)(q[11]),
    cirq.ry(3.0740486)(q[12]),
    cirq.ry(2.8986654).controlled().on(q[0], q[1]),
    cirq.ry(1.466542).controlled().on(q[1], q[2]),
    cirq.ry(1.4942799).controlled().on(q[2], q[3]),
    cirq.ry(1.1746099).controlled().on(q[3], q[4]),
    cirq.ry(1.7224761).controlled().on(q[4], q[5]),
    cirq.ry(1.4907356).controlled().on(q[5], q[6]),
    cirq.ry(2.4893668).controlled().on(q[6], q[7]),
    cirq.ry(1.3426198).controlled().on(q[7], q[8]),
    cirq.ry(2.0298046).controlled().on(q[8], q[9]),
    cirq.ry(0.31647779).controlled().on(q[9], q[10]),
    cirq.ry(1.8223344).controlled().on(q[10], q[11]),
    cirq.ry(2.5603944).controlled().on(q[11], q[12]),
    cirq.ry(1.3949801).controlled().on(q[12], q[0]),
    cirq.ry(0.092043951)(q[0]),
    cirq.ry(0.32876019)(q[1]),
    cirq.ry(3.0915138)(q[2]),
    cirq.ry(2.6452213)(q[3]),
    cirq.ry(3.1193449)(q[4]),
    cirq.ry(0.7492682)(q[5]),
    cirq.ry(1.9111307)(q[6]),
    cirq.ry(0.33431689)(q[7]),
    cirq.ry(2.934947)(q[8]),
    cirq.ry(2.5044793)(q[9]),
    cirq.ry(1.5396555)(q[10]),
    cirq.ry(1.1956838)(q[11]),
    cirq.ry(0.42721248)(q[12]),
    cirq.ry(0.55220528).controlled().on(q[0], q[13]),
    cirq.ry(2.879998).controlled().on(q[1], q[13]),
    cirq.ry(2.7494499).controlled().on(q[2], q[13]),
    cirq.ry(0.085577304).controlled().on(q[3], q[13]),
    cirq.ry(1.4899562).controlled().on(q[4], q[13]),
    cirq.ry(2.6948186).controlled().on(q[5], q[13]),
    cirq.ry(2.0293363).controlled().on(q[6], q[13]),
    cirq.ry(2.9635696).controlled().on(q[7], q[13]),
    cirq.ry(2.0392029).controlled().on(q[8], q[13]),
    cirq.ry(0.47816264).controlled().on(q[9], q[13]),
    cirq.ry(2.5668759).controlled().on(q[10], q[13]),
    cirq.ry(0.18281766).controlled().on(q[11], q[13]),
    cirq.ry(1.8175045).controlled().on(q[12], q[13]),
    cirq.ry(3.1017869).controlled().on(q[0], q[14]),
    cirq.ry(0.15811296).controlled().on(q[1], q[14]),
    cirq.ry(1.3312993).controlled().on(q[2], q[14]),
    cirq.ry(2.1821697).controlled().on(q[3], q[14]),
    cirq.ry(1.0340898).controlled().on(q[4], q[14]),
    cirq.ry(2.5211007).controlled().on(q[5], q[14]),
    cirq.ry(0.06668857).controlled().on(q[6], q[14]),
    cirq.ry(2.1189792).controlled().on(q[7], q[14]),
    cirq.ry(2.1782705).controlled().on(q[8], q[14]),
    cirq.ry(0.84003651).controlled().on(q[9], q[14]),
    cirq.ry(0.86549387).controlled().on(q[10], q[14]),
    cirq.ry(2.0566554).controlled().on(q[11], q[14]),
    cirq.ry(0.28477526).controlled().on(q[12], q[14]),
    cirq.measure(q[13], key='c0'),
    cirq.measure(q[14], key='c1')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['c0', 'c1']))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
from pyquil import Program, get_qc
from pyquil.gates import H, MEASURE, CNOT, X
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=25)

p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(H(5))
p.inst(H(6))
p.inst(H(7))
p.inst(H(8))
p.inst(H(9))
p.inst(H(10))
p.inst(H(11))
p.inst(H(12))
p.inst(H(13))
p.inst(H(14))
p.inst(H(15))
p.inst(H(16))
p.inst(H(17))
p.inst(H(18))
p.inst(H(19))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(X(24))
p.inst(H(0))
p.inst(H(24))
p.inst(CNOT(1, 24))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(CNOT(5, 24))
p.inst(H(5))
p.inst(CNOT(6, 24))
p.inst(H(6))
p.inst(H(7))
p.inst(H(8))
p.inst(H(9))
p.inst(H(10))
p.inst(CNOT(11, 24))
p.inst(H(11))
p.inst(H(12))
p.inst(CNOT(13, 24))
p.inst(H(13))
p.inst(CNOT(14, 24))
p.inst(H(14))
p.inst(CNOT(15, 24))
p.inst(H(15))
p.inst(CNOT(16, 24))
p.inst(H(16))
p.inst(CNOT(17, 24))
p.inst(H(17))
p.inst(CNOT(18, 24))
p.inst(H(18))
p.inst(H(19))
p.inst(CNOT(20, 24))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(MEASURE(0, ro[0]))
p.inst(MEASURE(1, ro[1]))
p.inst(MEASURE(2, ro[2]))
p.inst(MEASURE(3, ro[3]))
p.inst(MEASURE(4, ro[4]))
p.inst(MEASURE(5, ro[5]))
p.inst(MEASURE(6, ro[6]))
p.inst(MEASURE(7, ro[7]))
p.inst(MEASURE(8, ro[8]))
p.inst(MEASURE(9, ro[9]))
p.inst(MEASURE(10, ro[10]))
p.inst(MEASURE(11, ro[11]))
p.inst(MEASURE(12, ro[12]))
p.inst(MEASURE(13, ro[13]))
p.inst(MEASURE(14, ro[14]))
p.inst(MEASURE(15, ro[15]))
p.inst(MEASURE(16, ro[16]))
p.inst(MEASURE(17, ro[17]))
p.inst(MEASURE(18, ro[18]))
p.inst(MEASURE(19, ro[19]))
p.inst(MEASURE(20, ro[20]))
p.inst(MEASURE(21, ro[21]))
p.inst(MEASURE(22, ro[22]))
p.inst(MEASURE(23, ro[23]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('25q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

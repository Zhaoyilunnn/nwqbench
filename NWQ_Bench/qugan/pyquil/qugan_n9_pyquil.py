from pyquil import Program, get_qc
from pyquil.gates import CCNOT, RX, CNOT, RZ, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_phi = Parameter('phi')
p_lambda = Parameter('lambda')
p_theta = Parameter('theta')

u2_array = np.array([[1/quil_sqrt(2),-quil_exp(1j*p_lambda)*1/quil_sqrt(2)],[quil_exp(1j*p_phi)*1/quil_sqrt(2),quil_exp(1j*p_lambda+1j*p_phi)*1/quil_sqrt(2)]])
u3_array = np.array([[quil_cos(p_theta/2),-quil_exp(1j*p_lambda)*quil_sin(p_theta/2)],[quil_exp(1j*p_phi)*quil_sin(p_theta/2),quil_exp(1j*p_lambda+1j*p_phi)*quil_cos(p_theta/2)]])


u2_defgate = DefGate('u2', u2_array, [p_phi, p_lambda])
u2 = u2_defgate.get_constructor()
u3_defgate = DefGate('u3', u3_array, [p_theta, p_phi, p_lambda])
u3 = u3_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=4)

p.inst(u2_defgate)
p.inst(u3_defgate)

p.inst(u2(0, np.pi)(0))
# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".p.inst(RX(np.pi / 2, 1))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 8))
p.inst(CNOT(1, 2))
p.inst(CNOT(5, 6))
p.inst(RZ(1.724517, 2))
p.inst(RZ(0.91774004, 6))
p.inst(CNOT(1, 2))
p.inst(CNOT(5, 6))
p.inst(RX(-np.pi / 2, 1))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 6))
p.inst(u3(1.4866231, 0, 0)(2))
p.inst(u3(1.0598507, 0, 0)(6))
p.inst(CNOT(1, 2))
p.inst(CNOT(5, 6))
p.inst(u3(-1.4866231, 0, 0)(2))
p.inst(u3(-1.0598507, 0, 0)(6))
p.inst(CNOT(1, 2))
p.inst(CNOT(5, 6))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 6))
p.inst(CNOT(2, 3))
p.inst(CNOT(6, 7))
p.inst(RZ(3.0154695, 3))
p.inst(RZ(0.29075759, 7))
p.inst(CNOT(2, 3))
p.inst(CNOT(6, 7))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 7))
p.inst(u3(1.0993885, 0, 0)(3))
p.inst(u3(0.97412798, 0, 0)(7))
p.inst(CNOT(2, 3))
p.inst(CNOT(6, 7))
p.inst(u3(-1.0993885, 0, 0)(3))
p.inst(u3(-0.97412798, 0, 0)(7))
p.inst(CNOT(2, 3))
p.inst(CNOT(6, 7))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 7))
p.inst(CNOT(3, 4))
p.inst(CNOT(7, 8))
p.inst(RZ(2.8434888, 4))
p.inst(RZ(2.3712238, 8))
p.inst(CNOT(3, 4))
p.inst(CNOT(7, 8))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 8))
p.inst(u3(0.26495473, 0, 0)(4))
p.inst(u3(1.0987503, 0, 0)(8))
p.inst(CNOT(3, 4))
p.inst(CNOT(7, 8))
p.inst(u3(-0.26495473, 0, 0)(4))
p.inst(u3(-1.0987503, 0, 0)(8))
p.inst(CNOT(3, 4))
p.inst(CNOT(7, 8))
p.inst(CNOT(5, 1))
p.inst(CCNOT(0, 1, 5))
p.inst(CNOT(5, 1))
p.inst(CNOT(6, 2))
p.inst(CCNOT(0, 2, 6))
p.inst(CNOT(6, 2))
p.inst(CNOT(7, 3))
p.inst(CCNOT(0, 3, 7))
p.inst(CNOT(7, 3))
p.inst(CNOT(8, 4))
p.inst(CCNOT(0, 4, 8))
p.inst(u2(0, np.pi)(0))
p.inst(CNOT(8, 4))
p.inst(MEASURE(5, ro[0]))
p.inst(MEASURE(6, ro[1]))
p.inst(MEASURE(7, ro[2]))
p.inst(MEASURE(8, ro[3]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('9q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

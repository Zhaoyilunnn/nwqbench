from pyquil import Program, get_qc
from pyquil.gates import CCNOT, RX, CNOT, RZ, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_phi = Parameter('phi')
p_lambda = Parameter('lambda')
p_theta = Parameter('theta')

u2_array = np.array([[1/quil_sqrt(2),-quil_exp(1j*p_lambda)*1/quil_sqrt(2)],[quil_exp(1j*p_phi)*1/quil_sqrt(2),quil_exp(1j*p_lambda+1j*p_phi)*1/quil_sqrt(2)]])
u3_array = np.array([[quil_cos(p_theta/2),-quil_exp(1j*p_lambda)*quil_sin(p_theta/2)],[quil_exp(1j*p_phi)*quil_sin(p_theta/2),quil_exp(1j*p_lambda+1j*p_phi)*quil_cos(p_theta/2)]])


u2_defgate = DefGate('u2', u2_array, [p_phi, p_lambda])
u2 = u2_defgate.get_constructor()
u3_defgate = DefGate('u3', u3_array, [p_theta, p_phi, p_lambda])
u3 = u3_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=15)

p.inst(u2_defgate)
p.inst(u3_defgate)

p.inst(u2(0, np.pi)(0))
# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".p.inst(RX(np.pi / 2, 1))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 8))
p.inst(RX(np.pi / 2, 9))
p.inst(RX(np.pi / 2, 10))
p.inst(RX(np.pi / 2, 11))
p.inst(RX(np.pi / 2, 12))
p.inst(RX(np.pi / 2, 13))
p.inst(RX(np.pi / 2, 14))
p.inst(RX(np.pi / 2, 15))
p.inst(RX(np.pi / 2, 16))
p.inst(RX(np.pi / 2, 17))
p.inst(RX(np.pi / 2, 18))
p.inst(RX(np.pi / 2, 19))
p.inst(RX(np.pi / 2, 20))
p.inst(RX(np.pi / 2, 21))
p.inst(RX(np.pi / 2, 22))
p.inst(RX(np.pi / 2, 23))
p.inst(RX(np.pi / 2, 24))
p.inst(RX(np.pi / 2, 25))
p.inst(RX(np.pi / 2, 26))
p.inst(RX(np.pi / 2, 27))
p.inst(RX(np.pi / 2, 28))
p.inst(RX(np.pi / 2, 29))
p.inst(RX(np.pi / 2, 30))
p.inst(CNOT(1, 2))
p.inst(CNOT(16, 17))
p.inst(RZ(1.2977392, 2))
p.inst(RZ(2.2214731, 17))
p.inst(CNOT(1, 2))
p.inst(CNOT(16, 17))
p.inst(RX(-np.pi / 2, 1))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 16))
p.inst(RX(-np.pi / 2, 17))
p.inst(u3(1.4432896, 0, 0)(2))
p.inst(u3(1.4239223, 0, 0)(17))
p.inst(CNOT(1, 2))
p.inst(CNOT(16, 17))
p.inst(u3(-1.4432896, 0, 0)(2))
p.inst(u3(-1.4239223, 0, 0)(17))
p.inst(CNOT(1, 2))
p.inst(CNOT(16, 17))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 17))
p.inst(CNOT(2, 3))
p.inst(CNOT(17, 18))
p.inst(RZ(2.8649402, 3))
p.inst(RZ(0.81255174, 18))
p.inst(CNOT(2, 3))
p.inst(CNOT(17, 18))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 17))
p.inst(RX(-np.pi / 2, 18))
p.inst(u3(0.60753935, 0, 0)(3))
p.inst(u3(0.42437439, 0, 0)(18))
p.inst(CNOT(2, 3))
p.inst(CNOT(17, 18))
p.inst(u3(-0.60753935, 0, 0)(3))
p.inst(u3(-0.42437439, 0, 0)(18))
p.inst(CNOT(2, 3))
p.inst(CNOT(17, 18))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 18))
p.inst(CNOT(3, 4))
p.inst(CNOT(18, 19))
p.inst(RZ(1.2287728, 4))
p.inst(RZ(1.5930278, 19))
p.inst(CNOT(3, 4))
p.inst(CNOT(18, 19))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 18))
p.inst(RX(-np.pi / 2, 19))
p.inst(u3(0.89724501, 0, 0)(4))
p.inst(u3(0.39638608, 0, 0)(19))
p.inst(CNOT(3, 4))
p.inst(CNOT(18, 19))
p.inst(u3(-0.89724501, 0, 0)(4))
p.inst(u3(-0.39638608, 0, 0)(19))
p.inst(CNOT(3, 4))
p.inst(CNOT(18, 19))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 19))
p.inst(CNOT(4, 5))
p.inst(CNOT(19, 20))
p.inst(RZ(0.88703672, 5))
p.inst(RZ(2.6889413, 20))
p.inst(CNOT(4, 5))
p.inst(CNOT(19, 20))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 19))
p.inst(RX(-np.pi / 2, 20))
p.inst(u3(0.56500464, 0, 0)(5))
p.inst(u3(0.5119179, 0, 0)(20))
p.inst(CNOT(4, 5))
p.inst(CNOT(19, 20))
p.inst(u3(-0.56500464, 0, 0)(5))
p.inst(u3(-0.5119179, 0, 0)(20))
p.inst(CNOT(4, 5))
p.inst(CNOT(19, 20))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 20))
p.inst(CNOT(5, 6))
p.inst(CNOT(20, 21))
p.inst(RZ(1.1945889, 6))
p.inst(RZ(2.221667, 21))
p.inst(CNOT(5, 6))
p.inst(CNOT(20, 21))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 20))
p.inst(RX(-np.pi / 2, 21))
p.inst(u3(0.78663791, 0, 0)(6))
p.inst(u3(0.69135081, 0, 0)(21))
p.inst(CNOT(5, 6))
p.inst(CNOT(20, 21))
p.inst(u3(-0.78663791, 0, 0)(6))
p.inst(u3(-0.69135081, 0, 0)(21))
p.inst(CNOT(5, 6))
p.inst(CNOT(20, 21))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 21))
p.inst(CNOT(6, 7))
p.inst(CNOT(21, 22))
p.inst(RZ(0.98968875, 7))
p.inst(RZ(2.2607776, 22))
p.inst(CNOT(6, 7))
p.inst(CNOT(21, 22))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 21))
p.inst(RX(-np.pi / 2, 22))
p.inst(u3(1.3825416, 0, 0)(7))
p.inst(u3(0.67053226, 0, 0)(22))
p.inst(CNOT(6, 7))
p.inst(CNOT(21, 22))
p.inst(u3(-1.3825416, 0, 0)(7))
p.inst(u3(-0.67053226, 0, 0)(22))
p.inst(CNOT(6, 7))
p.inst(CNOT(21, 22))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 22))
p.inst(CNOT(7, 8))
p.inst(CNOT(22, 23))
p.inst(RZ(2.8925702, 8))
p.inst(RZ(0.70521178, 23))
p.inst(CNOT(7, 8))
p.inst(CNOT(22, 23))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 8))
p.inst(RX(-np.pi / 2, 22))
p.inst(RX(-np.pi / 2, 23))
p.inst(u3(1.5320829, 0, 0)(8))
p.inst(u3(1.2476792, 0, 0)(23))
p.inst(CNOT(7, 8))
p.inst(CNOT(22, 23))
p.inst(u3(-1.5320829, 0, 0)(8))
p.inst(u3(-1.2476792, 0, 0)(23))
p.inst(CNOT(7, 8))
p.inst(CNOT(22, 23))
p.inst(RX(np.pi / 2, 8))
p.inst(RX(np.pi / 2, 23))
p.inst(CNOT(8, 9))
p.inst(CNOT(23, 24))
p.inst(RZ(2.6101061, 9))
p.inst(RZ(0.44044227, 24))
p.inst(CNOT(8, 9))
p.inst(CNOT(23, 24))
p.inst(RX(-np.pi / 2, 8))
p.inst(RX(-np.pi / 2, 9))
p.inst(RX(-np.pi / 2, 23))
p.inst(RX(-np.pi / 2, 24))
p.inst(u3(0.67987172, 0, 0)(9))
p.inst(u3(0.57223555, 0, 0)(24))
p.inst(CNOT(8, 9))
p.inst(CNOT(23, 24))
p.inst(u3(-0.67987172, 0, 0)(9))
p.inst(u3(-0.57223555, 0, 0)(24))
p.inst(CNOT(8, 9))
p.inst(CNOT(23, 24))
p.inst(RX(np.pi / 2, 9))
p.inst(RX(np.pi / 2, 24))
p.inst(CNOT(9, 10))
p.inst(CNOT(24, 25))
p.inst(RZ(0.67584848, 10))
p.inst(RZ(2.4825481, 25))
p.inst(CNOT(9, 10))
p.inst(CNOT(24, 25))
p.inst(RX(-np.pi / 2, 9))
p.inst(RX(-np.pi / 2, 10))
p.inst(RX(-np.pi / 2, 24))
p.inst(RX(-np.pi / 2, 25))
p.inst(u3(0.30508649, 0, 0)(10))
p.inst(u3(0.087312936, 0, 0)(25))
p.inst(CNOT(9, 10))
p.inst(CNOT(24, 25))
p.inst(u3(-0.30508649, 0, 0)(10))
p.inst(u3(-0.087312936, 0, 0)(25))
p.inst(CNOT(9, 10))
p.inst(CNOT(24, 25))
p.inst(RX(np.pi / 2, 10))
p.inst(RX(np.pi / 2, 25))
p.inst(CNOT(10, 11))
p.inst(CNOT(25, 26))
p.inst(RZ(2.8535391, 11))
p.inst(RZ(0.022614947, 26))
p.inst(CNOT(10, 11))
p.inst(CNOT(25, 26))
p.inst(RX(-np.pi / 2, 10))
p.inst(RX(-np.pi / 2, 11))
p.inst(RX(-np.pi / 2, 25))
p.inst(RX(-np.pi / 2, 26))
p.inst(u3(1.1107695, 0, 0)(11))
p.inst(u3(1.1183785, 0, 0)(26))
p.inst(CNOT(10, 11))
p.inst(CNOT(25, 26))
p.inst(u3(-1.1107695, 0, 0)(11))
p.inst(u3(-1.1183785, 0, 0)(26))
p.inst(CNOT(10, 11))
p.inst(CNOT(25, 26))
p.inst(RX(np.pi / 2, 11))
p.inst(RX(np.pi / 2, 26))
p.inst(CNOT(11, 12))
p.inst(CNOT(26, 27))
p.inst(RZ(0.70415312, 12))
p.inst(RZ(2.2450724, 27))
p.inst(CNOT(11, 12))
p.inst(CNOT(26, 27))
p.inst(RX(-np.pi / 2, 11))
p.inst(RX(-np.pi / 2, 12))
p.inst(RX(-np.pi / 2, 26))
p.inst(RX(-np.pi / 2, 27))
p.inst(u3(0.031031735, 0, 0)(12))
p.inst(u3(1.3044612, 0, 0)(27))
p.inst(CNOT(11, 12))
p.inst(CNOT(26, 27))
p.inst(u3(-0.031031735, 0, 0)(12))
p.inst(u3(-1.3044612, 0, 0)(27))
p.inst(CNOT(11, 12))
p.inst(CNOT(26, 27))
p.inst(RX(np.pi / 2, 12))
p.inst(RX(np.pi / 2, 27))
p.inst(CNOT(12, 13))
p.inst(CNOT(27, 28))
p.inst(RZ(0.60245421, 13))
p.inst(RZ(3.0687889, 28))
p.inst(CNOT(12, 13))
p.inst(CNOT(27, 28))
p.inst(RX(-np.pi / 2, 12))
p.inst(RX(-np.pi / 2, 13))
p.inst(RX(-np.pi / 2, 27))
p.inst(RX(-np.pi / 2, 28))
p.inst(u3(0.14378759, 0, 0)(13))
p.inst(u3(0.3777522, 0, 0)(28))
p.inst(CNOT(12, 13))
p.inst(CNOT(27, 28))
p.inst(u3(-0.14378759, 0, 0)(13))
p.inst(u3(-0.3777522, 0, 0)(28))
p.inst(CNOT(12, 13))
p.inst(CNOT(27, 28))
p.inst(RX(np.pi / 2, 13))
p.inst(RX(np.pi / 2, 28))
p.inst(CNOT(13, 14))
p.inst(CNOT(28, 29))
p.inst(RZ(0.9650285, 14))
p.inst(RZ(1.039868, 29))
p.inst(CNOT(13, 14))
p.inst(CNOT(28, 29))
p.inst(RX(-np.pi / 2, 13))
p.inst(RX(-np.pi / 2, 14))
p.inst(RX(-np.pi / 2, 28))
p.inst(RX(-np.pi / 2, 29))
p.inst(u3(0.15877809, 0, 0)(14))
p.inst(u3(0.22709394, 0, 0)(29))
p.inst(CNOT(13, 14))
p.inst(CNOT(28, 29))
p.inst(u3(-0.15877809, 0, 0)(14))
p.inst(u3(-0.22709394, 0, 0)(29))
p.inst(CNOT(13, 14))
p.inst(CNOT(28, 29))
p.inst(RX(np.pi / 2, 14))
p.inst(RX(np.pi / 2, 29))
p.inst(CNOT(14, 15))
p.inst(CNOT(29, 30))
p.inst(RZ(1.8244342, 15))
p.inst(RZ(0.85073632, 30))
p.inst(CNOT(14, 15))
p.inst(CNOT(29, 30))
p.inst(RX(-np.pi / 2, 14))
p.inst(RX(-np.pi / 2, 15))
p.inst(RX(-np.pi / 2, 29))
p.inst(RX(-np.pi / 2, 30))
p.inst(u3(0.84721245, 0, 0)(15))
p.inst(u3(0.45886514, 0, 0)(30))
p.inst(CNOT(14, 15))
p.inst(CNOT(29, 30))
p.inst(u3(-0.84721245, 0, 0)(15))
p.inst(u3(-0.45886514, 0, 0)(30))
p.inst(CNOT(14, 15))
p.inst(CNOT(29, 30))
p.inst(CNOT(16, 1))
p.inst(CCNOT(0, 1, 16))
p.inst(CNOT(16, 1))
p.inst(CNOT(17, 2))
p.inst(CCNOT(0, 2, 17))
p.inst(CNOT(17, 2))
p.inst(CNOT(18, 3))
p.inst(CCNOT(0, 3, 18))
p.inst(CNOT(18, 3))
p.inst(CNOT(19, 4))
p.inst(CCNOT(0, 4, 19))
p.inst(CNOT(19, 4))
p.inst(CNOT(20, 5))
p.inst(CCNOT(0, 5, 20))
p.inst(CNOT(20, 5))
p.inst(CNOT(21, 6))
p.inst(CCNOT(0, 6, 21))
p.inst(CNOT(21, 6))
p.inst(CNOT(22, 7))
p.inst(CCNOT(0, 7, 22))
p.inst(CNOT(22, 7))
p.inst(CNOT(23, 8))
p.inst(CCNOT(0, 8, 23))
p.inst(CNOT(23, 8))
p.inst(CNOT(24, 9))
p.inst(CCNOT(0, 9, 24))
p.inst(CNOT(24, 9))
p.inst(CNOT(25, 10))
p.inst(CCNOT(0, 10, 25))
p.inst(CNOT(25, 10))
p.inst(CNOT(26, 11))
p.inst(CCNOT(0, 11, 26))
p.inst(CNOT(26, 11))
p.inst(CNOT(27, 12))
p.inst(CCNOT(0, 12, 27))
p.inst(CNOT(27, 12))
p.inst(CNOT(28, 13))
p.inst(CCNOT(0, 13, 28))
p.inst(CNOT(28, 13))
p.inst(CNOT(29, 14))
p.inst(CCNOT(0, 14, 29))
p.inst(CNOT(29, 14))
p.inst(CNOT(30, 15))
p.inst(CCNOT(0, 15, 30))
p.inst(u2(0, np.pi)(0))
p.inst(CNOT(30, 15))
p.inst(MEASURE(16, ro[0]))
p.inst(MEASURE(17, ro[1]))
p.inst(MEASURE(18, ro[2]))
p.inst(MEASURE(19, ro[3]))
p.inst(MEASURE(20, ro[4]))
p.inst(MEASURE(21, ro[5]))
p.inst(MEASURE(22, ro[6]))
p.inst(MEASURE(23, ro[7]))
p.inst(MEASURE(24, ro[8]))
p.inst(MEASURE(25, ro[9]))
p.inst(MEASURE(26, ro[10]))
p.inst(MEASURE(27, ro[11]))
p.inst(MEASURE(28, ro[12]))
p.inst(MEASURE(29, ro[13]))
p.inst(MEASURE(30, ro[14]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('31q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

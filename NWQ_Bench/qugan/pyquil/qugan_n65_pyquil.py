from pyquil import Program, get_qc
from pyquil.gates import CCNOT, RX, CNOT, RZ, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_phi = Parameter('phi')
p_lambda = Parameter('lambda')
p_theta = Parameter('theta')

u2_array = np.array([[1/quil_sqrt(2),-quil_exp(1j*p_lambda)*1/quil_sqrt(2)],[quil_exp(1j*p_phi)*1/quil_sqrt(2),quil_exp(1j*p_lambda+1j*p_phi)*1/quil_sqrt(2)]])
u3_array = np.array([[quil_cos(p_theta/2),-quil_exp(1j*p_lambda)*quil_sin(p_theta/2)],[quil_exp(1j*p_phi)*quil_sin(p_theta/2),quil_exp(1j*p_lambda+1j*p_phi)*quil_cos(p_theta/2)]])


u2_defgate = DefGate('u2', u2_array, [p_phi, p_lambda])
u2 = u2_defgate.get_constructor()
u3_defgate = DefGate('u3', u3_array, [p_theta, p_phi, p_lambda])
u3 = u3_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=32)

p.inst(u2_defgate)
p.inst(u3_defgate)

p.inst(u2(0, np.pi)(0))
# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".p.inst(RX(np.pi / 2, 1))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 8))
p.inst(RX(np.pi / 2, 9))
p.inst(RX(np.pi / 2, 10))
p.inst(RX(np.pi / 2, 11))
p.inst(RX(np.pi / 2, 12))
p.inst(RX(np.pi / 2, 13))
p.inst(RX(np.pi / 2, 14))
p.inst(RX(np.pi / 2, 15))
p.inst(RX(np.pi / 2, 16))
p.inst(RX(np.pi / 2, 17))
p.inst(RX(np.pi / 2, 18))
p.inst(RX(np.pi / 2, 19))
p.inst(RX(np.pi / 2, 20))
p.inst(RX(np.pi / 2, 21))
p.inst(RX(np.pi / 2, 22))
p.inst(RX(np.pi / 2, 23))
p.inst(RX(np.pi / 2, 24))
p.inst(RX(np.pi / 2, 25))
p.inst(RX(np.pi / 2, 26))
p.inst(RX(np.pi / 2, 27))
p.inst(RX(np.pi / 2, 28))
p.inst(RX(np.pi / 2, 29))
p.inst(RX(np.pi / 2, 30))
p.inst(RX(np.pi / 2, 31))
p.inst(RX(np.pi / 2, 32))
p.inst(RX(np.pi / 2, 33))
p.inst(RX(np.pi / 2, 34))
p.inst(RX(np.pi / 2, 35))
p.inst(RX(np.pi / 2, 36))
p.inst(RX(np.pi / 2, 37))
p.inst(RX(np.pi / 2, 38))
p.inst(RX(np.pi / 2, 39))
p.inst(RX(np.pi / 2, 40))
p.inst(RX(np.pi / 2, 41))
p.inst(RX(np.pi / 2, 42))
p.inst(RX(np.pi / 2, 43))
p.inst(RX(np.pi / 2, 44))
p.inst(RX(np.pi / 2, 45))
p.inst(RX(np.pi / 2, 46))
p.inst(RX(np.pi / 2, 47))
p.inst(RX(np.pi / 2, 48))
p.inst(RX(np.pi / 2, 49))
p.inst(RX(np.pi / 2, 50))
p.inst(RX(np.pi / 2, 51))
p.inst(RX(np.pi / 2, 52))
p.inst(RX(np.pi / 2, 53))
p.inst(RX(np.pi / 2, 54))
p.inst(RX(np.pi / 2, 55))
p.inst(RX(np.pi / 2, 56))
p.inst(RX(np.pi / 2, 57))
p.inst(RX(np.pi / 2, 58))
p.inst(RX(np.pi / 2, 59))
p.inst(RX(np.pi / 2, 60))
p.inst(RX(np.pi / 2, 61))
p.inst(RX(np.pi / 2, 62))
p.inst(RX(np.pi / 2, 63))
p.inst(RX(np.pi / 2, 64))
p.inst(CNOT(1, 2))
p.inst(CNOT(33, 34))
p.inst(RZ(2.1326225, 2))
p.inst(RZ(2.5992881, 34))
p.inst(CNOT(1, 2))
p.inst(CNOT(33, 34))
p.inst(RX(-np.pi / 2, 1))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 33))
p.inst(RX(-np.pi / 2, 34))
p.inst(u3(0.1238051, 0, 0)(2))
p.inst(u3(1.3204729, 0, 0)(34))
p.inst(CNOT(1, 2))
p.inst(CNOT(33, 34))
p.inst(u3(-0.1238051, 0, 0)(2))
p.inst(u3(-1.3204729, 0, 0)(34))
p.inst(CNOT(1, 2))
p.inst(CNOT(33, 34))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 34))
p.inst(CNOT(2, 3))
p.inst(CNOT(34, 35))
p.inst(RZ(0.60955675, 3))
p.inst(RZ(3.0840557, 35))
p.inst(CNOT(2, 3))
p.inst(CNOT(34, 35))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 34))
p.inst(RX(-np.pi / 2, 35))
p.inst(u3(0.073350091, 0, 0)(3))
p.inst(u3(0.56985898, 0, 0)(35))
p.inst(CNOT(2, 3))
p.inst(CNOT(34, 35))
p.inst(u3(-0.073350091, 0, 0)(3))
p.inst(u3(-0.56985898, 0, 0)(35))
p.inst(CNOT(2, 3))
p.inst(CNOT(34, 35))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 35))
p.inst(CNOT(3, 4))
p.inst(CNOT(35, 36))
p.inst(RZ(0.07095891, 4))
p.inst(RZ(2.1600561, 36))
p.inst(CNOT(3, 4))
p.inst(CNOT(35, 36))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 35))
p.inst(RX(-np.pi / 2, 36))
p.inst(u3(1.070064, 0, 0)(4))
p.inst(u3(0.64846351, 0, 0)(36))
p.inst(CNOT(3, 4))
p.inst(CNOT(35, 36))
p.inst(u3(-1.070064, 0, 0)(4))
p.inst(u3(-0.64846351, 0, 0)(36))
p.inst(CNOT(3, 4))
p.inst(CNOT(35, 36))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 36))
p.inst(CNOT(4, 5))
p.inst(CNOT(36, 37))
p.inst(RZ(1.9285273, 5))
p.inst(RZ(2.5527338, 37))
p.inst(CNOT(4, 5))
p.inst(CNOT(36, 37))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 36))
p.inst(RX(-np.pi / 2, 37))
p.inst(u3(1.3040954, 0, 0)(5))
p.inst(u3(0.81334021, 0, 0)(37))
p.inst(CNOT(4, 5))
p.inst(CNOT(36, 37))
p.inst(u3(-1.3040954, 0, 0)(5))
p.inst(u3(-0.81334021, 0, 0)(37))
p.inst(CNOT(4, 5))
p.inst(CNOT(36, 37))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 37))
p.inst(CNOT(5, 6))
p.inst(CNOT(37, 38))
p.inst(RZ(1.3094099, 6))
p.inst(RZ(1.5159622, 38))
p.inst(CNOT(5, 6))
p.inst(CNOT(37, 38))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 37))
p.inst(RX(-np.pi / 2, 38))
p.inst(u3(1.4618621, 0, 0)(6))
p.inst(u3(0.58187016, 0, 0)(38))
p.inst(CNOT(5, 6))
p.inst(CNOT(37, 38))
p.inst(u3(-1.4618621, 0, 0)(6))
p.inst(u3(-0.58187016, 0, 0)(38))
p.inst(CNOT(5, 6))
p.inst(CNOT(37, 38))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 38))
p.inst(CNOT(6, 7))
p.inst(CNOT(38, 39))
p.inst(RZ(1.2025341, 7))
p.inst(RZ(0.93954697, 39))
p.inst(CNOT(6, 7))
p.inst(CNOT(38, 39))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 38))
p.inst(RX(-np.pi / 2, 39))
p.inst(u3(1.5655627, 0, 0)(7))
p.inst(u3(1.0287651, 0, 0)(39))
p.inst(CNOT(6, 7))
p.inst(CNOT(38, 39))
p.inst(u3(-1.5655627, 0, 0)(7))
p.inst(u3(-1.0287651, 0, 0)(39))
p.inst(CNOT(6, 7))
p.inst(CNOT(38, 39))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 39))
p.inst(CNOT(7, 8))
p.inst(CNOT(39, 40))
p.inst(RZ(0.56055484, 8))
p.inst(RZ(1.2783898, 40))
p.inst(CNOT(7, 8))
p.inst(CNOT(39, 40))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 8))
p.inst(RX(-np.pi / 2, 39))
p.inst(RX(-np.pi / 2, 40))
p.inst(u3(0.2789862, 0, 0)(8))
p.inst(u3(0.1967155, 0, 0)(40))
p.inst(CNOT(7, 8))
p.inst(CNOT(39, 40))
p.inst(u3(-0.2789862, 0, 0)(8))
p.inst(u3(-0.1967155, 0, 0)(40))
p.inst(CNOT(7, 8))
p.inst(CNOT(39, 40))
p.inst(RX(np.pi / 2, 8))
p.inst(RX(np.pi / 2, 40))
p.inst(CNOT(8, 9))
p.inst(CNOT(40, 41))
p.inst(RZ(0.55424183, 9))
p.inst(RZ(2.4964547, 41))
p.inst(CNOT(8, 9))
p.inst(CNOT(40, 41))
p.inst(RX(-np.pi / 2, 8))
p.inst(RX(-np.pi / 2, 9))
p.inst(RX(-np.pi / 2, 40))
p.inst(RX(-np.pi / 2, 41))
p.inst(u3(1.3743, 0, 0)(9))
p.inst(u3(1.1285759, 0, 0)(41))
p.inst(CNOT(8, 9))
p.inst(CNOT(40, 41))
p.inst(u3(-1.3743, 0, 0)(9))
p.inst(u3(-1.1285759, 0, 0)(41))
p.inst(CNOT(8, 9))
p.inst(CNOT(40, 41))
p.inst(RX(np.pi / 2, 9))
p.inst(RX(np.pi / 2, 41))
p.inst(CNOT(9, 10))
p.inst(CNOT(41, 42))
p.inst(RZ(1.6434892, 10))
p.inst(RZ(1.5511031, 42))
p.inst(CNOT(9, 10))
p.inst(CNOT(41, 42))
p.inst(RX(-np.pi / 2, 9))
p.inst(RX(-np.pi / 2, 10))
p.inst(RX(-np.pi / 2, 41))
p.inst(RX(-np.pi / 2, 42))
p.inst(u3(1.2492124, 0, 0)(10))
p.inst(u3(0.89482599, 0, 0)(42))
p.inst(CNOT(9, 10))
p.inst(CNOT(41, 42))
p.inst(u3(-1.2492124, 0, 0)(10))
p.inst(u3(-0.89482599, 0, 0)(42))
p.inst(CNOT(9, 10))
p.inst(CNOT(41, 42))
p.inst(RX(np.pi / 2, 10))
p.inst(RX(np.pi / 2, 42))
p.inst(CNOT(10, 11))
p.inst(CNOT(42, 43))
p.inst(RZ(2.0672045, 11))
p.inst(RZ(1.0795082, 43))
p.inst(CNOT(10, 11))
p.inst(CNOT(42, 43))
p.inst(RX(-np.pi / 2, 10))
p.inst(RX(-np.pi / 2, 11))
p.inst(RX(-np.pi / 2, 42))
p.inst(RX(-np.pi / 2, 43))
p.inst(u3(0.34878789, 0, 0)(11))
p.inst(u3(1.0050012, 0, 0)(43))
p.inst(CNOT(10, 11))
p.inst(CNOT(42, 43))
p.inst(u3(-0.34878789, 0, 0)(11))
p.inst(u3(-1.0050012, 0, 0)(43))
p.inst(CNOT(10, 11))
p.inst(CNOT(42, 43))
p.inst(RX(np.pi / 2, 11))
p.inst(RX(np.pi / 2, 43))
p.inst(CNOT(11, 12))
p.inst(CNOT(43, 44))
p.inst(RZ(1.2355332, 12))
p.inst(RZ(2.2331017, 44))
p.inst(CNOT(11, 12))
p.inst(CNOT(43, 44))
p.inst(RX(-np.pi / 2, 11))
p.inst(RX(-np.pi / 2, 12))
p.inst(RX(-np.pi / 2, 43))
p.inst(RX(-np.pi / 2, 44))
p.inst(u3(1.2619787, 0, 0)(12))
p.inst(u3(0.2325188, 0, 0)(44))
p.inst(CNOT(11, 12))
p.inst(CNOT(43, 44))
p.inst(u3(-1.2619787, 0, 0)(12))
p.inst(u3(-0.2325188, 0, 0)(44))
p.inst(CNOT(11, 12))
p.inst(CNOT(43, 44))
p.inst(RX(np.pi / 2, 12))
p.inst(RX(np.pi / 2, 44))
p.inst(CNOT(12, 13))
p.inst(CNOT(44, 45))
p.inst(RZ(1.8357102, 13))
p.inst(RZ(2.9179752, 45))
p.inst(CNOT(12, 13))
p.inst(CNOT(44, 45))
p.inst(RX(-np.pi / 2, 12))
p.inst(RX(-np.pi / 2, 13))
p.inst(RX(-np.pi / 2, 44))
p.inst(RX(-np.pi / 2, 45))
p.inst(u3(1.0663474, 0, 0)(13))
p.inst(u3(0.8736573, 0, 0)(45))
p.inst(CNOT(12, 13))
p.inst(CNOT(44, 45))
p.inst(u3(-1.0663474, 0, 0)(13))
p.inst(u3(-0.8736573, 0, 0)(45))
p.inst(CNOT(12, 13))
p.inst(CNOT(44, 45))
p.inst(RX(np.pi / 2, 13))
p.inst(RX(np.pi / 2, 45))
p.inst(CNOT(13, 14))
p.inst(CNOT(45, 46))
p.inst(RZ(2.0101551, 14))
p.inst(RZ(1.9797768, 46))
p.inst(CNOT(13, 14))
p.inst(CNOT(45, 46))
p.inst(RX(-np.pi / 2, 13))
p.inst(RX(-np.pi / 2, 14))
p.inst(RX(-np.pi / 2, 45))
p.inst(RX(-np.pi / 2, 46))
p.inst(u3(0.02833167, 0, 0)(14))
p.inst(u3(0.92648115, 0, 0)(46))
p.inst(CNOT(13, 14))
p.inst(CNOT(45, 46))
p.inst(u3(-0.02833167, 0, 0)(14))
p.inst(u3(-0.92648115, 0, 0)(46))
p.inst(CNOT(13, 14))
p.inst(CNOT(45, 46))
p.inst(RX(np.pi / 2, 14))
p.inst(RX(np.pi / 2, 46))
p.inst(CNOT(14, 15))
p.inst(CNOT(46, 47))
p.inst(RZ(2.5928222, 15))
p.inst(RZ(2.0603188, 47))
p.inst(CNOT(14, 15))
p.inst(CNOT(46, 47))
p.inst(RX(-np.pi / 2, 14))
p.inst(RX(-np.pi / 2, 15))
p.inst(RX(-np.pi / 2, 46))
p.inst(RX(-np.pi / 2, 47))
p.inst(u3(1.3303132, 0, 0)(15))
p.inst(u3(0.24767259, 0, 0)(47))
p.inst(CNOT(14, 15))
p.inst(CNOT(46, 47))
p.inst(u3(-1.3303132, 0, 0)(15))
p.inst(u3(-0.24767259, 0, 0)(47))
p.inst(CNOT(14, 15))
p.inst(CNOT(46, 47))
p.inst(RX(np.pi / 2, 15))
p.inst(RX(np.pi / 2, 47))
p.inst(CNOT(15, 16))
p.inst(CNOT(47, 48))
p.inst(RZ(1.280053, 16))
p.inst(RZ(2.3201302, 48))
p.inst(CNOT(15, 16))
p.inst(CNOT(47, 48))
p.inst(RX(-np.pi / 2, 15))
p.inst(RX(-np.pi / 2, 16))
p.inst(RX(-np.pi / 2, 47))
p.inst(RX(-np.pi / 2, 48))
p.inst(u3(1.5226708, 0, 0)(16))
p.inst(u3(0.26555996, 0, 0)(48))
p.inst(CNOT(15, 16))
p.inst(CNOT(47, 48))
p.inst(u3(-1.5226708, 0, 0)(16))
p.inst(u3(-0.26555996, 0, 0)(48))
p.inst(CNOT(15, 16))
p.inst(CNOT(47, 48))
p.inst(RX(np.pi / 2, 16))
p.inst(RX(np.pi / 2, 48))
p.inst(CNOT(16, 17))
p.inst(CNOT(48, 49))
p.inst(RZ(2.3336259, 17))
p.inst(RZ(2.2480372, 49))
p.inst(CNOT(16, 17))
p.inst(CNOT(48, 49))
p.inst(RX(-np.pi / 2, 16))
p.inst(RX(-np.pi / 2, 17))
p.inst(RX(-np.pi / 2, 48))
p.inst(RX(-np.pi / 2, 49))
p.inst(u3(0.83796289, 0, 0)(17))
p.inst(u3(1.3917255, 0, 0)(49))
p.inst(CNOT(16, 17))
p.inst(CNOT(48, 49))
p.inst(u3(-0.83796289, 0, 0)(17))
p.inst(u3(-1.3917255, 0, 0)(49))
p.inst(CNOT(16, 17))
p.inst(CNOT(48, 49))
p.inst(RX(np.pi / 2, 17))
p.inst(RX(np.pi / 2, 49))
p.inst(CNOT(17, 18))
p.inst(CNOT(49, 50))
p.inst(RZ(1.5555978, 18))
p.inst(RZ(0.36410389, 50))
p.inst(CNOT(17, 18))
p.inst(CNOT(49, 50))
p.inst(RX(-np.pi / 2, 17))
p.inst(RX(-np.pi / 2, 18))
p.inst(RX(-np.pi / 2, 49))
p.inst(RX(-np.pi / 2, 50))
p.inst(u3(1.5067029, 0, 0)(18))
p.inst(u3(1.4631176, 0, 0)(50))
p.inst(CNOT(17, 18))
p.inst(CNOT(49, 50))
p.inst(u3(-1.5067029, 0, 0)(18))
p.inst(u3(-1.4631176, 0, 0)(50))
p.inst(CNOT(17, 18))
p.inst(CNOT(49, 50))
p.inst(RX(np.pi / 2, 18))
p.inst(RX(np.pi / 2, 50))
p.inst(CNOT(18, 19))
p.inst(CNOT(50, 51))
p.inst(RZ(2.0293988, 19))
p.inst(RZ(2.9267501, 51))
p.inst(CNOT(18, 19))
p.inst(CNOT(50, 51))
p.inst(RX(-np.pi / 2, 18))
p.inst(RX(-np.pi / 2, 19))
p.inst(RX(-np.pi / 2, 50))
p.inst(RX(-np.pi / 2, 51))
p.inst(u3(1.1411507, 0, 0)(19))
p.inst(u3(0.46225096, 0, 0)(51))
p.inst(CNOT(18, 19))
p.inst(CNOT(50, 51))
p.inst(u3(-1.1411507, 0, 0)(19))
p.inst(u3(-0.46225096, 0, 0)(51))
p.inst(CNOT(18, 19))
p.inst(CNOT(50, 51))
p.inst(RX(np.pi / 2, 19))
p.inst(RX(np.pi / 2, 51))
p.inst(CNOT(19, 20))
p.inst(CNOT(51, 52))
p.inst(RZ(3.0228648, 20))
p.inst(RZ(2.2840095, 52))
p.inst(CNOT(19, 20))
p.inst(CNOT(51, 52))
p.inst(RX(-np.pi / 2, 19))
p.inst(RX(-np.pi / 2, 20))
p.inst(RX(-np.pi / 2, 51))
p.inst(RX(-np.pi / 2, 52))
p.inst(u3(1.5538562, 0, 0)(20))
p.inst(u3(1.4028767, 0, 0)(52))
p.inst(CNOT(19, 20))
p.inst(CNOT(51, 52))
p.inst(u3(-1.5538562, 0, 0)(20))
p.inst(u3(-1.4028767, 0, 0)(52))
p.inst(CNOT(19, 20))
p.inst(CNOT(51, 52))
p.inst(RX(np.pi / 2, 20))
p.inst(RX(np.pi / 2, 52))
p.inst(CNOT(20, 21))
p.inst(CNOT(52, 53))
p.inst(RZ(2.8828939, 21))
p.inst(RZ(0.12864404, 53))
p.inst(CNOT(20, 21))
p.inst(CNOT(52, 53))
p.inst(RX(-np.pi / 2, 20))
p.inst(RX(-np.pi / 2, 21))
p.inst(RX(-np.pi / 2, 52))
p.inst(RX(-np.pi / 2, 53))
p.inst(u3(0.42818033, 0, 0)(21))
p.inst(u3(1.2328002, 0, 0)(53))
p.inst(CNOT(20, 21))
p.inst(CNOT(52, 53))
p.inst(u3(-0.42818033, 0, 0)(21))
p.inst(u3(-1.2328002, 0, 0)(53))
p.inst(CNOT(20, 21))
p.inst(CNOT(52, 53))
p.inst(RX(np.pi / 2, 21))
p.inst(RX(np.pi / 2, 53))
p.inst(CNOT(21, 22))
p.inst(CNOT(53, 54))
p.inst(RZ(1.6567731, 22))
p.inst(RZ(0.28632795, 54))
p.inst(CNOT(21, 22))
p.inst(CNOT(53, 54))
p.inst(RX(-np.pi / 2, 21))
p.inst(RX(-np.pi / 2, 22))
p.inst(RX(-np.pi / 2, 53))
p.inst(RX(-np.pi / 2, 54))
p.inst(u3(0.8630194, 0, 0)(22))
p.inst(u3(0.61298445, 0, 0)(54))
p.inst(CNOT(21, 22))
p.inst(CNOT(53, 54))
p.inst(u3(-0.8630194, 0, 0)(22))
p.inst(u3(-0.61298445, 0, 0)(54))
p.inst(CNOT(21, 22))
p.inst(CNOT(53, 54))
p.inst(RX(np.pi / 2, 22))
p.inst(RX(np.pi / 2, 54))
p.inst(CNOT(22, 23))
p.inst(CNOT(54, 55))
p.inst(RZ(1.2531216, 23))
p.inst(RZ(1.5912115, 55))
p.inst(CNOT(22, 23))
p.inst(CNOT(54, 55))
p.inst(RX(-np.pi / 2, 22))
p.inst(RX(-np.pi / 2, 23))
p.inst(RX(-np.pi / 2, 54))
p.inst(RX(-np.pi / 2, 55))
p.inst(u3(0.20983154, 0, 0)(23))
p.inst(u3(0.72834728, 0, 0)(55))
p.inst(CNOT(22, 23))
p.inst(CNOT(54, 55))
p.inst(u3(-0.20983154, 0, 0)(23))
p.inst(u3(-0.72834728, 0, 0)(55))
p.inst(CNOT(22, 23))
p.inst(CNOT(54, 55))
p.inst(RX(np.pi / 2, 23))
p.inst(RX(np.pi / 2, 55))
p.inst(CNOT(23, 24))
p.inst(CNOT(55, 56))
p.inst(RZ(0.44813225, 24))
p.inst(RZ(3.0019755, 56))
p.inst(CNOT(23, 24))
p.inst(CNOT(55, 56))
p.inst(RX(-np.pi / 2, 23))
p.inst(RX(-np.pi / 2, 24))
p.inst(RX(-np.pi / 2, 55))
p.inst(RX(-np.pi / 2, 56))
p.inst(u3(0.18094276, 0, 0)(24))
p.inst(u3(0.68235224, 0, 0)(56))
p.inst(CNOT(23, 24))
p.inst(CNOT(55, 56))
p.inst(u3(-0.18094276, 0, 0)(24))
p.inst(u3(-0.68235224, 0, 0)(56))
p.inst(CNOT(23, 24))
p.inst(CNOT(55, 56))
p.inst(RX(np.pi / 2, 24))
p.inst(RX(np.pi / 2, 56))
p.inst(CNOT(24, 25))
p.inst(CNOT(56, 57))
p.inst(RZ(0.082978172, 25))
p.inst(RZ(3.1057103, 57))
p.inst(CNOT(24, 25))
p.inst(CNOT(56, 57))
p.inst(RX(-np.pi / 2, 24))
p.inst(RX(-np.pi / 2, 25))
p.inst(RX(-np.pi / 2, 56))
p.inst(RX(-np.pi / 2, 57))
p.inst(u3(0.28335569, 0, 0)(25))
p.inst(u3(0.40333772, 0, 0)(57))
p.inst(CNOT(24, 25))
p.inst(CNOT(56, 57))
p.inst(u3(-0.28335569, 0, 0)(25))
p.inst(u3(-0.40333772, 0, 0)(57))
p.inst(CNOT(24, 25))
p.inst(CNOT(56, 57))
p.inst(RX(np.pi / 2, 25))
p.inst(RX(np.pi / 2, 57))
p.inst(CNOT(25, 26))
p.inst(CNOT(57, 58))
p.inst(RZ(0.334982, 26))
p.inst(RZ(0.89718806, 58))
p.inst(CNOT(25, 26))
p.inst(CNOT(57, 58))
p.inst(RX(-np.pi / 2, 25))
p.inst(RX(-np.pi / 2, 26))
p.inst(RX(-np.pi / 2, 57))
p.inst(RX(-np.pi / 2, 58))
p.inst(u3(1.3337842, 0, 0)(26))
p.inst(u3(0.91118801, 0, 0)(58))
p.inst(CNOT(25, 26))
p.inst(CNOT(57, 58))
p.inst(u3(-1.3337842, 0, 0)(26))
p.inst(u3(-0.91118801, 0, 0)(58))
p.inst(CNOT(25, 26))
p.inst(CNOT(57, 58))
p.inst(RX(np.pi / 2, 26))
p.inst(RX(np.pi / 2, 58))
p.inst(CNOT(26, 27))
p.inst(CNOT(58, 59))
p.inst(RZ(2.7250419, 27))
p.inst(RZ(2.3662803, 59))
p.inst(CNOT(26, 27))
p.inst(CNOT(58, 59))
p.inst(RX(-np.pi / 2, 26))
p.inst(RX(-np.pi / 2, 27))
p.inst(RX(-np.pi / 2, 58))
p.inst(RX(-np.pi / 2, 59))
p.inst(u3(0.90962314, 0, 0)(27))
p.inst(u3(0.28325665, 0, 0)(59))
p.inst(CNOT(26, 27))
p.inst(CNOT(58, 59))
p.inst(u3(-0.90962314, 0, 0)(27))
p.inst(u3(-0.28325665, 0, 0)(59))
p.inst(CNOT(26, 27))
p.inst(CNOT(58, 59))
p.inst(RX(np.pi / 2, 27))
p.inst(RX(np.pi / 2, 59))
p.inst(CNOT(27, 28))
p.inst(CNOT(59, 60))
p.inst(RZ(0.3558715, 28))
p.inst(RZ(0.90177392, 60))
p.inst(CNOT(27, 28))
p.inst(CNOT(59, 60))
p.inst(RX(-np.pi / 2, 27))
p.inst(RX(-np.pi / 2, 28))
p.inst(RX(-np.pi / 2, 59))
p.inst(RX(-np.pi / 2, 60))
p.inst(u3(0.71850312, 0, 0)(28))
p.inst(u3(0.69136665, 0, 0)(60))
p.inst(CNOT(27, 28))
p.inst(CNOT(59, 60))
p.inst(u3(-0.71850312, 0, 0)(28))
p.inst(u3(-0.69136665, 0, 0)(60))
p.inst(CNOT(27, 28))
p.inst(CNOT(59, 60))
p.inst(RX(np.pi / 2, 28))
p.inst(RX(np.pi / 2, 60))
p.inst(CNOT(28, 29))
p.inst(CNOT(60, 61))
p.inst(RZ(0.31873261, 29))
p.inst(RZ(0.14310722, 61))
p.inst(CNOT(28, 29))
p.inst(CNOT(60, 61))
p.inst(RX(-np.pi / 2, 28))
p.inst(RX(-np.pi / 2, 29))
p.inst(RX(-np.pi / 2, 60))
p.inst(RX(-np.pi / 2, 61))
p.inst(u3(1.4297983, 0, 0)(29))
p.inst(u3(1.1465328, 0, 0)(61))
p.inst(CNOT(28, 29))
p.inst(CNOT(60, 61))
p.inst(u3(-1.4297983, 0, 0)(29))
p.inst(u3(-1.1465328, 0, 0)(61))
p.inst(CNOT(28, 29))
p.inst(CNOT(60, 61))
p.inst(RX(np.pi / 2, 29))
p.inst(RX(np.pi / 2, 61))
p.inst(CNOT(29, 30))
p.inst(CNOT(61, 62))
p.inst(RZ(0.35919566, 30))
p.inst(RZ(3.0513977, 62))
p.inst(CNOT(29, 30))
p.inst(CNOT(61, 62))
p.inst(RX(-np.pi / 2, 29))
p.inst(RX(-np.pi / 2, 30))
p.inst(RX(-np.pi / 2, 61))
p.inst(RX(-np.pi / 2, 62))
p.inst(u3(1.2279201, 0, 0)(30))
p.inst(u3(0.40787137, 0, 0)(62))
p.inst(CNOT(29, 30))
p.inst(CNOT(61, 62))
p.inst(u3(-1.2279201, 0, 0)(30))
p.inst(u3(-0.40787137, 0, 0)(62))
p.inst(CNOT(29, 30))
p.inst(CNOT(61, 62))
p.inst(RX(np.pi / 2, 30))
p.inst(RX(np.pi / 2, 62))
p.inst(CNOT(30, 31))
p.inst(CNOT(62, 63))
p.inst(RZ(0.44237778, 31))
p.inst(RZ(1.4919719, 63))
p.inst(CNOT(30, 31))
p.inst(CNOT(62, 63))
p.inst(RX(-np.pi / 2, 30))
p.inst(RX(-np.pi / 2, 31))
p.inst(RX(-np.pi / 2, 62))
p.inst(RX(-np.pi / 2, 63))
p.inst(u3(1.5152635, 0, 0)(31))
p.inst(u3(1.0966814, 0, 0)(63))
p.inst(CNOT(30, 31))
p.inst(CNOT(62, 63))
p.inst(u3(-1.5152635, 0, 0)(31))
p.inst(u3(-1.0966814, 0, 0)(63))
p.inst(CNOT(30, 31))
p.inst(CNOT(62, 63))
p.inst(RX(np.pi / 2, 31))
p.inst(RX(np.pi / 2, 63))
p.inst(CNOT(31, 32))
p.inst(CNOT(63, 64))
p.inst(RZ(2.9660002, 32))
p.inst(RZ(0.90310564, 64))
p.inst(CNOT(31, 32))
p.inst(CNOT(63, 64))
p.inst(RX(-np.pi / 2, 31))
p.inst(RX(-np.pi / 2, 32))
p.inst(RX(-np.pi / 2, 63))
p.inst(RX(-np.pi / 2, 64))
p.inst(u3(0.8690639, 0, 0)(32))
p.inst(u3(1.3558226, 0, 0)(64))
p.inst(CNOT(31, 32))
p.inst(CNOT(63, 64))
p.inst(u3(-0.8690639, 0, 0)(32))
p.inst(u3(-1.3558226, 0, 0)(64))
p.inst(CNOT(31, 32))
p.inst(CNOT(63, 64))
p.inst(CNOT(33, 1))
p.inst(CCNOT(0, 1, 33))
p.inst(CNOT(33, 1))
p.inst(CNOT(34, 2))
p.inst(CCNOT(0, 2, 34))
p.inst(CNOT(34, 2))
p.inst(CNOT(35, 3))
p.inst(CCNOT(0, 3, 35))
p.inst(CNOT(35, 3))
p.inst(CNOT(36, 4))
p.inst(CCNOT(0, 4, 36))
p.inst(CNOT(36, 4))
p.inst(CNOT(37, 5))
p.inst(CCNOT(0, 5, 37))
p.inst(CNOT(37, 5))
p.inst(CNOT(38, 6))
p.inst(CCNOT(0, 6, 38))
p.inst(CNOT(38, 6))
p.inst(CNOT(39, 7))
p.inst(CCNOT(0, 7, 39))
p.inst(CNOT(39, 7))
p.inst(CNOT(40, 8))
p.inst(CCNOT(0, 8, 40))
p.inst(CNOT(40, 8))
p.inst(CNOT(41, 9))
p.inst(CCNOT(0, 9, 41))
p.inst(CNOT(41, 9))
p.inst(CNOT(42, 10))
p.inst(CCNOT(0, 10, 42))
p.inst(CNOT(42, 10))
p.inst(CNOT(43, 11))
p.inst(CCNOT(0, 11, 43))
p.inst(CNOT(43, 11))
p.inst(CNOT(44, 12))
p.inst(CCNOT(0, 12, 44))
p.inst(CNOT(44, 12))
p.inst(CNOT(45, 13))
p.inst(CCNOT(0, 13, 45))
p.inst(CNOT(45, 13))
p.inst(CNOT(46, 14))
p.inst(CCNOT(0, 14, 46))
p.inst(CNOT(46, 14))
p.inst(CNOT(47, 15))
p.inst(CCNOT(0, 15, 47))
p.inst(CNOT(47, 15))
p.inst(CNOT(48, 16))
p.inst(CCNOT(0, 16, 48))
p.inst(CNOT(48, 16))
p.inst(CNOT(49, 17))
p.inst(CCNOT(0, 17, 49))
p.inst(CNOT(49, 17))
p.inst(CNOT(50, 18))
p.inst(CCNOT(0, 18, 50))
p.inst(CNOT(50, 18))
p.inst(CNOT(51, 19))
p.inst(CCNOT(0, 19, 51))
p.inst(CNOT(51, 19))
p.inst(CNOT(52, 20))
p.inst(CCNOT(0, 20, 52))
p.inst(CNOT(52, 20))
p.inst(CNOT(53, 21))
p.inst(CCNOT(0, 21, 53))
p.inst(CNOT(53, 21))
p.inst(CNOT(54, 22))
p.inst(CCNOT(0, 22, 54))
p.inst(CNOT(54, 22))
p.inst(CNOT(55, 23))
p.inst(CCNOT(0, 23, 55))
p.inst(CNOT(55, 23))
p.inst(CNOT(56, 24))
p.inst(CCNOT(0, 24, 56))
p.inst(CNOT(56, 24))
p.inst(CNOT(57, 25))
p.inst(CCNOT(0, 25, 57))
p.inst(CNOT(57, 25))
p.inst(CNOT(58, 26))
p.inst(CCNOT(0, 26, 58))
p.inst(CNOT(58, 26))
p.inst(CNOT(59, 27))
p.inst(CCNOT(0, 27, 59))
p.inst(CNOT(59, 27))
p.inst(CNOT(60, 28))
p.inst(CCNOT(0, 28, 60))
p.inst(CNOT(60, 28))
p.inst(CNOT(61, 29))
p.inst(CCNOT(0, 29, 61))
p.inst(CNOT(61, 29))
p.inst(CNOT(62, 30))
p.inst(CCNOT(0, 30, 62))
p.inst(CNOT(62, 30))
p.inst(CNOT(63, 31))
p.inst(CCNOT(0, 31, 63))
p.inst(CNOT(63, 31))
p.inst(CNOT(64, 32))
p.inst(CCNOT(0, 32, 64))
p.inst(u2(0, np.pi)(0))
p.inst(CNOT(64, 32))
p.inst(MEASURE(33, ro[0]))
p.inst(MEASURE(34, ro[1]))
p.inst(MEASURE(35, ro[2]))
p.inst(MEASURE(36, ro[3]))
p.inst(MEASURE(37, ro[4]))
p.inst(MEASURE(38, ro[5]))
p.inst(MEASURE(39, ro[6]))
p.inst(MEASURE(40, ro[7]))
p.inst(MEASURE(41, ro[8]))
p.inst(MEASURE(42, ro[9]))
p.inst(MEASURE(43, ro[10]))
p.inst(MEASURE(44, ro[11]))
p.inst(MEASURE(45, ro[12]))
p.inst(MEASURE(46, ro[13]))
p.inst(MEASURE(47, ro[14]))
p.inst(MEASURE(48, ro[15]))
p.inst(MEASURE(49, ro[16]))
p.inst(MEASURE(50, ro[17]))
p.inst(MEASURE(51, ro[18]))
p.inst(MEASURE(52, ro[19]))
p.inst(MEASURE(53, ro[20]))
p.inst(MEASURE(54, ro[21]))
p.inst(MEASURE(55, ro[22]))
p.inst(MEASURE(56, ro[23]))
p.inst(MEASURE(57, ro[24]))
p.inst(MEASURE(58, ro[25]))
p.inst(MEASURE(59, ro[26]))
p.inst(MEASURE(60, ro[27]))
p.inst(MEASURE(61, ro[28]))
p.inst(MEASURE(62, ro[29]))
p.inst(MEASURE(63, ro[30]))
p.inst(MEASURE(64, ro[31]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('65q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

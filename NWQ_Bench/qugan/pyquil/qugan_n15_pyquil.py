from pyquil import Program, get_qc
from pyquil.gates import CCNOT, RX, CNOT, RZ, MEASURE
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_phi = Parameter('phi')
p_lambda = Parameter('lambda')
p_theta = Parameter('theta')

u2_array = np.array([[1/quil_sqrt(2),-quil_exp(1j*p_lambda)*1/quil_sqrt(2)],[quil_exp(1j*p_phi)*1/quil_sqrt(2),quil_exp(1j*p_lambda+1j*p_phi)*1/quil_sqrt(2)]])
u3_array = np.array([[quil_cos(p_theta/2),-quil_exp(1j*p_lambda)*quil_sin(p_theta/2)],[quil_exp(1j*p_phi)*quil_sin(p_theta/2),quil_exp(1j*p_lambda+1j*p_phi)*quil_cos(p_theta/2)]])


u2_defgate = DefGate('u2', u2_array, [p_phi, p_lambda])
u2 = u2_defgate.get_constructor()
u3_defgate = DefGate('u3', u3_array, [p_theta, p_phi, p_lambda])
u3 = u3_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=7)

p.inst(u2_defgate)
p.inst(u3_defgate)

p.inst(u2(0, np.pi)(0))
# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".# Export to pyquil WARNING: unknown gate "r".p.inst(RX(np.pi / 2, 1))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 7))
p.inst(RX(np.pi / 2, 8))
p.inst(RX(np.pi / 2, 9))
p.inst(RX(np.pi / 2, 10))
p.inst(RX(np.pi / 2, 11))
p.inst(RX(np.pi / 2, 12))
p.inst(RX(np.pi / 2, 13))
p.inst(RX(np.pi / 2, 14))
p.inst(CNOT(1, 2))
p.inst(CNOT(8, 9))
p.inst(RZ(1.2664125, 2))
p.inst(RZ(2.5810673, 9))
p.inst(CNOT(1, 2))
p.inst(CNOT(8, 9))
p.inst(RX(-np.pi / 2, 1))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 8))
p.inst(RX(-np.pi / 2, 9))
p.inst(u3(1.4487767, 0, 0)(2))
p.inst(u3(1.4950504, 0, 0)(9))
p.inst(CNOT(1, 2))
p.inst(CNOT(8, 9))
p.inst(u3(-1.4487767, 0, 0)(2))
p.inst(u3(-1.4950504, 0, 0)(9))
p.inst(CNOT(1, 2))
p.inst(CNOT(8, 9))
p.inst(RX(np.pi / 2, 2))
p.inst(RX(np.pi / 2, 9))
p.inst(CNOT(2, 3))
p.inst(CNOT(9, 10))
p.inst(RZ(0.74055553, 3))
p.inst(RZ(3.1218766, 10))
p.inst(CNOT(2, 3))
p.inst(CNOT(9, 10))
p.inst(RX(-np.pi / 2, 2))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 9))
p.inst(RX(-np.pi / 2, 10))
p.inst(u3(1.1646899, 0, 0)(3))
p.inst(u3(0.50052913, 0, 0)(10))
p.inst(CNOT(2, 3))
p.inst(CNOT(9, 10))
p.inst(u3(-1.1646899, 0, 0)(3))
p.inst(u3(-0.50052913, 0, 0)(10))
p.inst(CNOT(2, 3))
p.inst(CNOT(9, 10))
p.inst(RX(np.pi / 2, 3))
p.inst(RX(np.pi / 2, 10))
p.inst(CNOT(3, 4))
p.inst(CNOT(10, 11))
p.inst(RZ(2.3559741, 4))
p.inst(RZ(2.1470863, 11))
p.inst(CNOT(3, 4))
p.inst(CNOT(10, 11))
p.inst(RX(-np.pi / 2, 3))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 10))
p.inst(RX(-np.pi / 2, 11))
p.inst(u3(1.4174572, 0, 0)(4))
p.inst(u3(1.4210772, 0, 0)(11))
p.inst(CNOT(3, 4))
p.inst(CNOT(10, 11))
p.inst(u3(-1.4174572, 0, 0)(4))
p.inst(u3(-1.4210772, 0, 0)(11))
p.inst(CNOT(3, 4))
p.inst(CNOT(10, 11))
p.inst(RX(np.pi / 2, 4))
p.inst(RX(np.pi / 2, 11))
p.inst(CNOT(4, 5))
p.inst(CNOT(11, 12))
p.inst(RZ(1.5874395, 5))
p.inst(RZ(1.0572746, 12))
p.inst(CNOT(4, 5))
p.inst(CNOT(11, 12))
p.inst(RX(-np.pi / 2, 4))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 11))
p.inst(RX(-np.pi / 2, 12))
p.inst(u3(1.0930352, 0, 0)(5))
p.inst(u3(0.84439209, 0, 0)(12))
p.inst(CNOT(4, 5))
p.inst(CNOT(11, 12))
p.inst(u3(-1.0930352, 0, 0)(5))
p.inst(u3(-0.84439209, 0, 0)(12))
p.inst(CNOT(4, 5))
p.inst(CNOT(11, 12))
p.inst(RX(np.pi / 2, 5))
p.inst(RX(np.pi / 2, 12))
p.inst(CNOT(5, 6))
p.inst(CNOT(12, 13))
p.inst(RZ(3.1129243, 6))
p.inst(RZ(2.7825006, 13))
p.inst(CNOT(5, 6))
p.inst(CNOT(12, 13))
p.inst(RX(-np.pi / 2, 5))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 12))
p.inst(RX(-np.pi / 2, 13))
p.inst(u3(1.2005866, 0, 0)(6))
p.inst(u3(0.23144456, 0, 0)(13))
p.inst(CNOT(5, 6))
p.inst(CNOT(12, 13))
p.inst(u3(-1.2005866, 0, 0)(6))
p.inst(u3(-0.23144456, 0, 0)(13))
p.inst(CNOT(5, 6))
p.inst(CNOT(12, 13))
p.inst(RX(np.pi / 2, 6))
p.inst(RX(np.pi / 2, 13))
p.inst(CNOT(6, 7))
p.inst(CNOT(13, 14))
p.inst(RZ(1.1256105, 7))
p.inst(RZ(2.7848897, 14))
p.inst(CNOT(6, 7))
p.inst(CNOT(13, 14))
p.inst(RX(-np.pi / 2, 6))
p.inst(RX(-np.pi / 2, 7))
p.inst(RX(-np.pi / 2, 13))
p.inst(RX(-np.pi / 2, 14))
p.inst(u3(1.4893347, 0, 0)(7))
p.inst(u3(0.58159699, 0, 0)(14))
p.inst(CNOT(6, 7))
p.inst(CNOT(13, 14))
p.inst(u3(-1.4893347, 0, 0)(7))
p.inst(u3(-0.58159699, 0, 0)(14))
p.inst(CNOT(6, 7))
p.inst(CNOT(13, 14))
p.inst(CNOT(8, 1))
p.inst(CCNOT(0, 1, 8))
p.inst(CNOT(8, 1))
p.inst(CNOT(9, 2))
p.inst(CCNOT(0, 2, 9))
p.inst(CNOT(9, 2))
p.inst(CNOT(10, 3))
p.inst(CCNOT(0, 3, 10))
p.inst(CNOT(10, 3))
p.inst(CNOT(11, 4))
p.inst(CCNOT(0, 4, 11))
p.inst(CNOT(11, 4))
p.inst(CNOT(12, 5))
p.inst(CCNOT(0, 5, 12))
p.inst(CNOT(12, 5))
p.inst(CNOT(13, 6))
p.inst(CCNOT(0, 6, 13))
p.inst(CNOT(13, 6))
p.inst(CNOT(14, 7))
p.inst(CCNOT(0, 7, 14))
p.inst(u2(0, np.pi)(0))
p.inst(CNOT(14, 7))
p.inst(MEASURE(8, ro[0]))
p.inst(MEASURE(9, ro[1]))
p.inst(MEASURE(10, ro[2]))
p.inst(MEASURE(11, ro[3]))
p.inst(MEASURE(12, ro[4]))
p.inst(MEASURE(13, ro[5]))
p.inst(MEASURE(14, ro[6]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('15q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

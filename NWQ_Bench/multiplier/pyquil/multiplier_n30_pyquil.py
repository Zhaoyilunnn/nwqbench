from pyquil import Program, get_qc
from pyquil.gates import CCNOT, CNOT, MEASURE, X
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=6)

p.inst(X(20))
p.inst(X(24))
p.inst(X(26))
p.inst(CCNOT(24, 18, 1))
p.inst(CCNOT(1, 2, 3))
p.inst(CCNOT(24, 19, 4))
p.inst(CNOT(1, 2))
p.inst(CCNOT(4, 5, 6))
p.inst(CCNOT(24, 20, 7))
p.inst(CCNOT(0, 2, 3))
p.inst(CNOT(4, 5))
p.inst(CCNOT(7, 8, 9))
p.inst(CCNOT(24, 21, 10))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(7, 8))
p.inst(CCNOT(10, 11, 12))
p.inst(CCNOT(24, 22, 13))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(10, 11))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(24, 23, 16))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(13, 14))
p.inst(CNOT(16, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CNOT(6, 8))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CNOT(3, 5))
p.inst(CCNOT(0, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 2))
p.inst(CCNOT(24, 18, 1))
p.inst(CCNOT(1, 2, 3))
p.inst(CCNOT(24, 19, 4))
p.inst(CNOT(1, 2))
p.inst(CCNOT(24, 20, 7))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(24, 21, 10))
p.inst(CCNOT(24, 22, 13))
p.inst(CCNOT(24, 23, 16))
p.inst(CCNOT(25, 18, 4))
p.inst(CCNOT(4, 5, 6))
p.inst(CCNOT(25, 19, 7))
p.inst(CNOT(4, 5))
p.inst(CCNOT(7, 8, 9))
p.inst(CCNOT(25, 20, 10))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(7, 8))
p.inst(CCNOT(10, 11, 12))
p.inst(CCNOT(25, 21, 13))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(10, 11))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(25, 22, 16))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(13, 14))
p.inst(CNOT(16, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CNOT(6, 8))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CNOT(3, 5))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(25, 18, 4))
p.inst(CNOT(1, 2))
p.inst(CCNOT(4, 5, 6))
p.inst(CCNOT(25, 19, 7))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(4, 5))
p.inst(CCNOT(25, 20, 10))
p.inst(CNOT(1, 2))
p.inst(CCNOT(25, 21, 13))
p.inst(CNOT(0, 2))
p.inst(CCNOT(25, 22, 16))
p.inst(CCNOT(1, 2, 3))
p.inst(CCNOT(26, 18, 7))
p.inst(CNOT(1, 2))
p.inst(CCNOT(7, 8, 9))
p.inst(CCNOT(26, 19, 10))
p.inst(CCNOT(0, 2, 3))
p.inst(CNOT(7, 8))
p.inst(CCNOT(10, 11, 12))
p.inst(CCNOT(26, 20, 13))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(10, 11))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(26, 21, 16))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(13, 14))
p.inst(CNOT(16, 17))
p.inst(CCNOT(9, 11, 12))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CNOT(6, 8))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(26, 18, 7))
p.inst(CNOT(4, 5))
p.inst(CCNOT(7, 8, 9))
p.inst(CCNOT(26, 19, 10))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(7, 8))
p.inst(CCNOT(26, 20, 13))
p.inst(CNOT(4, 5))
p.inst(CCNOT(26, 21, 16))
p.inst(CNOT(3, 5))
p.inst(CCNOT(27, 18, 10))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(4, 5, 6))
p.inst(CCNOT(10, 11, 12))
p.inst(CCNOT(27, 19, 13))
p.inst(CNOT(1, 2))
p.inst(CNOT(4, 5))
p.inst(CNOT(10, 11))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(27, 20, 16))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(13, 14))
p.inst(CNOT(16, 17))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 2))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(6, 8, 9))
p.inst(CCNOT(9, 11, 12))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CCNOT(27, 18, 10))
p.inst(CNOT(7, 8))
p.inst(CCNOT(10, 11, 12))
p.inst(CCNOT(27, 19, 13))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(10, 11))
p.inst(CCNOT(27, 20, 16))
p.inst(CNOT(7, 8))
p.inst(CCNOT(28, 18, 13))
p.inst(CNOT(6, 8))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(28, 19, 16))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(13, 14))
p.inst(CNOT(16, 17))
p.inst(CNOT(4, 5))
p.inst(CNOT(7, 8))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CNOT(3, 5))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(1, 2))
p.inst(CNOT(4, 5))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 2))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(6, 8, 9))
p.inst(CCNOT(9, 11, 12))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CCNOT(28, 18, 13))
p.inst(CNOT(10, 11))
p.inst(CCNOT(13, 14, 15))
p.inst(CCNOT(28, 19, 16))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(13, 14))
p.inst(CCNOT(29, 18, 16))
p.inst(CNOT(10, 11))
p.inst(CNOT(16, 17))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(7, 8))
p.inst(CNOT(10, 11))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CNOT(6, 8))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(4, 5))
p.inst(CNOT(7, 8))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CNOT(3, 5))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(1, 2))
p.inst(CNOT(4, 5))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 2))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CCNOT(0, 2, 3))
p.inst(CCNOT(3, 5, 6))
p.inst(CCNOT(6, 8, 9))
p.inst(CCNOT(9, 11, 12))
p.inst(CCNOT(12, 14, 15))
p.inst(CNOT(15, 17))
p.inst(CCNOT(12, 14, 15))
p.inst(CCNOT(29, 18, 16))
p.inst(CNOT(13, 14))
p.inst(CCNOT(13, 14, 15))
p.inst(CNOT(13, 14))
p.inst(CNOT(12, 14))
p.inst(CCNOT(9, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CCNOT(10, 11, 12))
p.inst(CNOT(10, 11))
p.inst(CNOT(9, 11))
p.inst(CCNOT(6, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CCNOT(7, 8, 9))
p.inst(CNOT(7, 8))
p.inst(CNOT(6, 8))
p.inst(CCNOT(3, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CCNOT(4, 5, 6))
p.inst(CNOT(4, 5))
p.inst(CNOT(3, 5))
p.inst(CCNOT(0, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CCNOT(1, 2, 3))
p.inst(CNOT(1, 2))
p.inst(CNOT(0, 2))
p.inst(MEASURE(2, ro[0]))
p.inst(MEASURE(5, ro[1]))
p.inst(MEASURE(8, ro[2]))
p.inst(MEASURE(11, ro[3]))
p.inst(MEASURE(14, ro[4]))
p.inst(MEASURE(17, ro[5]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('30q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

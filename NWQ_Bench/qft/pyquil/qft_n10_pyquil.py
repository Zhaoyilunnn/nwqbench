from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, PHASE, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=20)

p.inst(H(0))
p.inst(PHASE(np.pi / 4, 1))
p.inst(PHASE(np.pi / 8, 2))
p.inst(PHASE(np.pi / 16, 3))
p.inst(PHASE(np.pi / 32, 4))
p.inst(PHASE(np.pi / 64, 5))
p.inst(PHASE(np.pi / 128, 6))
p.inst(PHASE(np.pi / 256, 7))
p.inst(PHASE(np.pi / 512, 8))
p.inst(PHASE(np.pi / 1024, 9))
p.inst(CNOT(1, 0))
p.inst(PHASE(-np.pi / 4, 0))
p.inst(CNOT(1, 0))
p.inst(PHASE(np.pi / 4, 0))
p.inst(H(1))
p.inst(CNOT(2, 0))
p.inst(PHASE(-np.pi / 8, 0))
p.inst(CNOT(2, 0))
p.inst(PHASE(np.pi / 8, 0))
p.inst(PHASE(np.pi / 4, 2))
p.inst(CNOT(2, 1))
p.inst(PHASE(-np.pi / 4, 1))
p.inst(CNOT(2, 1))
p.inst(PHASE(np.pi / 4, 1))
p.inst(H(2))
p.inst(CNOT(3, 0))
p.inst(PHASE(-np.pi / 16, 0))
p.inst(CNOT(3, 0))
p.inst(PHASE(np.pi / 16, 0))
p.inst(PHASE(np.pi / 8, 3))
p.inst(CNOT(3, 1))
p.inst(PHASE(-np.pi / 8, 1))
p.inst(CNOT(3, 1))
p.inst(PHASE(np.pi / 8, 1))
p.inst(PHASE(np.pi / 4, 3))
p.inst(CNOT(3, 2))
p.inst(PHASE(-np.pi / 4, 2))
p.inst(CNOT(3, 2))
p.inst(PHASE(np.pi / 4, 2))
p.inst(H(3))
p.inst(CNOT(4, 0))
p.inst(PHASE(-np.pi / 32, 0))
p.inst(CNOT(4, 0))
p.inst(PHASE(np.pi / 32, 0))
p.inst(PHASE(np.pi / 16, 4))
p.inst(CNOT(4, 1))
p.inst(PHASE(-np.pi / 16, 1))
p.inst(CNOT(4, 1))
p.inst(PHASE(np.pi / 16, 1))
p.inst(PHASE(np.pi / 8, 4))
p.inst(CNOT(4, 2))
p.inst(PHASE(-np.pi / 8, 2))
p.inst(CNOT(4, 2))
p.inst(PHASE(np.pi / 8, 2))
p.inst(PHASE(np.pi / 4, 4))
p.inst(CNOT(4, 3))
p.inst(PHASE(-np.pi / 4, 3))
p.inst(CNOT(4, 3))
p.inst(PHASE(np.pi / 4, 3))
p.inst(H(4))
p.inst(CNOT(5, 0))
p.inst(PHASE(-np.pi / 64, 0))
p.inst(CNOT(5, 0))
p.inst(PHASE(np.pi / 64, 0))
p.inst(PHASE(np.pi / 32, 5))
p.inst(CNOT(5, 1))
p.inst(PHASE(-np.pi / 32, 1))
p.inst(CNOT(5, 1))
p.inst(PHASE(np.pi / 32, 1))
p.inst(PHASE(np.pi / 16, 5))
p.inst(CNOT(5, 2))
p.inst(PHASE(-np.pi / 16, 2))
p.inst(CNOT(5, 2))
p.inst(PHASE(np.pi / 16, 2))
p.inst(PHASE(np.pi / 8, 5))
p.inst(CNOT(5, 3))
p.inst(PHASE(-np.pi / 8, 3))
p.inst(CNOT(5, 3))
p.inst(PHASE(np.pi / 8, 3))
p.inst(PHASE(np.pi / 4, 5))
p.inst(CNOT(5, 4))
p.inst(PHASE(-np.pi / 4, 4))
p.inst(CNOT(5, 4))
p.inst(PHASE(np.pi / 4, 4))
p.inst(H(5))
p.inst(CNOT(6, 0))
p.inst(PHASE(-np.pi / 128, 0))
p.inst(CNOT(6, 0))
p.inst(PHASE(np.pi / 128, 0))
p.inst(PHASE(np.pi / 64, 6))
p.inst(CNOT(6, 1))
p.inst(PHASE(-np.pi / 64, 1))
p.inst(CNOT(6, 1))
p.inst(PHASE(np.pi / 64, 1))
p.inst(PHASE(np.pi / 32, 6))
p.inst(CNOT(6, 2))
p.inst(PHASE(-np.pi / 32, 2))
p.inst(CNOT(6, 2))
p.inst(PHASE(np.pi / 32, 2))
p.inst(PHASE(np.pi / 16, 6))
p.inst(CNOT(6, 3))
p.inst(PHASE(-np.pi / 16, 3))
p.inst(CNOT(6, 3))
p.inst(PHASE(np.pi / 16, 3))
p.inst(PHASE(np.pi / 8, 6))
p.inst(CNOT(6, 4))
p.inst(PHASE(-np.pi / 8, 4))
p.inst(CNOT(6, 4))
p.inst(PHASE(np.pi / 8, 4))
p.inst(PHASE(np.pi / 4, 6))
p.inst(CNOT(6, 5))
p.inst(PHASE(-np.pi / 4, 5))
p.inst(CNOT(6, 5))
p.inst(PHASE(np.pi / 4, 5))
p.inst(H(6))
p.inst(CNOT(7, 0))
p.inst(PHASE(-np.pi / 256, 0))
p.inst(CNOT(7, 0))
p.inst(PHASE(np.pi / 256, 0))
p.inst(PHASE(np.pi / 128, 7))
p.inst(CNOT(7, 1))
p.inst(PHASE(-np.pi / 128, 1))
p.inst(CNOT(7, 1))
p.inst(PHASE(np.pi / 128, 1))
p.inst(PHASE(np.pi / 64, 7))
p.inst(CNOT(7, 2))
p.inst(PHASE(-np.pi / 64, 2))
p.inst(CNOT(7, 2))
p.inst(PHASE(np.pi / 64, 2))
p.inst(PHASE(np.pi / 32, 7))
p.inst(CNOT(7, 3))
p.inst(PHASE(-np.pi / 32, 3))
p.inst(CNOT(7, 3))
p.inst(PHASE(np.pi / 32, 3))
p.inst(PHASE(np.pi / 16, 7))
p.inst(CNOT(7, 4))
p.inst(PHASE(-np.pi / 16, 4))
p.inst(CNOT(7, 4))
p.inst(PHASE(np.pi / 16, 4))
p.inst(PHASE(np.pi / 8, 7))
p.inst(CNOT(7, 5))
p.inst(PHASE(-np.pi / 8, 5))
p.inst(CNOT(7, 5))
p.inst(PHASE(np.pi / 8, 5))
p.inst(PHASE(np.pi / 4, 7))
p.inst(CNOT(7, 6))
p.inst(PHASE(-np.pi / 4, 6))
p.inst(CNOT(7, 6))
p.inst(PHASE(np.pi / 4, 6))
p.inst(H(7))
p.inst(CNOT(8, 0))
p.inst(PHASE(-np.pi / 512, 0))
p.inst(CNOT(8, 0))
p.inst(PHASE(np.pi / 512, 0))
p.inst(PHASE(np.pi / 256, 8))
p.inst(CNOT(8, 1))
p.inst(PHASE(-np.pi / 256, 1))
p.inst(CNOT(8, 1))
p.inst(PHASE(np.pi / 256, 1))
p.inst(PHASE(np.pi / 128, 8))
p.inst(CNOT(8, 2))
p.inst(PHASE(-np.pi / 128, 2))
p.inst(CNOT(8, 2))
p.inst(PHASE(np.pi / 128, 2))
p.inst(PHASE(np.pi / 64, 8))
p.inst(CNOT(8, 3))
p.inst(PHASE(-np.pi / 64, 3))
p.inst(CNOT(8, 3))
p.inst(PHASE(np.pi / 64, 3))
p.inst(PHASE(np.pi / 32, 8))
p.inst(CNOT(8, 4))
p.inst(PHASE(-np.pi / 32, 4))
p.inst(CNOT(8, 4))
p.inst(PHASE(np.pi / 32, 4))
p.inst(PHASE(np.pi / 16, 8))
p.inst(CNOT(8, 5))
p.inst(PHASE(-np.pi / 16, 5))
p.inst(CNOT(8, 5))
p.inst(PHASE(np.pi / 16, 5))
p.inst(PHASE(np.pi / 8, 8))
p.inst(CNOT(8, 6))
p.inst(PHASE(-np.pi / 8, 6))
p.inst(CNOT(8, 6))
p.inst(PHASE(np.pi / 8, 6))
p.inst(PHASE(np.pi / 4, 8))
p.inst(CNOT(8, 7))
p.inst(PHASE(-np.pi / 4, 7))
p.inst(CNOT(8, 7))
p.inst(PHASE(np.pi / 4, 7))
p.inst(H(8))
p.inst(CNOT(9, 0))
p.inst(PHASE(-np.pi / 1024, 0))
p.inst(CNOT(9, 0))
p.inst(PHASE(np.pi / 1024, 0))
p.inst(PHASE(np.pi / 512, 9))
p.inst(CNOT(9, 1))
p.inst(PHASE(-np.pi / 512, 1))
p.inst(CNOT(9, 1))
p.inst(PHASE(np.pi / 512, 1))
p.inst(PHASE(np.pi / 256, 9))
p.inst(CNOT(9, 2))
p.inst(PHASE(-np.pi / 256, 2))
p.inst(CNOT(9, 2))
p.inst(PHASE(np.pi / 256, 2))
p.inst(PHASE(np.pi / 128, 9))
p.inst(CNOT(9, 3))
p.inst(PHASE(-np.pi / 128, 3))
p.inst(CNOT(9, 3))
p.inst(PHASE(np.pi / 128, 3))
p.inst(PHASE(np.pi / 64, 9))
p.inst(CNOT(9, 4))
p.inst(PHASE(-np.pi / 64, 4))
p.inst(CNOT(9, 4))
p.inst(PHASE(np.pi / 64, 4))
p.inst(PHASE(np.pi / 32, 9))
p.inst(CNOT(9, 5))
p.inst(PHASE(-np.pi / 32, 5))
p.inst(CNOT(9, 5))
p.inst(PHASE(np.pi / 32, 5))
p.inst(PHASE(np.pi / 16, 9))
p.inst(CNOT(9, 6))
p.inst(PHASE(-np.pi / 16, 6))
p.inst(CNOT(9, 6))
p.inst(PHASE(np.pi / 16, 6))
p.inst(PHASE(np.pi / 8, 9))
p.inst(CNOT(9, 7))
p.inst(PHASE(-np.pi / 8, 7))
p.inst(CNOT(9, 7))
p.inst(PHASE(np.pi / 8, 7))
p.inst(PHASE(np.pi / 4, 9))
p.inst(CNOT(9, 8))
p.inst(PHASE(-np.pi / 4, 8))
p.inst(CNOT(9, 8))
p.inst(PHASE(np.pi / 4, 8))
p.inst(H(9))
p.inst(MEASURE(0, ro[10]))
p.inst(MEASURE(1, ro[11]))
p.inst(MEASURE(2, ro[12]))
p.inst(MEASURE(3, ro[13]))
p.inst(MEASURE(4, ro[14]))
p.inst(MEASURE(5, ro[15]))
p.inst(MEASURE(6, ro[16]))
p.inst(MEASURE(7, ro[17]))
p.inst(MEASURE(8, ro[18]))
p.inst(MEASURE(9, ro[19]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('10q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

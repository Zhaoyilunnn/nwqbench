from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=130)

p.inst(H(0))
p.inst(CNOT(0, 1))
p.inst(CNOT(1, 2))
p.inst(CNOT(2, 3))
p.inst(CNOT(3, 4))
p.inst(CNOT(4, 5))
p.inst(CNOT(5, 6))
p.inst(CNOT(6, 7))
p.inst(CNOT(7, 8))
p.inst(CNOT(8, 9))
p.inst(CNOT(9, 10))
p.inst(CNOT(10, 11))
p.inst(CNOT(11, 12))
p.inst(CNOT(12, 13))
p.inst(CNOT(13, 14))
p.inst(CNOT(14, 15))
p.inst(CNOT(15, 16))
p.inst(CNOT(16, 17))
p.inst(CNOT(17, 18))
p.inst(CNOT(18, 19))
p.inst(CNOT(19, 20))
p.inst(CNOT(20, 21))
p.inst(CNOT(21, 22))
p.inst(CNOT(22, 23))
p.inst(CNOT(23, 24))
p.inst(CNOT(24, 25))
p.inst(CNOT(25, 26))
p.inst(CNOT(26, 27))
p.inst(CNOT(27, 28))
p.inst(CNOT(28, 29))
p.inst(CNOT(29, 30))
p.inst(CNOT(30, 31))
p.inst(CNOT(31, 32))
p.inst(CNOT(32, 33))
p.inst(CNOT(33, 34))
p.inst(CNOT(34, 35))
p.inst(CNOT(35, 36))
p.inst(CNOT(36, 37))
p.inst(CNOT(37, 38))
p.inst(CNOT(38, 39))
p.inst(CNOT(39, 40))
p.inst(CNOT(40, 41))
p.inst(CNOT(41, 42))
p.inst(CNOT(42, 43))
p.inst(CNOT(43, 44))
p.inst(CNOT(44, 45))
p.inst(CNOT(45, 46))
p.inst(CNOT(46, 47))
p.inst(CNOT(47, 48))
p.inst(CNOT(48, 49))
p.inst(CNOT(49, 50))
p.inst(CNOT(50, 51))
p.inst(CNOT(51, 52))
p.inst(CNOT(52, 53))
p.inst(CNOT(53, 54))
p.inst(CNOT(54, 55))
p.inst(CNOT(55, 56))
p.inst(CNOT(56, 57))
p.inst(CNOT(57, 58))
p.inst(CNOT(58, 59))
p.inst(CNOT(59, 60))
p.inst(CNOT(60, 61))
p.inst(CNOT(61, 62))
p.inst(CNOT(62, 63))
p.inst(CNOT(63, 64))
p.inst(MEASURE(0, ro[65]))
p.inst(MEASURE(1, ro[66]))
p.inst(MEASURE(2, ro[67]))
p.inst(MEASURE(3, ro[68]))
p.inst(MEASURE(4, ro[69]))
p.inst(MEASURE(5, ro[70]))
p.inst(MEASURE(6, ro[71]))
p.inst(MEASURE(7, ro[72]))
p.inst(MEASURE(8, ro[73]))
p.inst(MEASURE(9, ro[74]))
p.inst(MEASURE(10, ro[75]))
p.inst(MEASURE(11, ro[76]))
p.inst(MEASURE(12, ro[77]))
p.inst(MEASURE(13, ro[78]))
p.inst(MEASURE(14, ro[79]))
p.inst(MEASURE(15, ro[80]))
p.inst(MEASURE(16, ro[81]))
p.inst(MEASURE(17, ro[82]))
p.inst(MEASURE(18, ro[83]))
p.inst(MEASURE(19, ro[84]))
p.inst(MEASURE(20, ro[85]))
p.inst(MEASURE(21, ro[86]))
p.inst(MEASURE(22, ro[87]))
p.inst(MEASURE(23, ro[88]))
p.inst(MEASURE(24, ro[89]))
p.inst(MEASURE(25, ro[90]))
p.inst(MEASURE(26, ro[91]))
p.inst(MEASURE(27, ro[92]))
p.inst(MEASURE(28, ro[93]))
p.inst(MEASURE(29, ro[94]))
p.inst(MEASURE(30, ro[95]))
p.inst(MEASURE(31, ro[96]))
p.inst(MEASURE(32, ro[97]))
p.inst(MEASURE(33, ro[98]))
p.inst(MEASURE(34, ro[99]))
p.inst(MEASURE(35, ro[100]))
p.inst(MEASURE(36, ro[101]))
p.inst(MEASURE(37, ro[102]))
p.inst(MEASURE(38, ro[103]))
p.inst(MEASURE(39, ro[104]))
p.inst(MEASURE(40, ro[105]))
p.inst(MEASURE(41, ro[106]))
p.inst(MEASURE(42, ro[107]))
p.inst(MEASURE(43, ro[108]))
p.inst(MEASURE(44, ro[109]))
p.inst(MEASURE(45, ro[110]))
p.inst(MEASURE(46, ro[111]))
p.inst(MEASURE(47, ro[112]))
p.inst(MEASURE(48, ro[113]))
p.inst(MEASURE(49, ro[114]))
p.inst(MEASURE(50, ro[115]))
p.inst(MEASURE(51, ro[116]))
p.inst(MEASURE(52, ro[117]))
p.inst(MEASURE(53, ro[118]))
p.inst(MEASURE(54, ro[119]))
p.inst(MEASURE(55, ro[120]))
p.inst(MEASURE(56, ro[121]))
p.inst(MEASURE(57, ro[122]))
p.inst(MEASURE(58, ro[123]))
p.inst(MEASURE(59, ro[124]))
p.inst(MEASURE(60, ro[125]))
p.inst(MEASURE(61, ro[126]))
p.inst(MEASURE(62, ro[127]))
p.inst(MEASURE(63, ro[128]))
p.inst(MEASURE(64, ro[129]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('65q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

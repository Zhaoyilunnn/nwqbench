from pyquil import Program, get_qc
from pyquil.gates import RY, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=61)

p.inst(RY(2.1506626, 0))
p.inst(RY(1.4482467, 1))
p.inst(RY(2.3705663, 2))
p.inst(RY(1.9765769, 3))
p.inst(RY(0.62383312, 4))
p.inst(RY(2.8280429, 5))
p.inst(RY(2.120318, 6))
p.inst(RY(2.1798952, 7))
p.inst(RY(0.7320994, 8))
p.inst(RY(1.4714046, 9))
p.inst(RY(1.3094267, 10))
p.inst(RY(2.5935193, 11))
p.inst(RY(1.8626523, 12))
p.inst(RY(2.2725045, 13))
p.inst(RY(1.4573817, 14))
p.inst(RY(0.99378383, 15))
p.inst(RY(1.6801839, 16))
p.inst(RY(0.51077586, 17))
p.inst(RY(2.2853262, 18))
p.inst(RY(1.8372675, 19))
p.inst(RY(2.1131759, 20))
p.inst(RY(1.2755787, 21))
p.inst(RY(2.7975419, 22))
p.inst(RY(2.4755003, 23))
p.inst(RY(2.161285, 24))
p.inst(RY(0.91382352, 25))
p.inst(RY(1.5041891, 26))
p.inst(RY(0.42170479, 27))
p.inst(RY(0.80734219, 28))
p.inst(RY(1.9456087, 29))
p.inst(RY(2.0823405, 30))
p.inst(RY(2.7791103, 31))
p.inst(RY(1.2149868, 32))
p.inst(RY(1.3087262, 33))
p.inst(RY(1.5098703, 34))
p.inst(RY(0.90070537, 35))
p.inst(RY(0.73749253, 36))
p.inst(RY(1.522187, 37))
p.inst(RY(0.99299763, 38))
p.inst(RY(1.9173177, 39))
p.inst(RY(1.4447668, 40))
p.inst(RY(2.2987674, 41))
p.inst(RY(1.9828917, 42))
p.inst(RY(1.1861118, 43))
p.inst(RY(2.2976471, 44))
p.inst(RY(2.2262623, 45))
p.inst(RY(1.3438089, 46))
p.inst(RY(1.1336633, 47))
p.inst(RY(1.9444195, 48))
p.inst(RY(0.76628041, 49))
p.inst(RY(0.9270657, 50))
p.inst(RY(0.17181861, 51))
p.inst(RY(2.181994, 52))
p.inst(RY(1.9067839, 53))
p.inst(RY(1.9936131, 54))
p.inst(RY(2.1669431, 55))
p.inst(RY(1.4885351, 56))
p.inst(RY(1.7087155, 57))
p.inst(RY(0.76640879, 58))
p.inst(RY(0.69048084, 59))
p.inst(RY(1.9143189, 60))
p.inst(MEASURE(0, ro[0]))
p.inst(MEASURE(1, ro[1]))
p.inst(MEASURE(2, ro[2]))
p.inst(MEASURE(3, ro[3]))
p.inst(MEASURE(4, ro[4]))
p.inst(MEASURE(5, ro[5]))
p.inst(MEASURE(6, ro[6]))
p.inst(MEASURE(7, ro[7]))
p.inst(MEASURE(8, ro[8]))
p.inst(MEASURE(9, ro[9]))
p.inst(MEASURE(10, ro[10]))
p.inst(MEASURE(11, ro[11]))
p.inst(MEASURE(12, ro[12]))
p.inst(MEASURE(13, ro[13]))
p.inst(MEASURE(14, ro[14]))
p.inst(MEASURE(15, ro[15]))
p.inst(MEASURE(16, ro[16]))
p.inst(MEASURE(17, ro[17]))
p.inst(MEASURE(18, ro[18]))
p.inst(MEASURE(19, ro[19]))
p.inst(MEASURE(20, ro[20]))
p.inst(MEASURE(21, ro[21]))
p.inst(MEASURE(22, ro[22]))
p.inst(MEASURE(23, ro[23]))
p.inst(MEASURE(24, ro[24]))
p.inst(MEASURE(25, ro[25]))
p.inst(MEASURE(26, ro[26]))
p.inst(MEASURE(27, ro[27]))
p.inst(MEASURE(28, ro[28]))
p.inst(MEASURE(29, ro[29]))
p.inst(MEASURE(30, ro[30]))
p.inst(MEASURE(31, ro[31]))
p.inst(MEASURE(32, ro[32]))
p.inst(MEASURE(33, ro[33]))
p.inst(MEASURE(34, ro[34]))
p.inst(MEASURE(35, ro[35]))
p.inst(MEASURE(36, ro[36]))
p.inst(MEASURE(37, ro[37]))
p.inst(MEASURE(38, ro[38]))
p.inst(MEASURE(39, ro[39]))
p.inst(MEASURE(40, ro[40]))
p.inst(MEASURE(41, ro[41]))
p.inst(MEASURE(42, ro[42]))
p.inst(MEASURE(43, ro[43]))
p.inst(MEASURE(44, ro[44]))
p.inst(MEASURE(45, ro[45]))
p.inst(MEASURE(46, ro[46]))
p.inst(MEASURE(47, ro[47]))
p.inst(MEASURE(48, ro[48]))
p.inst(MEASURE(49, ro[49]))
p.inst(MEASURE(50, ro[50]))
p.inst(MEASURE(51, ro[51]))
p.inst(MEASURE(52, ro[52]))
p.inst(MEASURE(53, ro[53]))
p.inst(MEASURE(54, ro[54]))
p.inst(MEASURE(55, ro[55]))
p.inst(MEASURE(56, ro[56]))
p.inst(MEASURE(57, ro[57]))
p.inst(MEASURE(58, ro[58]))
p.inst(MEASURE(59, ro[59]))
p.inst(MEASURE(60, ro[60]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('61q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

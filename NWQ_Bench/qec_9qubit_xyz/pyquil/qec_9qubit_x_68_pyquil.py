from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=32)

p.inst(H(0))
p.inst(CNOT(0, 3))
p.inst(CNOT(0, 6))
p.inst(H(0))
p.inst(H(3))
p.inst(H(6))
p.inst(CNOT(0, 1))
p.inst(CNOT(3, 4))
p.inst(CNOT(6, 7))
p.inst(CNOT(0, 2))
p.inst(CNOT(3, 5))
p.inst(CNOT(6, 8))
p.inst(CNOT(0, 36))
p.inst(CNOT(1, 36))
p.inst(CNOT(1, 37))
p.inst(CNOT(2, 37))
p.inst(CNOT(3, 38))
p.inst(CNOT(4, 38))
p.inst(CNOT(4, 39))
p.inst(CNOT(5, 39))
p.inst(CNOT(6, 40))
p.inst(CNOT(7, 40))
p.inst(CNOT(7, 41))
p.inst(CNOT(8, 41))
p.inst(MEASURE(36, ro[0]))
p.inst(MEASURE(37, ro[1]))
p.inst(MEASURE(38, ro[2]))
p.inst(MEASURE(39, ro[3]))
p.inst(MEASURE(40, ro[4]))
p.inst(MEASURE(41, ro[5]))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(H(5))
p.inst(H(6))
p.inst(H(7))
p.inst(H(8))
p.inst(CNOT(0, 42))
p.inst(CNOT(3, 43))
p.inst(CNOT(1, 42))
p.inst(CNOT(4, 43))
p.inst(CNOT(2, 42))
p.inst(CNOT(5, 43))
p.inst(CNOT(3, 42))
p.inst(CNOT(6, 43))
p.inst(CNOT(4, 42))
p.inst(CNOT(7, 43))
p.inst(CNOT(5, 42))
p.inst(CNOT(8, 43))
p.inst(MEASURE(42, ro[6]))
p.inst(MEASURE(43, ro[7]))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(H(5))
p.inst(H(6))
p.inst(H(7))
p.inst(H(9))
p.inst(CNOT(9, 12))
p.inst(CNOT(9, 15))
p.inst(H(9))
p.inst(H(12))
p.inst(H(15))
p.inst(CNOT(9, 10))
p.inst(CNOT(12, 13))
p.inst(CNOT(15, 16))
p.inst(CNOT(9, 11))
p.inst(CNOT(12, 14))
p.inst(CNOT(15, 17))
p.inst(CNOT(9, 44))
p.inst(CNOT(10, 44))
p.inst(CNOT(10, 45))
p.inst(CNOT(11, 45))
p.inst(CNOT(12, 46))
p.inst(CNOT(13, 46))
p.inst(CNOT(13, 47))
p.inst(CNOT(14, 47))
p.inst(CNOT(15, 48))
p.inst(CNOT(16, 48))
p.inst(CNOT(16, 49))
p.inst(CNOT(17, 49))
p.inst(MEASURE(44, ro[8]))
p.inst(MEASURE(45, ro[9]))
p.inst(MEASURE(46, ro[10]))
p.inst(MEASURE(47, ro[11]))
p.inst(MEASURE(48, ro[12]))
p.inst(MEASURE(49, ro[13]))
p.inst(H(9))
p.inst(H(10))
p.inst(H(11))
p.inst(H(12))
p.inst(H(13))
p.inst(H(14))
p.inst(H(15))
p.inst(H(16))
p.inst(H(17))
p.inst(CNOT(9, 50))
p.inst(CNOT(12, 51))
p.inst(CNOT(10, 50))
p.inst(CNOT(13, 51))
p.inst(CNOT(11, 50))
p.inst(CNOT(14, 51))
p.inst(CNOT(12, 50))
p.inst(CNOT(15, 51))
p.inst(CNOT(13, 50))
p.inst(CNOT(16, 51))
p.inst(CNOT(14, 50))
p.inst(CNOT(17, 51))
p.inst(MEASURE(50, ro[14]))
p.inst(MEASURE(51, ro[15]))
p.inst(H(9))
p.inst(H(10))
p.inst(H(11))
p.inst(H(12))
p.inst(H(13))
p.inst(H(14))
p.inst(H(15))
p.inst(H(16))
p.inst(H(18))
p.inst(CNOT(18, 21))
p.inst(CNOT(18, 24))
p.inst(H(18))
p.inst(H(21))
p.inst(H(24))
p.inst(CNOT(18, 19))
p.inst(CNOT(21, 22))
p.inst(CNOT(24, 25))
p.inst(CNOT(18, 20))
p.inst(CNOT(21, 23))
p.inst(CNOT(24, 26))
p.inst(CNOT(18, 52))
p.inst(CNOT(19, 52))
p.inst(CNOT(19, 53))
p.inst(CNOT(20, 53))
p.inst(CNOT(21, 54))
p.inst(CNOT(22, 54))
p.inst(CNOT(22, 55))
p.inst(CNOT(23, 55))
p.inst(CNOT(24, 56))
p.inst(CNOT(25, 56))
p.inst(CNOT(25, 57))
p.inst(CNOT(26, 57))
p.inst(MEASURE(52, ro[16]))
p.inst(MEASURE(53, ro[17]))
p.inst(MEASURE(54, ro[18]))
p.inst(MEASURE(55, ro[19]))
p.inst(MEASURE(56, ro[20]))
p.inst(MEASURE(57, ro[21]))
p.inst(H(18))
p.inst(H(19))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(H(24))
p.inst(H(25))
p.inst(H(26))
p.inst(CNOT(18, 58))
p.inst(CNOT(21, 59))
p.inst(CNOT(19, 58))
p.inst(CNOT(22, 59))
p.inst(CNOT(20, 58))
p.inst(CNOT(23, 59))
p.inst(CNOT(21, 58))
p.inst(CNOT(24, 59))
p.inst(CNOT(22, 58))
p.inst(CNOT(25, 59))
p.inst(CNOT(23, 58))
p.inst(CNOT(26, 59))
p.inst(MEASURE(58, ro[22]))
p.inst(MEASURE(59, ro[23]))
p.inst(H(18))
p.inst(H(19))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(H(24))
p.inst(H(25))
p.inst(H(27))
p.inst(CNOT(27, 30))
p.inst(CNOT(27, 33))
p.inst(H(27))
p.inst(H(30))
p.inst(H(33))
p.inst(CNOT(27, 28))
p.inst(CNOT(30, 31))
p.inst(CNOT(33, 34))
p.inst(CNOT(27, 29))
p.inst(CNOT(30, 32))
p.inst(CNOT(33, 35))
p.inst(CNOT(27, 60))
p.inst(CNOT(28, 60))
p.inst(CNOT(28, 61))
p.inst(CNOT(29, 61))
p.inst(CNOT(30, 62))
p.inst(CNOT(31, 62))
p.inst(CNOT(31, 63))
p.inst(CNOT(32, 63))
p.inst(CNOT(33, 64))
p.inst(CNOT(34, 64))
p.inst(CNOT(34, 65))
p.inst(CNOT(35, 65))
p.inst(MEASURE(60, ro[24]))
p.inst(MEASURE(61, ro[25]))
p.inst(MEASURE(62, ro[26]))
p.inst(MEASURE(63, ro[27]))
p.inst(MEASURE(64, ro[28]))
p.inst(MEASURE(65, ro[29]))
p.inst(H(27))
p.inst(H(28))
p.inst(H(29))
p.inst(H(30))
p.inst(H(31))
p.inst(H(32))
p.inst(H(33))
p.inst(H(34))
p.inst(H(35))
p.inst(CNOT(27, 66))
p.inst(CNOT(30, 67))
p.inst(CNOT(28, 66))
p.inst(CNOT(31, 67))
p.inst(CNOT(29, 66))
p.inst(CNOT(32, 67))
p.inst(CNOT(30, 66))
p.inst(CNOT(33, 67))
p.inst(CNOT(31, 66))
p.inst(CNOT(34, 67))
p.inst(CNOT(32, 66))
p.inst(CNOT(35, 67))
p.inst(MEASURE(66, ro[30]))
p.inst(MEASURE(67, ro[31]))
p.inst(H(27))
p.inst(H(28))
p.inst(H(29))
p.inst(H(30))
p.inst(H(31))
p.inst(H(32))
p.inst(H(33))
p.inst(H(34))

p.wrap_in_numshots_loop(shots)

qc = get_qc('68q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=24)

p.inst(H(0))
p.inst(CNOT(0, 3))
p.inst(CNOT(0, 6))
p.inst(H(0))
p.inst(H(3))
p.inst(H(6))
p.inst(CNOT(0, 1))
p.inst(CNOT(3, 4))
p.inst(CNOT(6, 7))
p.inst(CNOT(0, 2))
p.inst(CNOT(3, 5))
p.inst(CNOT(6, 8))
p.inst(CNOT(0, 27))
p.inst(CNOT(1, 27))
p.inst(CNOT(1, 28))
p.inst(CNOT(2, 28))
p.inst(CNOT(3, 29))
p.inst(CNOT(4, 29))
p.inst(CNOT(4, 30))
p.inst(CNOT(5, 30))
p.inst(CNOT(6, 31))
p.inst(CNOT(7, 31))
p.inst(CNOT(7, 32))
p.inst(CNOT(8, 32))
p.inst(MEASURE(27, ro[0]))
p.inst(MEASURE(28, ro[1]))
p.inst(MEASURE(29, ro[2]))
p.inst(MEASURE(30, ro[3]))
p.inst(MEASURE(31, ro[4]))
p.inst(MEASURE(32, ro[5]))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(H(5))
p.inst(H(6))
p.inst(H(7))
p.inst(H(8))
p.inst(CNOT(0, 33))
p.inst(CNOT(3, 34))
p.inst(CNOT(1, 33))
p.inst(CNOT(4, 34))
p.inst(CNOT(2, 33))
p.inst(CNOT(5, 34))
p.inst(CNOT(3, 33))
p.inst(CNOT(6, 34))
p.inst(CNOT(4, 33))
p.inst(CNOT(7, 34))
p.inst(CNOT(5, 33))
p.inst(CNOT(8, 34))
p.inst(MEASURE(33, ro[6]))
p.inst(MEASURE(34, ro[7]))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(H(5))
p.inst(H(6))
p.inst(H(7))
p.inst(H(9))
p.inst(CNOT(9, 12))
p.inst(CNOT(9, 15))
p.inst(H(9))
p.inst(H(12))
p.inst(H(15))
p.inst(CNOT(9, 10))
p.inst(CNOT(12, 13))
p.inst(CNOT(15, 16))
p.inst(CNOT(9, 11))
p.inst(CNOT(12, 14))
p.inst(CNOT(15, 17))
p.inst(CNOT(9, 35))
p.inst(CNOT(10, 35))
p.inst(CNOT(10, 36))
p.inst(CNOT(11, 36))
p.inst(CNOT(12, 37))
p.inst(CNOT(13, 37))
p.inst(CNOT(13, 38))
p.inst(CNOT(14, 38))
p.inst(CNOT(15, 39))
p.inst(CNOT(16, 39))
p.inst(CNOT(16, 40))
p.inst(CNOT(17, 40))
p.inst(MEASURE(35, ro[8]))
p.inst(MEASURE(36, ro[9]))
p.inst(MEASURE(37, ro[10]))
p.inst(MEASURE(38, ro[11]))
p.inst(MEASURE(39, ro[12]))
p.inst(MEASURE(40, ro[13]))
p.inst(H(9))
p.inst(H(10))
p.inst(H(11))
p.inst(H(12))
p.inst(H(13))
p.inst(H(14))
p.inst(H(15))
p.inst(H(16))
p.inst(H(17))
p.inst(CNOT(9, 41))
p.inst(CNOT(12, 42))
p.inst(CNOT(10, 41))
p.inst(CNOT(13, 42))
p.inst(CNOT(11, 41))
p.inst(CNOT(14, 42))
p.inst(CNOT(12, 41))
p.inst(CNOT(15, 42))
p.inst(CNOT(13, 41))
p.inst(CNOT(16, 42))
p.inst(CNOT(14, 41))
p.inst(CNOT(17, 42))
p.inst(MEASURE(41, ro[14]))
p.inst(MEASURE(42, ro[15]))
p.inst(H(9))
p.inst(H(10))
p.inst(H(11))
p.inst(H(12))
p.inst(H(13))
p.inst(H(14))
p.inst(H(15))
p.inst(H(16))
p.inst(H(18))
p.inst(CNOT(18, 21))
p.inst(CNOT(18, 24))
p.inst(H(18))
p.inst(H(21))
p.inst(H(24))
p.inst(CNOT(18, 19))
p.inst(CNOT(21, 22))
p.inst(CNOT(24, 25))
p.inst(CNOT(18, 20))
p.inst(CNOT(21, 23))
p.inst(CNOT(24, 26))
p.inst(CNOT(18, 43))
p.inst(CNOT(19, 43))
p.inst(CNOT(19, 44))
p.inst(CNOT(20, 44))
p.inst(CNOT(21, 45))
p.inst(CNOT(22, 45))
p.inst(CNOT(22, 46))
p.inst(CNOT(23, 46))
p.inst(CNOT(24, 47))
p.inst(CNOT(25, 47))
p.inst(CNOT(25, 48))
p.inst(CNOT(26, 48))
p.inst(MEASURE(43, ro[16]))
p.inst(MEASURE(44, ro[17]))
p.inst(MEASURE(45, ro[18]))
p.inst(MEASURE(46, ro[19]))
p.inst(MEASURE(47, ro[20]))
p.inst(MEASURE(48, ro[21]))
p.inst(H(18))
p.inst(H(19))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(H(24))
p.inst(H(25))
p.inst(H(26))
p.inst(CNOT(18, 49))
p.inst(CNOT(21, 50))
p.inst(CNOT(19, 49))
p.inst(CNOT(22, 50))
p.inst(CNOT(20, 49))
p.inst(CNOT(23, 50))
p.inst(CNOT(21, 49))
p.inst(CNOT(24, 50))
p.inst(CNOT(22, 49))
p.inst(CNOT(25, 50))
p.inst(CNOT(23, 49))
p.inst(CNOT(26, 50))
p.inst(MEASURE(49, ro[22]))
p.inst(MEASURE(50, ro[23]))
p.inst(H(18))
p.inst(H(19))
p.inst(H(20))
p.inst(H(21))
p.inst(H(22))
p.inst(H(23))
p.inst(H(24))
p.inst(H(25))

p.wrap_in_numshots_loop(shots)

qc = get_qc('51q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

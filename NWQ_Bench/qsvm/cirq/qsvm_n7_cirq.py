import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(7)]

circuit = cirq.Circuit(
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.H(q[5]),
    cirq.H(q[6]),
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    cirq.CNOT(q[0], q[1]),
    cirq.rz(0.50713447)(q[1]),
    cirq.CNOT(q[0], q[1]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(1.8462245)(q[2]),
    cirq.CNOT(q[1], q[2]),
    cirq.CNOT(q[2], q[3]),
    cirq.rz(2.5802095)(q[3]),
    cirq.CNOT(q[2], q[3]),
    cirq.CNOT(q[3], q[4]),
    cirq.rz(2.6000677)(q[4]),
    cirq.CNOT(q[3], q[4]),
    cirq.CNOT(q[4], q[5]),
    cirq.rz(0.64096198)(q[5]),
    cirq.CNOT(q[4], q[5]),
    cirq.CNOT(q[5], q[6]),
    cirq.rz(0.98574732)(q[6]),
    cirq.CNOT(q[5], q[6]),
    cirq.CNOT(q[5], q[6]),
    cirq.rz(0.2277678)(q[6]),
    cirq.CNOT(q[5], q[6]),
    cirq.CNOT(q[4], q[5]),
    cirq.rz(0.021417735)(q[6]),
    cirq.rz(0.078687971)(q[5]),
    cirq.H(q[6]),
    cirq.CNOT(q[4], q[5]),
    cirq.CNOT(q[3], q[4]),
    cirq.rz(0.74503425)(q[5]),
    cirq.rz(2.3168539)(q[4]),
    cirq.H(q[5]),
    cirq.CNOT(q[3], q[4]),
    cirq.CNOT(q[2], q[3]),
    cirq.rz(1.939598)(q[4]),
    cirq.rz(1.7757852)(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[2], q[3]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(2.2976536)(q[3]),
    cirq.rz(0.59138485)(q[2]),
    cirq.H(q[3]),
    cirq.CNOT(q[1], q[2]),
    cirq.CNOT(q[0], q[1]),
    cirq.rz(1.0629948)(q[2]),
    cirq.rz(1.9256754)(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[0], q[1]),
    cirq.rz(3.0664915)(q[0]),
    cirq.rz(2.2495515)(q[1]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.measure(q[0], key='meas0'),
    cirq.measure(q[1], key='meas1'),
    cirq.measure(q[2], key='meas2'),
    cirq.measure(q[3], key='meas3'),
    cirq.measure(q[4], key='meas4'),
    cirq.measure(q[5], key='meas5'),
    cirq.measure(q[6], key='meas6')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['meas0', 'meas1', 'meas2', 'meas3', 'meas4', 'meas5', 'meas6']))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
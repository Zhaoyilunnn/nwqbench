import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(9)]

circuit = cirq.Circuit(
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.H(q[5]),
    cirq.H(q[6]),
    cirq.H(q[7]),
    cirq.H(q[8]),
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    # Export to cirq WARNING: unknown gate "p".,
    cirq.CNOT(q[0], q[1]),
    cirq.rz(2.8311259)(q[1]),
    cirq.CNOT(q[0], q[1]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(1.2265915)(q[2]),
    cirq.CNOT(q[1], q[2]),
    cirq.CNOT(q[2], q[3]),
    cirq.rz(1.479296)(q[3]),
    cirq.CNOT(q[2], q[3]),
    cirq.CNOT(q[3], q[4]),
    cirq.rz(2.9514659)(q[4]),
    cirq.CNOT(q[3], q[4]),
    cirq.CNOT(q[4], q[5]),
    cirq.rz(2.3882589)(q[5]),
    cirq.CNOT(q[4], q[5]),
    cirq.CNOT(q[5], q[6]),
    cirq.rz(1.1734905)(q[6]),
    cirq.CNOT(q[5], q[6]),
    cirq.CNOT(q[6], q[7]),
    cirq.rz(2.2581292)(q[7]),
    cirq.CNOT(q[6], q[7]),
    cirq.CNOT(q[7], q[8]),
    cirq.rz(1.1319911)(q[8]),
    cirq.CNOT(q[7], q[8]),
    cirq.CNOT(q[7], q[8]),
    cirq.rz(2.1029369)(q[8]),
    cirq.CNOT(q[7], q[8]),
    cirq.CNOT(q[6], q[7]),
    cirq.rz(2.6862292)(q[8]),
    cirq.rz(2.8882597)(q[7]),
    cirq.H(q[8]),
    cirq.CNOT(q[6], q[7]),
    cirq.CNOT(q[5], q[6]),
    cirq.rz(2.6511854)(q[7]),
    cirq.rz(1.0268664)(q[6]),
    cirq.H(q[7]),
    cirq.CNOT(q[5], q[6]),
    cirq.CNOT(q[4], q[5]),
    cirq.rz(0.76967459)(q[6]),
    cirq.rz(0.55298471)(q[5]),
    cirq.H(q[6]),
    cirq.CNOT(q[4], q[5]),
    cirq.CNOT(q[3], q[4]),
    cirq.rz(2.4446613)(q[5]),
    cirq.rz(0.90856313)(q[4]),
    cirq.H(q[5]),
    cirq.CNOT(q[3], q[4]),
    cirq.CNOT(q[2], q[3]),
    cirq.rz(1.9013246)(q[4]),
    cirq.rz(2.9827742)(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[2], q[3]),
    cirq.CNOT(q[1], q[2]),
    cirq.rz(0.014797547)(q[3]),
    cirq.rz(0.19787971)(q[2]),
    cirq.H(q[3]),
    cirq.CNOT(q[1], q[2]),
    cirq.CNOT(q[0], q[1]),
    cirq.rz(0.85822507)(q[2]),
    cirq.rz(0.22373175)(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[0], q[1]),
    cirq.rz(0.0041994242)(q[0]),
    cirq.rz(2.9933554)(q[1]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.measure(q[0], key='meas0'),
    cirq.measure(q[1], key='meas1'),
    cirq.measure(q[2], key='meas2'),
    cirq.measure(q[3], key='meas3'),
    cirq.measure(q[4], key='meas4'),
    cirq.measure(q[5], key='meas5'),
    cirq.measure(q[6], key='meas6'),
    cirq.measure(q[7], key='meas7'),
    cirq.measure(q[8], key='meas8')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['meas0', 'meas1', 'meas2', 'meas3', 'meas4', 'meas5', 'meas6', 'meas7', 'meas8']))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
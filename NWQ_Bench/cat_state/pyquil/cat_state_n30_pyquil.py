from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, MEASURE
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=60)

p.inst(H(0))
p.inst(CNOT(0, 1))
p.inst(CNOT(1, 2))
p.inst(CNOT(2, 3))
p.inst(CNOT(3, 4))
p.inst(CNOT(4, 5))
p.inst(CNOT(5, 6))
p.inst(CNOT(6, 7))
p.inst(CNOT(7, 8))
p.inst(CNOT(8, 9))
p.inst(CNOT(9, 10))
p.inst(CNOT(10, 11))
p.inst(CNOT(11, 12))
p.inst(CNOT(12, 13))
p.inst(CNOT(13, 14))
p.inst(CNOT(14, 15))
p.inst(CNOT(15, 16))
p.inst(CNOT(16, 17))
p.inst(CNOT(17, 18))
p.inst(CNOT(18, 19))
p.inst(CNOT(19, 20))
p.inst(CNOT(20, 21))
p.inst(CNOT(21, 22))
p.inst(CNOT(22, 23))
p.inst(CNOT(23, 24))
p.inst(CNOT(24, 25))
p.inst(CNOT(25, 26))
p.inst(CNOT(26, 27))
p.inst(CNOT(27, 28))
p.inst(CNOT(28, 29))
p.inst(MEASURE(0, ro[30]))
p.inst(MEASURE(1, ro[31]))
p.inst(MEASURE(2, ro[32]))
p.inst(MEASURE(3, ro[33]))
p.inst(MEASURE(4, ro[34]))
p.inst(MEASURE(5, ro[35]))
p.inst(MEASURE(6, ro[36]))
p.inst(MEASURE(7, ro[37]))
p.inst(MEASURE(8, ro[38]))
p.inst(MEASURE(9, ro[39]))
p.inst(MEASURE(10, ro[40]))
p.inst(MEASURE(11, ro[41]))
p.inst(MEASURE(12, ro[42]))
p.inst(MEASURE(13, ro[43]))
p.inst(MEASURE(14, ro[44]))
p.inst(MEASURE(15, ro[45]))
p.inst(MEASURE(16, ro[46]))
p.inst(MEASURE(17, ro[47]))
p.inst(MEASURE(18, ro[48]))
p.inst(MEASURE(19, ro[49]))
p.inst(MEASURE(20, ro[50]))
p.inst(MEASURE(21, ro[51]))
p.inst(MEASURE(22, ro[52]))
p.inst(MEASURE(23, ro[53]))
p.inst(MEASURE(24, ro[54]))
p.inst(MEASURE(25, ro[55]))
p.inst(MEASURE(26, ro[56]))
p.inst(MEASURE(27, ro[57]))
p.inst(MEASURE(28, ro[58]))
p.inst(MEASURE(29, ro[59]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('30q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

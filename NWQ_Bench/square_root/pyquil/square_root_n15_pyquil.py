from pyquil import Program, get_qc
from pyquil.gates import H, CNOT, X, CCNOT, MEASURE, RESET, Z
from functools import reduce
import numpy as np

shots = 1024

p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=11)

p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(RESET(11))
p.inst(RESET(12))
p.inst(RESET(13))
p.inst(RESET(14))
p.inst(CNOT(0, 5))
p.inst(CNOT(1, 7))
p.inst(CNOT(2, 9))
p.inst(CNOT(3, 6))
p.inst(CNOT(3, 7))
p.inst(CNOT(4, 8))
p.inst(CNOT(4, 9))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(CCNOT(6, 5, 11))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(13, 9, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 9, 14))
p.inst(CCNOT(12, 8, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 7, 12))
p.inst(RESET(13))
p.inst(CCNOT(6, 5, 11))
p.inst(RESET(12))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(RESET(11))
p.inst(CNOT(0, 5))
p.inst(H(0))
p.inst(CNOT(1, 7))
p.inst(X(0))
p.inst(H(1))
p.inst(CNOT(2, 9))
p.inst(X(1))
p.inst(H(2))
p.inst(CNOT(3, 6))
p.inst(X(2))
p.inst(CNOT(3, 7))
p.inst(H(3))
p.inst(CNOT(4, 8))
p.inst(X(3))
p.inst(CNOT(4, 9))
p.inst(H(4))
p.inst(X(4))
p.inst(CCNOT(1, 0, 11))
p.inst(CCNOT(11, 2, 12))
p.inst(CCNOT(12, 3, 13))
p.inst(CCNOT(13, 4, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 4, 14))
p.inst(CCNOT(12, 3, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 2, 12))
p.inst(RESET(13))
p.inst(CCNOT(1, 0, 11))
p.inst(RESET(12))
p.inst(X(0))
p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(RESET(11))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(CNOT(0, 5))
p.inst(CNOT(1, 7))
p.inst(CNOT(2, 9))
p.inst(CNOT(3, 6))
p.inst(CNOT(3, 7))
p.inst(CNOT(4, 8))
p.inst(CNOT(4, 9))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(CCNOT(6, 5, 11))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(13, 9, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 9, 14))
p.inst(CCNOT(12, 8, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 7, 12))
p.inst(RESET(13))
p.inst(CCNOT(6, 5, 11))
p.inst(RESET(12))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(RESET(11))
p.inst(CNOT(0, 5))
p.inst(H(0))
p.inst(CNOT(1, 7))
p.inst(X(0))
p.inst(H(1))
p.inst(CNOT(2, 9))
p.inst(X(1))
p.inst(H(2))
p.inst(CNOT(3, 6))
p.inst(X(2))
p.inst(CNOT(3, 7))
p.inst(H(3))
p.inst(CNOT(4, 8))
p.inst(X(3))
p.inst(CNOT(4, 9))
p.inst(H(4))
p.inst(X(4))
p.inst(CCNOT(1, 0, 11))
p.inst(CCNOT(11, 2, 12))
p.inst(CCNOT(12, 3, 13))
p.inst(CCNOT(13, 4, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 4, 14))
p.inst(CCNOT(12, 3, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 2, 12))
p.inst(RESET(13))
p.inst(CCNOT(1, 0, 11))
p.inst(RESET(12))
p.inst(X(0))
p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(RESET(11))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(CNOT(0, 5))
p.inst(CNOT(1, 7))
p.inst(CNOT(2, 9))
p.inst(CNOT(3, 6))
p.inst(CNOT(3, 7))
p.inst(CNOT(4, 8))
p.inst(CNOT(4, 9))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(CCNOT(6, 5, 11))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(13, 9, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 9, 14))
p.inst(CCNOT(12, 8, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 7, 12))
p.inst(RESET(13))
p.inst(CCNOT(6, 5, 11))
p.inst(RESET(12))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(RESET(11))
p.inst(CNOT(0, 5))
p.inst(H(0))
p.inst(CNOT(1, 7))
p.inst(X(0))
p.inst(H(1))
p.inst(CNOT(2, 9))
p.inst(X(1))
p.inst(H(2))
p.inst(CNOT(3, 6))
p.inst(X(2))
p.inst(CNOT(3, 7))
p.inst(H(3))
p.inst(CNOT(4, 8))
p.inst(X(3))
p.inst(CNOT(4, 9))
p.inst(H(4))
p.inst(X(4))
p.inst(CCNOT(1, 0, 11))
p.inst(CCNOT(11, 2, 12))
p.inst(CCNOT(12, 3, 13))
p.inst(CCNOT(13, 4, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 4, 14))
p.inst(CCNOT(12, 3, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 2, 12))
p.inst(RESET(13))
p.inst(CCNOT(1, 0, 11))
p.inst(RESET(12))
p.inst(X(0))
p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(RESET(11))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(CNOT(0, 5))
p.inst(CNOT(1, 7))
p.inst(CNOT(2, 9))
p.inst(CNOT(3, 6))
p.inst(CNOT(3, 7))
p.inst(CNOT(4, 8))
p.inst(CNOT(4, 9))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(CCNOT(6, 5, 11))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(13, 9, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 9, 14))
p.inst(CCNOT(12, 8, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 7, 12))
p.inst(RESET(13))
p.inst(CCNOT(6, 5, 11))
p.inst(RESET(12))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(RESET(11))
p.inst(CNOT(0, 5))
p.inst(H(0))
p.inst(CNOT(1, 7))
p.inst(X(0))
p.inst(H(1))
p.inst(CNOT(2, 9))
p.inst(X(1))
p.inst(H(2))
p.inst(CNOT(3, 6))
p.inst(X(2))
p.inst(CNOT(3, 7))
p.inst(H(3))
p.inst(CNOT(4, 8))
p.inst(X(3))
p.inst(CNOT(4, 9))
p.inst(H(4))
p.inst(X(4))
p.inst(CCNOT(1, 0, 11))
p.inst(CCNOT(11, 2, 12))
p.inst(CCNOT(12, 3, 13))
p.inst(CCNOT(13, 4, 14))
p.inst(Z(14))
p.inst(CCNOT(13, 4, 14))
p.inst(CCNOT(12, 3, 13))
p.inst(RESET(14))
p.inst(CCNOT(11, 2, 12))
p.inst(RESET(13))
p.inst(CCNOT(1, 0, 11))
p.inst(RESET(12))
p.inst(X(0))
p.inst(X(1))
p.inst(X(2))
p.inst(X(3))
p.inst(X(4))
p.inst(RESET(11))
p.inst(H(0))
p.inst(H(1))
p.inst(H(2))
p.inst(H(3))
p.inst(H(4))
p.inst(CNOT(0, 5))
p.inst(CNOT(1, 7))
p.inst(CNOT(2, 9))
p.inst(CNOT(3, 6))
p.inst(CNOT(3, 7))
p.inst(CNOT(4, 8))
p.inst(CNOT(4, 9))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(CCNOT(6, 5, 11))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(13, 9, 14))
p.inst(CNOT(14, 10))
p.inst(CCNOT(13, 9, 14))
p.inst(CCNOT(12, 8, 13))
p.inst(CCNOT(11, 7, 12))
p.inst(CCNOT(6, 5, 11))
p.inst(X(5))
p.inst(X(7))
p.inst(X(8))
p.inst(X(9))
p.inst(MEASURE(10, ro[10]))
p.inst(MEASURE(0, ro[0]))
p.inst(MEASURE(1, ro[1]))
p.inst(MEASURE(2, ro[2]))
p.inst(MEASURE(3, ro[3]))
p.inst(MEASURE(4, ro[4]))
p.inst(MEASURE(5, ro[5]))
p.inst(MEASURE(6, ro[6]))
p.inst(MEASURE(7, ro[7]))
p.inst(MEASURE(8, ro[8]))
p.inst(MEASURE(9, ro[9]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('15q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

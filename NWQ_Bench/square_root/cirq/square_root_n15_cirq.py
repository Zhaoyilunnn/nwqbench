import cirq
import numpy as np
from functools import reduce

q = [cirq.NamedQubit('q' + str(i)) for i in range(15)]

circuit = cirq.Circuit(
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.reset(q[11]),
    cirq.reset(q[12]),
    cirq.reset(q[13]),
    cirq.reset(q[14]),
    cirq.CNOT(q[0], q[5]),
    cirq.CNOT(q[1], q[7]),
    cirq.CNOT(q[2], q[9]),
    cirq.CNOT(q[3], q[6]),
    cirq.CNOT(q[3], q[7]),
    cirq.CNOT(q[4], q[8]),
    cirq.CNOT(q[4], q[9]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.reset(q[11]),
    cirq.CNOT(q[0], q[5]),
    cirq.H(q[0]),
    cirq.CNOT(q[1], q[7]),
    cirq.X(q[0]),
    cirq.H(q[1]),
    cirq.CNOT(q[2], q[9]),
    cirq.X(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[3], q[6]),
    cirq.X(q[2]),
    cirq.CNOT(q[3], q[7]),
    cirq.H(q[3]),
    cirq.CNOT(q[4], q[8]),
    cirq.X(q[3]),
    cirq.CNOT(q[4], q[9]),
    cirq.H(q[4]),
    cirq.X(q[4]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[0]),
    cirq.X(q[1]),
    cirq.X(q[2]),
    cirq.X(q[3]),
    cirq.X(q[4]),
    cirq.reset(q[11]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[0], q[5]),
    cirq.CNOT(q[1], q[7]),
    cirq.CNOT(q[2], q[9]),
    cirq.CNOT(q[3], q[6]),
    cirq.CNOT(q[3], q[7]),
    cirq.CNOT(q[4], q[8]),
    cirq.CNOT(q[4], q[9]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.reset(q[11]),
    cirq.CNOT(q[0], q[5]),
    cirq.H(q[0]),
    cirq.CNOT(q[1], q[7]),
    cirq.X(q[0]),
    cirq.H(q[1]),
    cirq.CNOT(q[2], q[9]),
    cirq.X(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[3], q[6]),
    cirq.X(q[2]),
    cirq.CNOT(q[3], q[7]),
    cirq.H(q[3]),
    cirq.CNOT(q[4], q[8]),
    cirq.X(q[3]),
    cirq.CNOT(q[4], q[9]),
    cirq.H(q[4]),
    cirq.X(q[4]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[0]),
    cirq.X(q[1]),
    cirq.X(q[2]),
    cirq.X(q[3]),
    cirq.X(q[4]),
    cirq.reset(q[11]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[0], q[5]),
    cirq.CNOT(q[1], q[7]),
    cirq.CNOT(q[2], q[9]),
    cirq.CNOT(q[3], q[6]),
    cirq.CNOT(q[3], q[7]),
    cirq.CNOT(q[4], q[8]),
    cirq.CNOT(q[4], q[9]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.reset(q[11]),
    cirq.CNOT(q[0], q[5]),
    cirq.H(q[0]),
    cirq.CNOT(q[1], q[7]),
    cirq.X(q[0]),
    cirq.H(q[1]),
    cirq.CNOT(q[2], q[9]),
    cirq.X(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[3], q[6]),
    cirq.X(q[2]),
    cirq.CNOT(q[3], q[7]),
    cirq.H(q[3]),
    cirq.CNOT(q[4], q[8]),
    cirq.X(q[3]),
    cirq.CNOT(q[4], q[9]),
    cirq.H(q[4]),
    cirq.X(q[4]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[0]),
    cirq.X(q[1]),
    cirq.X(q[2]),
    cirq.X(q[3]),
    cirq.X(q[4]),
    cirq.reset(q[11]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[0], q[5]),
    cirq.CNOT(q[1], q[7]),
    cirq.CNOT(q[2], q[9]),
    cirq.CNOT(q[3], q[6]),
    cirq.CNOT(q[3], q[7]),
    cirq.CNOT(q[4], q[8]),
    cirq.CNOT(q[4], q[9]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.reset(q[11]),
    cirq.CNOT(q[0], q[5]),
    cirq.H(q[0]),
    cirq.CNOT(q[1], q[7]),
    cirq.X(q[0]),
    cirq.H(q[1]),
    cirq.CNOT(q[2], q[9]),
    cirq.X(q[1]),
    cirq.H(q[2]),
    cirq.CNOT(q[3], q[6]),
    cirq.X(q[2]),
    cirq.CNOT(q[3], q[7]),
    cirq.H(q[3]),
    cirq.CNOT(q[4], q[8]),
    cirq.X(q[3]),
    cirq.CNOT(q[4], q[9]),
    cirq.H(q[4]),
    cirq.X(q[4]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.Z(q[14]),
    cirq.CCX(q[13], q[4], q[14]),
    cirq.CCX(q[12], q[3], q[13]),
    cirq.reset(q[14]),
    cirq.CCX(q[11], q[2], q[12]),
    cirq.reset(q[13]),
    cirq.CCX(q[1], q[0], q[11]),
    cirq.reset(q[12]),
    cirq.X(q[0]),
    cirq.X(q[1]),
    cirq.X(q[2]),
    cirq.X(q[3]),
    cirq.X(q[4]),
    cirq.reset(q[11]),
    cirq.H(q[0]),
    cirq.H(q[1]),
    cirq.H(q[2]),
    cirq.H(q[3]),
    cirq.H(q[4]),
    cirq.CNOT(q[0], q[5]),
    cirq.CNOT(q[1], q[7]),
    cirq.CNOT(q[2], q[9]),
    cirq.CNOT(q[3], q[6]),
    cirq.CNOT(q[3], q[7]),
    cirq.CNOT(q[4], q[8]),
    cirq.CNOT(q[4], q[9]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CNOT(q[14], q[10]),
    cirq.CCX(q[13], q[9], q[14]),
    cirq.CCX(q[12], q[8], q[13]),
    cirq.CCX(q[11], q[7], q[12]),
    cirq.CCX(q[6], q[5], q[11]),
    cirq.X(q[5]),
    cirq.X(q[7]),
    cirq.X(q[8]),
    cirq.X(q[9]),
    cirq.measure(q[10], key='c10'),
    cirq.measure(q[0], key='c0'),
    cirq.measure(q[1], key='c1'),
    cirq.measure(q[2], key='c2'),
    cirq.measure(q[3], key='c3'),
    cirq.measure(q[4], key='c4'),
    cirq.measure(q[5], key='c5'),
    cirq.measure(q[6], key='c6'),
    cirq.measure(q[7], key='c7'),
    cirq.measure(q[8], key='c8'),
    cirq.measure(q[9], key='c9')
)

simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1024)
result_dict = dict(result.multi_measurement_histogram(keys=['c10', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', ]))
keys = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1]), result_dict.keys()))
counts = dict(zip(keys,[value for value in result_dict.values()]))
print(counts)
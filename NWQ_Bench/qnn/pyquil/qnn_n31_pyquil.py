from pyquil import Program, get_qc
from pyquil.gates import H, CSWAP, MEASURE, RY, RZ
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_theta = Parameter('theta')
p_phi = Parameter('phi')

yy_array = np.array([ [quil_cos(p_theta), 0, 0, 1j*quil_sin(p_theta)], [0, quil_cos(p_theta), -1j*quil_sin(p_theta), 0], [0, -1j*quil_sin(p_theta), quil_cos(p_theta), 0], [1j*quil_sin(p_theta), 0, 0, quil_cos(p_theta)] ])
zz_array = np.array([ [ quil_exp(-1j * p_theta / 2), 0, 0, 0 ], [ 0, quil_exp(1j * p_theta / 2), 0, 0], [ 0, 0, quil_exp(1j * p_theta / 2), 0 ], [ 0, 0, 0, quil_exp(-1j * p_theta / 2) ] ])
cry_array = np.array([[ 1, 0, 0, 0 ],[ 0, 1, 0, 0 ],[ 0, 0, quil_cos(p_theta / 2), -1*quil_sin(p_theta / 2) ],[ 0, 0, quil_sin(p_theta / 2), quil_cos(p_theta / 2) ]])
crz_array = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, quil_cos(p_phi / 2) - 1j * quil_sin(p_phi / 2), 0], [0, 0, 0, quil_cos(p_phi / 2) + 1j * quil_sin(p_phi / 2)]])


yy_defgate = DefGate('yy', yy_array, [p_theta])
yy = yy_defgate.get_constructor()
zz_defgate = DefGate('zz', zz_array, [p_theta])
zz = zz_defgate.get_constructor()
cry_defgate = DefGate('cry', cry_array, [p_theta])
cry = cry_defgate.get_constructor()
crz_defgate = DefGate('crz', crz_array, [p_phi])
crz = crz_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=62)

p.inst(yy_defgate)
p.inst(zz_defgate)
p.inst(cry_defgate)
p.inst(crz_defgate)

p.inst(H(0))
p.inst(RY(0.89878389, 1))
p.inst(RY(3.3212053, 2))
p.inst(RY(4.3050549, 3))
p.inst(RY(0.41562164, 4))
p.inst(RY(2.1732321, 5))
p.inst(RY(4.3073627, 6))
p.inst(RY(4.7653855, 7))
p.inst(RY(5.0676038, 8))
p.inst(RY(5.8766045, 9))
p.inst(RY(4.0647995, 10))
p.inst(RY(4.8677437, 11))
p.inst(RY(0.9691041, 12))
p.inst(RY(2.6202106, 13))
p.inst(RY(0.27403454, 14))
p.inst(RY(3.3359242, 15))
p.inst(RY(2.4896027, 16))
p.inst(RY(1.306116, 17))
p.inst(RY(0.059016132, 18))
p.inst(RY(-1.4433159, 19))
p.inst(RY(-1.1256615, 20))
p.inst(RY(-2.3034596, 21))
p.inst(RY(-2.6631428, 22))
p.inst(RY(-0.30256481, 23))
p.inst(RY(2.0523176, 24))
p.inst(RY(-2.4409305, 25))
p.inst(RY(-2.4674416, 26))
p.inst(RY(-2.9813229, 27))
p.inst(RY(-2.2676944, 28))
p.inst(RY(1.6081796, 29))
p.inst(RY(1.1392807, 30))
p.inst(RZ(5.6416834, 1))
p.inst(RZ(3.6348198, 2))
p.inst(RZ(2.8617571, 3))
p.inst(RZ(6.0618654, 4))
p.inst(RZ(4.6021025, 5))
p.inst(RZ(1.2456433, 6))
p.inst(RZ(4.3514547, 7))
p.inst(RZ(0.32517251, 8))
p.inst(RZ(1.0035958, 9))
p.inst(RZ(1.5213617, 10))
p.inst(RZ(3.2593996, 11))
p.inst(RZ(4.6133537, 12))
p.inst(RZ(1.8627107, 13))
p.inst(RZ(6.2246566, 14))
p.inst(RZ(3.4175022, 15))
p.inst(RZ(-1.8589954, 16))
p.inst(RZ(0.050238184, 17))
p.inst(RZ(0.66186466, 18))
p.inst(RZ(-2.6685869, 19))
p.inst(RZ(-0.53508878, 20))
p.inst(RZ(-2.4653912, 21))
p.inst(RZ(-1.3586213, 22))
p.inst(RZ(-0.13520771, 23))
p.inst(RZ(2.958152, 24))
p.inst(RZ(2.7933767, 25))
p.inst(RZ(2.0315624, 26))
p.inst(RZ(-1.7363347, 27))
p.inst(RZ(-0.98170447, 28))
p.inst(RZ(2.2900202, 29))
p.inst(RZ(0.82292005, 30))
p.inst(yy(0.26433387)(1, 2))
p.inst(zz(1.0291962)(1, 2))
p.inst(yy(2.3846033)(2, 3))
p.inst(zz(5.5313205)(2, 3))
p.inst(cry(1.5063061)(1, 2))
p.inst(yy(6.1056165)(3, 4))
p.inst(crz(5.85077)(1, 2))
p.inst(zz(0.60892931)(3, 4))
p.inst(cry(4.9900423)(2, 3))
p.inst(yy(6.1001135)(4, 5))
p.inst(crz(1.0353808)(2, 3))
p.inst(zz(6.1250482)(4, 5))
p.inst(cry(4.2054998)(3, 4))
p.inst(yy(3.731352)(5, 6))
p.inst(crz(1.298181)(3, 4))
p.inst(zz(5.1263764)(5, 6))
p.inst(cry(4.5232981)(4, 5))
p.inst(yy(4.9092755)(6, 7))
p.inst(crz(0.20611375)(4, 5))
p.inst(zz(4.356695)(6, 7))
p.inst(cry(2.7654812)(5, 6))
p.inst(yy(0.96433775)(7, 8))
p.inst(crz(3.9324449)(5, 6))
p.inst(zz(0.13531445)(7, 8))
p.inst(cry(5.4207911)(6, 7))
p.inst(yy(5.0403312)(8, 9))
p.inst(crz(4.445254)(6, 7))
p.inst(zz(0.45384105)(8, 9))
p.inst(cry(2.7143549)(7, 8))
p.inst(yy(2.912778)(9, 10))
p.inst(crz(1.1007439)(7, 8))
p.inst(zz(0.27825117)(9, 10))
p.inst(cry(4.6707242)(8, 9))
p.inst(yy(3.4267556)(10, 11))
p.inst(crz(4.3748553)(8, 9))
p.inst(zz(5.2543734)(10, 11))
p.inst(cry(1.6910189)(9, 10))
p.inst(yy(1.4708367)(11, 12))
p.inst(crz(3.5980876)(9, 10))
p.inst(zz(4.9942)(11, 12))
p.inst(cry(2.3306333)(10, 11))
p.inst(yy(5.4278958)(12, 13))
p.inst(crz(0.28115271)(10, 11))
p.inst(zz(2.9421363)(12, 13))
p.inst(cry(3.0871756)(11, 12))
p.inst(yy(5.8173858)(13, 14))
p.inst(crz(1.195914)(11, 12))
p.inst(zz(4.4827015)(13, 14))
p.inst(cry(6.1062132)(12, 13))
p.inst(yy(4.7778372)(14, 15))
p.inst(crz(0.47533831)(12, 13))
p.inst(zz(5.3833329)(14, 15))
p.inst(cry(1.9660597)(13, 14))
p.inst(crz(2.3825069)(13, 14))
p.inst(cry(0.067020301)(14, 15))
p.inst(crz(5.2468423)(14, 15))
p.inst(CSWAP(0, 1, 16))
p.inst(CSWAP(0, 2, 17))
p.inst(CSWAP(0, 3, 18))
p.inst(CSWAP(0, 4, 19))
p.inst(CSWAP(0, 5, 20))
p.inst(CSWAP(0, 6, 21))
p.inst(CSWAP(0, 7, 22))
p.inst(CSWAP(0, 8, 23))
p.inst(CSWAP(0, 9, 24))
p.inst(CSWAP(0, 10, 25))
p.inst(CSWAP(0, 11, 26))
p.inst(CSWAP(0, 12, 27))
p.inst(CSWAP(0, 13, 28))
p.inst(CSWAP(0, 14, 29))
p.inst(CSWAP(0, 15, 30))
p.inst(H(0))
p.inst(MEASURE(0, ro[31]))
p.inst(MEASURE(1, ro[32]))
p.inst(MEASURE(2, ro[33]))
p.inst(MEASURE(3, ro[34]))
p.inst(MEASURE(4, ro[35]))
p.inst(MEASURE(5, ro[36]))
p.inst(MEASURE(6, ro[37]))
p.inst(MEASURE(7, ro[38]))
p.inst(MEASURE(8, ro[39]))
p.inst(MEASURE(9, ro[40]))
p.inst(MEASURE(10, ro[41]))
p.inst(MEASURE(11, ro[42]))
p.inst(MEASURE(12, ro[43]))
p.inst(MEASURE(13, ro[44]))
p.inst(MEASURE(14, ro[45]))
p.inst(MEASURE(15, ro[46]))
p.inst(MEASURE(16, ro[47]))
p.inst(MEASURE(17, ro[48]))
p.inst(MEASURE(18, ro[49]))
p.inst(MEASURE(19, ro[50]))
p.inst(MEASURE(20, ro[51]))
p.inst(MEASURE(21, ro[52]))
p.inst(MEASURE(22, ro[53]))
p.inst(MEASURE(23, ro[54]))
p.inst(MEASURE(24, ro[55]))
p.inst(MEASURE(25, ro[56]))
p.inst(MEASURE(26, ro[57]))
p.inst(MEASURE(27, ro[58]))
p.inst(MEASURE(28, ro[59]))
p.inst(MEASURE(29, ro[60]))
p.inst(MEASURE(30, ro[61]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('31q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)

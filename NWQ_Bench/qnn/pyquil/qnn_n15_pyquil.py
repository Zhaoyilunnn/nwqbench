from pyquil import Program, get_qc
from pyquil.gates import H, CSWAP, MEASURE, RY, RZ
from pyquil.quilatom import Parameter, quil_sin, quil_cos, quil_sqrt, quil_exp, quil_cis
from pyquil.quilbase import DefGate
from functools import reduce
import numpy as np

shots = 1024

p_theta = Parameter('theta')
p_phi = Parameter('phi')

yy_array = np.array([ [quil_cos(p_theta), 0, 0, 1j*quil_sin(p_theta)], [0, quil_cos(p_theta), -1j*quil_sin(p_theta), 0], [0, -1j*quil_sin(p_theta), quil_cos(p_theta), 0], [1j*quil_sin(p_theta), 0, 0, quil_cos(p_theta)] ])
zz_array = np.array([ [ quil_exp(-1j * p_theta / 2), 0, 0, 0 ], [ 0, quil_exp(1j * p_theta / 2), 0, 0], [ 0, 0, quil_exp(1j * p_theta / 2), 0 ], [ 0, 0, 0, quil_exp(-1j * p_theta / 2) ] ])
cry_array = np.array([[ 1, 0, 0, 0 ],[ 0, 1, 0, 0 ],[ 0, 0, quil_cos(p_theta / 2), -1*quil_sin(p_theta / 2) ],[ 0, 0, quil_sin(p_theta / 2), quil_cos(p_theta / 2) ]])
crz_array = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, quil_cos(p_phi / 2) - 1j * quil_sin(p_phi / 2), 0], [0, 0, 0, quil_cos(p_phi / 2) + 1j * quil_sin(p_phi / 2)]])


yy_defgate = DefGate('yy', yy_array, [p_theta])
yy = yy_defgate.get_constructor()
zz_defgate = DefGate('zz', zz_array, [p_theta])
zz = zz_defgate.get_constructor()
cry_defgate = DefGate('cry', cry_array, [p_theta])
cry = cry_defgate.get_constructor()
crz_defgate = DefGate('crz', crz_array, [p_phi])
crz = crz_defgate.get_constructor()


p = Program()

ro = p.declare('ro', memory_type='BIT', memory_size=30)

p.inst(yy_defgate)
p.inst(zz_defgate)
p.inst(cry_defgate)
p.inst(crz_defgate)

p.inst(H(0))
p.inst(RY(4.6657245, 1))
p.inst(RY(1.552304, 2))
p.inst(RY(0.75870345, 3))
p.inst(RY(5.3649138, 4))
p.inst(RY(4.8555286, 5))
p.inst(RY(3.1742778, 6))
p.inst(RY(4.3194047, 7))
p.inst(RY(-2.4543916, 8))
p.inst(RY(-2.0350321, 9))
p.inst(RY(1.147724, 10))
p.inst(RY(2.0464092, 11))
p.inst(RY(-1.8095397, 12))
p.inst(RY(-1.4813434, 13))
p.inst(RY(-0.85377198, 14))
p.inst(RZ(3.7977995, 1))
p.inst(RZ(1.2413078, 2))
p.inst(RZ(1.2318791, 3))
p.inst(RZ(1.6023095, 4))
p.inst(RZ(1.1116801, 5))
p.inst(RZ(5.0114181, 6))
p.inst(RZ(5.5246443, 7))
p.inst(RZ(2.9980787, 8))
p.inst(RZ(-1.2059923, 9))
p.inst(RZ(2.4694738, 10))
p.inst(RZ(-2.3386974, 11))
p.inst(RZ(-0.49181898, 12))
p.inst(RZ(1.4527108, 13))
p.inst(RZ(1.0003452, 14))
p.inst(yy(3.6631548)(1, 2))
p.inst(zz(6.2345074)(1, 2))
p.inst(yy(1.170895)(2, 3))
p.inst(zz(3.4619423)(2, 3))
p.inst(cry(3.99579)(1, 2))
p.inst(yy(0.5775641)(3, 4))
p.inst(crz(4.9222201)(1, 2))
p.inst(zz(2.9578414)(3, 4))
p.inst(cry(5.2865479)(2, 3))
p.inst(yy(4.2772443)(4, 5))
p.inst(crz(4.6679845)(2, 3))
p.inst(zz(2.084639)(4, 5))
p.inst(cry(1.3945543)(3, 4))
p.inst(yy(0.63004618)(5, 6))
p.inst(crz(0.27538905)(3, 4))
p.inst(zz(1.9195556)(5, 6))
p.inst(cry(3.0322379)(4, 5))
p.inst(yy(5.7417715)(6, 7))
p.inst(crz(2.8183949)(4, 5))
p.inst(zz(6.0514407)(6, 7))
p.inst(cry(2.2733639)(5, 6))
p.inst(crz(6.2831176)(5, 6))
p.inst(cry(5.1160943)(6, 7))
p.inst(crz(1.8639966)(6, 7))
p.inst(CSWAP(0, 1, 8))
p.inst(CSWAP(0, 2, 9))
p.inst(CSWAP(0, 3, 10))
p.inst(CSWAP(0, 4, 11))
p.inst(CSWAP(0, 5, 12))
p.inst(CSWAP(0, 6, 13))
p.inst(CSWAP(0, 7, 14))
p.inst(H(0))
p.inst(MEASURE(0, ro[15]))
p.inst(MEASURE(1, ro[16]))
p.inst(MEASURE(2, ro[17]))
p.inst(MEASURE(3, ro[18]))
p.inst(MEASURE(4, ro[19]))
p.inst(MEASURE(5, ro[20]))
p.inst(MEASURE(6, ro[21]))
p.inst(MEASURE(7, ro[22]))
p.inst(MEASURE(8, ro[23]))
p.inst(MEASURE(9, ro[24]))
p.inst(MEASURE(10, ro[25]))
p.inst(MEASURE(11, ro[26]))
p.inst(MEASURE(12, ro[27]))
p.inst(MEASURE(13, ro[28]))
p.inst(MEASURE(14, ro[29]))

p.wrap_in_numshots_loop(shots)

qc = get_qc('15q-qvm')
results_list = qc.run(p)
results = list(map(lambda arr: reduce(lambda x, y: str(x) + str(y), arr[::-1], ""), results_list))
counts = dict(zip(results,[results.count(i) for i in results]))
print(counts)
